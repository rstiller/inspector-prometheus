var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/Percentiles.html",[0,0.457,1,0.976]],["body/classes/Percentiles.html",[0,0.654,1,1.535,2,0.506,3,0.678,4,0.237,5,0.506,6,1.535,7,1.136,8,2.402,9,1.136,10,1.89,11,1.535,12,1.136,13,1.136,14,2.161,15,1.078,16,0.854,17,0.356,18,1.192,19,1.567,20,2.361,21,1.619,22,1.614,23,1.005,24,1.33,25,1.706,26,1.696,27,2.119,28,1.005,29,1.291,30,1.043,31,0.069,32,1.944,33,1.039,34,0.6,35,2.119,36,1.136,37,1.416,38,1.416,39,1.416,40,1.416,41,1.416,42,1.416,43,1.416,44,1.416,45,1.33,46,1.875,47,1.97,48,1.136,49,1.136,50,1.136,51,1.051,52,0.678,53,0.706,54,0.566,55,0.713,56,1.763,57,1.222,58,1.02,59,1.177,60,1.122,61,0.807,62,0.964,63,1.146,64,1.136,65,1.334,66,1.399,67,0.807,68,1.146,69,0.506,70,0.713,71,0.807,72,1.614,73,1.291,74,0.678,75,0.293,76,0.6,77,0.679,78,0.956,79,0.426,80,0.81,81,1.89,82,1.146,83,1.192,84,1.136,85,0.398,86,2.161,87,1.252,88,1.416,89,0.053,90,1.399,91,1.97,92,2.206,93,1.334,94,1.811,95,1.782,96,0.713,97,0.713,98,1.136,99,0.713,100,1.136,101,0.713,102,0.624,103,0.713,104,0.713,105,0.713,106,0.506,107,1.005,108,1.146,109,1.264,110,1.334,111,1.005,112,1.416,113,1.136,114,0.713,115,2.108,116,0.713,117,1.136,118,1.416,119,1.192,120,1.614,121,0.956,122,0.713,123,1.192,124,0.807,125,1.192,126,0.807,127,0.964,128,0.713,129,0.807,130,0.713,131,0.426,132,0.678,133,0.713,134,0.713,135,1.192,136,1.614,137,1.136,138,1.614,139,1.136,140,2.576,141,0.713,142,1.136,143,1.136,144,1.136,145,1.136,146,1.136,147,1.136,148,1.136,149,0.713,150,1.763,151,1.136,152,0.956,153,0.956,154,1.136,155,0.956,156,0.956,157,0.956,158,1.136,159,0.713,160,0.713,161,1.136,162,1.136,163,1.136,164,1.559,165,0.713,166,0.713,167,0.713,168,0.713,169,0.713,170,0.713,171,0.713,172,0.713,173,0.807,174,1.484,175,0.956,176,0.807,177,0.506,178,1.122,179,0.6,180,1.334,181,0.713,182,1.399,183,0.713,184,0.713,185,1.486,186,1.399,187,0.807,188,0.713,189,0.807,190,1.136,191,0.713,192,1.252,193,0.713,194,0.807,195,1.614,196,0.713,197,1.399,198,1.416,199,0.678,200,0.713,201,0.713,202,1.136,203,0.713,204,0.713,205,0.506,206,1.005,207,0.506,208,0.356,209,0.713,210,0.713,211,0.6,212,1.497,213,0.713,214,0.506,215,0.506,216,1.359,217,0.713,218,0.713,219,0.713,220,0.713,221,0.713,222,0.713,223,0.713,224,0.713,225,0.506,226,0.713,227,1.136,228,1.416,229,0.713,230,0.506,231,0.713,232,0.506,233,0.713,234,1.614,235,0.713,236,1.136,237,0.713,238,0.713,239,0.506,240,0.713,241,0.713,242,0.506,243,0.713,244,0.713,245,0.713,246,0.713,247,0.964,248,1.136,249,0.713,250,0.713,251,1.136,252,0.713,253,0.713,254,0.713,255,0.713,256,1.136,257,1.136,258,1.136,259,1.136,260,1.136,261,0.713,262,0.713,263,0.956,264,1.614,265,2.245,266,1.416,267,1.416,268,0.713,269,2.28,270,0.713,271,0.713,272,0.713,273,0.713,274,0.713,275,1.97,276,0.713,277,0.713,278,0.713,279,1.136,280,1.614,281,0.713,282,0.713,283,0.713,284,0.713,285,0.713,286,0.713,287,0.713,288,0.713,289,0.713,290,0.713,291,0.713,292,0.713,293,1.763,294,0.713,295,0.713,296,0.713,297,0.713,298,0.713,299,0.713,300,0.713,301,0.713,302,0.713,303,1.614,304,0.713,305,0.713,306,0.713,307,1.136,308,0.713,309,0.713,310,0.713,311,0.713,312,0.713,313,1.136,314,1.136,315,0.713,316,0.713,317,0.713,318,0.713,319,0.713,320,0.713,321,0.713,322,0.713,323,0.713,324,0.713,325,0.713,326,0.713,327,0.713,328,0.713,329,0.713,330,0.713,331,0.713,332,0.713,333,0.713,334,0.713,335,0.713,336,0.713,337,0.713,338,0.713,339,0.713,340,0.028]],["title/interfaces/PrometheusFields.html",[85,0.268,87,0.976]],["body/interfaces/PrometheusFields.html",[0,0.593,1,1.465,2,0.519,3,0.692,4,0.243,5,0.519,6,1.546,7,0.731,8,2.349,9,0.731,10,1.87,11,1.509,12,0.731,13,0.731,14,1.784,15,1.085,17,0.364,18,0.615,19,1.509,20,2.323,21,1.577,22,0.731,23,0.822,25,1.668,26,0.875,28,0.822,29,1.188,31,0.07,32,1.902,33,1.031,36,0.731,37,1.158,38,1.158,39,1.158,40,1.158,41,1.158,42,1.158,43,1.158,44,1.158,46,1.878,47,1.898,48,0.731,49,0.731,50,0.731,51,1.051,52,0.692,53,0.717,54,0.577,55,0.731,56,1.784,57,1.232,58,1.029,59,1.188,60,1.134,61,0.822,62,0.978,63,1.162,64,1.158,65,1.348,66,1.413,67,0.822,68,1.162,69,0.519,70,0.731,71,0.822,72,1.637,73,1.3,74,0.692,75,0.3,76,0.615,77,0.685,78,0.975,79,0.436,80,0.818,81,1.902,82,1.162,83,1.211,84,1.439,85,0.424,86,2.221,87,1.348,88,1.637,89,0.053,90,1.413,91,1.989,92,2.221,93,1.348,94,1.816,95,1.788,96,0.731,97,0.731,98,1.158,99,0.731,100,1.158,101,0.731,102,0.63,103,0.731,104,0.731,105,0.731,106,0.519,107,1.022,108,1.162,109,1.268,110,1.348,111,1.022,112,1.439,113,1.158,114,0.731,115,2.125,116,0.731,117,1.158,118,1.439,119,1.211,120,1.637,121,0.975,122,0.731,123,1.211,124,0.822,125,1.211,126,0.822,127,0.978,128,0.731,129,0.822,130,0.731,131,0.436,132,0.692,133,0.731,134,0.731,135,1.211,136,1.637,137,1.158,138,1.637,139,1.158,140,2.583,141,0.731,142,1.158,143,1.158,144,1.158,145,1.158,146,1.158,147,1.158,148,1.158,149,0.731,150,1.784,151,1.158,152,0.975,153,0.975,154,1.158,155,0.975,156,0.975,157,0.975,158,1.158,159,0.731,160,0.731,161,1.158,162,1.158,163,1.158,164,1.562,165,0.731,166,0.731,167,0.731,168,0.731,169,0.731,170,0.731,171,0.731,172,0.731,173,0.822,174,1.502,175,0.975,176,0.822,177,0.519,178,1.134,179,0.615,180,1.348,181,0.731,182,1.413,183,0.731,184,0.731,185,1.492,186,1.413,187,0.822,188,0.731,189,0.822,190,1.158,191,0.731,192,1.267,193,0.731,194,0.822,195,1.637,196,0.731,197,1.413,198,1.439,199,0.692,200,0.731,201,0.731,202,1.158,203,0.731,204,0.731,205,0.519,206,1.022,207,0.519,208,0.364,209,0.731,210,0.731,211,0.615,212,1.509,213,0.731,214,0.519,215,0.519,216,1.378,217,0.731,218,0.731,219,0.731,220,0.731,221,0.731,222,0.731,223,0.731,224,0.731,225,0.519,226,0.731,227,1.158,228,1.439,229,0.731,230,0.519,231,0.731,232,0.519,233,0.731,234,1.637,235,0.731,236,1.158,237,0.731,238,0.731,239,0.519,240,0.731,241,0.731,242,0.519,243,0.731,244,0.731,245,0.731,246,0.731,247,0.978,248,1.158,249,0.731,250,0.731,251,1.158,252,0.731,253,0.731,254,0.731,255,0.731,256,1.158,257,1.158,258,1.158,259,1.158,260,1.158,261,0.731,262,0.731,263,0.975,264,1.637,265,2.26,266,1.439,267,1.439,268,0.731,269,2.293,270,0.731,271,0.731,272,0.731,273,0.731,274,0.731,275,1.989,276,0.731,277,0.731,278,0.731,279,1.158,280,1.637,281,0.731,282,0.731,283,0.731,284,0.731,285,0.731,286,0.731,287,0.731,288,0.731,289,0.731,290,0.731,291,0.731,292,0.731,293,1.784,294,0.731,295,0.731,296,0.731,297,0.731,298,0.731,299,0.731,300,0.731,301,0.731,302,0.731,303,1.637,304,0.731,305,0.731,306,0.731,307,1.158,308,0.731,309,0.731,310,0.731,311,0.731,312,0.731,313,1.158,314,1.158,315,0.731,316,0.731,317,0.731,318,0.731,319,0.731,320,0.731,321,0.731,322,0.731,323,0.731,324,0.731,325,0.731,326,0.731,327,0.731,328,0.731,329,0.731,330,0.731,331,0.731,332,0.731,333,0.731,334,0.731,335,0.731,336,0.731,337,0.731,338,0.731,339,0.731,340,0.029,341,1.363]],["title/interfaces/PrometheusMetricResult.html",[85,0.268,90,0.976]],["body/interfaces/PrometheusMetricResult.html",[0,0.591,1,1.462,2,0.516,3,0.688,4,0.241,5,0.516,6,1.543,7,0.726,8,2.346,9,0.726,10,1.867,11,1.506,12,0.726,13,0.726,14,1.779,15,1.083,17,0.362,18,1.206,19,1.506,20,2.32,21,1.575,22,0.726,23,0.818,25,1.647,28,0.818,29,1.185,31,0.07,32,1.899,33,1.05,36,0.726,37,1.152,38,1.152,39,1.152,40,1.152,41,1.152,42,1.152,43,1.152,44,1.152,46,1.873,47,1.893,48,0.726,49,0.726,50,0.726,51,1.05,52,0.688,53,0.714,54,0.575,55,0.726,56,1.779,57,1.23,58,1.027,59,1.185,60,1.131,61,0.818,62,0.974,63,1.158,64,1.152,65,1.345,66,1.409,67,0.818,68,1.158,69,0.516,70,0.726,71,0.818,72,1.631,73,1.298,74,0.688,75,0.298,76,0.611,77,0.684,78,0.97,79,0.434,80,0.816,81,1.953,82,1.158,83,1.206,84,1.433,85,0.423,86,2.29,87,1.409,88,1.433,89,0.054,90,1.462,91,2.173,92,2.29,93,1.345,94,1.815,95,1.786,96,0.726,97,0.726,98,1.152,99,0.726,100,1.152,101,0.726,102,0.629,103,0.726,104,0.726,105,0.726,106,0.516,107,1.017,108,1.158,109,1.267,110,1.345,111,1.017,112,1.433,113,1.152,114,0.726,115,2.121,116,0.726,117,1.152,118,1.433,119,1.206,120,1.631,121,0.97,122,0.726,123,1.206,124,0.818,125,1.206,126,0.818,127,0.974,128,0.726,129,0.818,130,0.726,131,0.434,132,0.688,133,0.726,134,0.726,135,1.206,136,1.631,137,1.152,138,1.631,139,1.152,140,2.581,141,0.726,142,1.152,143,1.152,144,1.152,145,1.152,146,1.152,147,1.152,148,1.152,149,0.726,150,1.779,151,1.152,152,0.97,153,0.97,154,1.152,155,0.97,156,0.97,157,0.97,158,1.152,159,0.726,160,0.726,161,1.152,162,1.152,163,1.152,164,1.561,165,0.726,166,0.726,167,0.726,168,0.726,169,0.726,170,0.726,171,0.726,172,0.726,173,0.818,174,1.498,175,0.97,176,0.818,177,0.516,178,1.131,179,0.611,180,1.345,181,0.726,182,1.409,183,0.726,184,0.726,185,1.49,186,1.409,187,0.818,188,0.726,189,0.818,190,1.152,191,0.726,192,1.263,193,0.726,194,0.818,195,1.631,196,0.726,197,1.409,198,1.433,199,0.688,200,0.726,201,0.726,202,1.152,203,0.726,204,0.726,205,0.516,206,1.017,207,0.516,208,0.362,209,0.726,210,0.726,211,0.611,212,1.506,213,0.726,214,0.516,215,0.516,216,1.373,217,0.726,218,0.726,219,0.726,220,0.726,221,0.726,222,0.726,223,0.726,224,0.726,225,0.516,226,0.726,227,1.152,228,1.433,229,0.726,230,0.516,231,0.726,232,0.516,233,0.726,234,1.631,235,0.726,236,1.152,237,0.726,238,0.726,239,0.516,240,0.726,241,0.726,242,0.516,243,0.726,244,0.726,245,0.726,246,0.726,247,0.974,248,1.152,249,0.726,250,0.726,251,1.152,252,0.726,253,0.726,254,0.726,255,0.726,256,1.152,257,1.152,258,1.152,259,1.152,260,1.152,261,0.726,262,0.726,263,0.97,264,1.631,265,2.256,266,1.433,267,1.433,268,0.726,269,2.29,270,0.726,271,0.726,272,0.726,273,0.726,274,0.726,275,1.985,276,0.726,277,0.726,278,0.726,279,1.152,280,1.631,281,0.726,282,0.726,283,0.726,284,0.726,285,0.726,286,0.726,287,0.726,288,0.726,289,0.726,290,0.726,291,0.726,292,0.726,293,1.779,294,0.726,295,0.726,296,0.726,297,0.726,298,0.726,299,0.726,300,0.726,301,0.726,302,0.726,303,1.631,304,0.726,305,0.726,306,0.726,307,1.152,308,0.726,309,0.726,310,0.726,311,0.726,312,0.726,313,1.152,314,1.152,315,0.726,316,0.726,317,0.726,318,0.726,319,0.726,320,0.726,321,0.726,322,0.726,323,0.726,324,0.726,325,0.726,326,0.726,327,0.726,328,0.726,329,0.726,330,0.726,331,0.726,332,0.726,333,0.726,334,0.726,335,0.726,336,0.726,337,0.726,338,0.726,339,0.726,340,0.029]],["title/interfaces/PrometheusReporterOptions.html",[85,0.268,110,0.976]],["body/interfaces/PrometheusReporterOptions.html",[0,0.588,1,1.457,2,0.511,3,0.683,4,0.239,5,0.511,6,1.539,7,0.719,8,2.341,9,0.719,10,1.862,11,1.501,12,0.719,13,0.719,14,1.771,15,1.054,17,0.359,18,1.199,19,1.501,20,2.315,21,1.571,22,0.719,23,0.812,25,1.644,28,0.812,29,1.181,31,0.069,32,1.895,33,1.043,34,1.588,36,0.719,37,1.144,38,1.144,39,1.144,40,1.144,41,1.144,42,1.144,43,1.144,44,1.144,46,1.872,47,1.886,48,0.719,49,0.719,50,0.719,51,1.052,52,0.683,53,0.71,54,0.57,55,0.719,56,1.771,57,1.226,58,1.023,59,1.181,60,1.126,61,0.812,62,0.969,63,1.152,64,1.424,65,1.339,66,1.404,67,0.812,68,1.152,69,0.511,70,0.719,71,0.812,72,1.623,73,1.294,74,0.683,75,0.296,76,0.606,77,0.702,78,0.963,79,0.43,80,0.813,81,1.895,82,1.152,83,1.366,84,1.144,85,0.411,86,2.167,87,1.258,88,1.424,89,0.053,90,1.404,91,1.977,92,2.387,93,1.339,94,1.813,95,1.784,96,0.719,97,0.719,98,1.144,99,0.719,100,1.144,101,0.719,102,0.626,103,0.719,104,0.719,105,0.719,106,0.812,107,1.152,108,1.152,109,1.27,110,1.404,111,1.152,112,1.886,113,1.424,114,1.144,115,2.167,116,1.144,117,1.424,118,1.623,119,1.588,120,1.771,121,1.199,122,1.144,123,1.588,124,1.011,125,1.588,126,0.812,127,0.969,128,0.719,129,0.812,130,0.719,131,0.43,132,0.683,133,0.719,134,0.719,135,1.199,136,1.623,137,1.144,138,1.623,139,1.144,140,2.579,141,0.719,142,1.144,143,1.144,144,1.144,145,1.144,146,1.144,147,1.144,148,1.144,149,0.719,150,1.771,151,1.144,152,0.963,153,0.963,154,1.144,155,0.963,156,0.963,157,0.963,158,1.144,159,0.719,160,0.719,161,1.144,162,1.144,163,1.144,164,1.56,165,0.719,166,0.719,167,0.719,168,0.719,169,0.719,170,0.719,171,0.719,172,0.719,173,0.812,174,1.491,175,0.963,176,0.812,177,0.511,178,1.126,179,0.606,180,1.339,181,0.719,182,1.404,183,0.719,184,0.719,185,1.488,186,1.404,187,0.812,188,0.719,189,0.812,190,1.144,191,0.719,192,1.258,193,0.719,194,0.812,195,1.623,196,0.719,197,1.404,198,1.424,199,0.683,200,0.719,201,0.719,202,1.144,203,0.719,204,0.719,205,0.511,206,1.011,207,0.511,208,0.359,209,0.719,210,0.719,211,0.606,212,1.501,213,0.719,214,0.511,215,0.511,216,1.366,217,0.719,218,0.719,219,0.719,220,0.719,221,0.719,222,0.719,223,0.719,224,0.719,225,0.511,226,0.719,227,1.144,228,1.424,229,0.719,230,0.511,231,0.719,232,0.511,233,0.719,234,1.623,235,0.719,236,1.144,237,0.719,238,0.719,239,0.511,240,0.719,241,0.719,242,0.511,243,0.719,244,0.719,245,0.719,246,0.719,247,0.969,248,1.144,249,0.719,250,0.719,251,1.144,252,0.719,253,0.719,254,0.719,255,0.719,256,1.144,257,1.144,258,1.144,259,1.144,260,1.144,261,0.719,262,0.719,263,0.963,264,1.623,265,2.251,266,1.424,267,1.424,268,0.719,269,2.285,270,0.719,271,0.719,272,0.719,273,0.719,274,0.719,275,1.977,276,0.719,277,0.719,278,0.719,279,1.144,280,1.623,281,0.719,282,0.719,283,0.719,284,0.719,285,0.719,286,0.719,287,0.719,288,0.719,289,0.719,290,0.719,291,0.719,292,0.719,293,1.771,294,0.719,295,0.719,296,0.719,297,0.719,298,0.719,299,0.719,300,0.719,301,0.719,302,0.719,303,1.623,304,0.719,305,0.719,306,0.719,307,1.144,308,0.719,309,0.719,310,0.719,311,0.719,312,0.719,313,1.144,314,1.144,315,0.719,316,0.719,317,0.719,318,0.719,319,0.719,320,0.719,321,0.719,322,0.719,323,0.719,324,0.719,325,0.719,326,0.719,327,0.719,328,0.719,329,0.719,330,0.719,331,0.719,332,0.719,333,0.719,334,0.719,335,0.719,336,0.719,337,0.719,338,0.719,339,0.719,340,0.029]],["title/classes/PushgatewayMetricReporter.html",[0,0.457,342,1.157]],["body/classes/PushgatewayMetricReporter.html",[0,0.612,2,0.78,3,0.941,4,0.365,6,0.78,11,0.78,15,1.206,16,1.316,17,0.548,19,1.662,21,1.515,23,1.119,25,1.119,26,2.933,28,1.119,29,1.326,30,3.538,31,0.069,32,2.006,33,1.065,34,2.035,46,1.772,51,0.962,52,1.203,53,0.786,54,0.548,57,1.326,58,1.188,59,1.274,60,1.274,61,1.515,62,1.203,63,0.78,65,1.808,66,1.43,67,1.43,68,1.43,69,0.78,71,1.119,73,0.941,74,1.274,75,0.451,77,0.708,79,0.941,80,0.828,85,0.359,89,0.053,93,1.43,94,1.817,95,1.119,102,0.523,106,1.515,107,0.78,108,1.43,109,1.188,111,1.43,124,1.119,126,1.43,127,1.203,129,1.119,131,1.101,132,0.656,164,1.502,173,1.119,176,1.119,177,0.78,178,0.941,180,1.756,182,1.717,185,1.274,186,1.833,187,1.119,189,0.78,192,1.43,194,1.43,197,1.577,199,1.101,205,0.78,206,1.119,207,1.43,212,1.891,214,1.309,215,1.309,225,1.309,230,1.119,232,1.119,239,1.119,242,1.119,340,0.039,342,2.154,343,1.316,344,2.306,345,2.495,346,2.306,347,3.424,348,2.306,349,1.888,350,2.698,351,2.941,352,2.941,353,2.941,354,2.941,355,2.941,356,2.941,357,2.049,358,2.448,359,2.049,360,2.049,361,2.049,362,2.049,363,2.473,364,2.049,365,2.698,366,2.306,367,2.698,368,2.049,369,2.049,370,4.143,371,2.049,372,2.049,373,2.049,374,2.306,375,2.049,376,2.049,377,2.049,378,2.049,379,2.306,380,2.049,381,3.347,382,2.306,383,2.948,384,2.306,385,2.306,386,1.607,387,1.607,388,1.607,389,2.414,390,2.556,391,2.306,392,2.414,393,1.607,394,1.607,395,2.948,396,1.316,397,1.316,398,1.607,399,1.607,400,1.607,401,1.316,402,2.306,403,1.607,404,2.306,405,1.607,406,1.576,407,1.607,408,1.607,409,2.306,410,1.607,411,1.607,412,1.607,413,2.306,414,1.607,415,1.607,416,1.607,417,1.607,418,1.316,419,1.607,420,1.607,421,1.607,422,1.607,423,1.607,424,1.607,425,1.607,426,1.607,427,1.607,428,1.607]],["title/interfaces/PushgatewayReporterOptions.html",[85,0.268,358,1.375]],["body/interfaces/PushgatewayReporterOptions.html",[0,0.572,2,0.884,3,1.028,4,0.413,6,0.884,11,0.884,15,1.238,17,0.621,18,1.449,19,1.401,21,1.587,23,0.884,25,1.512,28,0.884,29,1.465,31,0.069,33,1.053,34,2.144,46,1.847,51,0.95,52,1.272,53,0.858,54,0.621,57,1.179,58,1.153,59,1.028,60,1.028,61,1.222,62,1.028,63,0.884,65,1.642,66,1.222,67,1.222,68,1.222,69,0.884,71,1.222,73,1.028,74,1.028,75,0.511,77,0.707,79,0.743,80,0.707,85,0.435,89,0.049,93,1.512,94,1.847,95,1.222,102,0.572,106,1.512,107,1.222,108,1.512,109,1.205,111,1.512,124,0.884,126,1.222,127,1.028,129,0.884,131,0.743,132,0.743,164,1.272,173,1.222,176,1.222,177,0.884,178,0.743,180,1.512,182,1.642,185,1.335,186,1.715,187,1.222,189,0.884,192,1.222,194,0.884,197,1.222,199,0.743,205,0.884,206,0.884,207,0.884,212,1.839,214,0.884,215,0.884,225,0.884,230,0.884,232,0.884,239,0.884,242,0.884,340,0.043,342,2.18,343,1.491,344,1.821,345,2.508,346,1.821,347,3.116,348,1.821,349,1.491,350,2.519,358,2.482,363,2.312,365,2.888,366,1.821,367,2.519,374,1.821,379,1.821,381,3.271,382,2.519,383,3.468,384,2.519,385,2.888,386,2.519,387,2.519,388,2.519,389,2.84,390,2.938,391,3.116,392,2.894,393,2.519,394,2.519,395,3.535,396,2.063,397,2.063,398,2.519,399,1.821,400,1.821,401,1.491,402,2.519,403,1.821,404,2.519,405,1.821,406,1.722,407,1.821,408,1.821,409,2.519,410,1.821,411,1.821,412,1.821,413,2.519,414,1.821,415,1.821,416,1.821,417,1.821,418,1.491,419,1.821,420,1.821,421,1.821,422,1.821,423,1.821,424,1.821,425,1.821,426,1.821,427,1.821,428,1.821]],["title/changelog.html",[208,0.581,247,0.696,429,1.705]],["body/changelog.html",[4,0.753,15,1.131,31,0.061,54,0.953,58,0.953,75,0.932,77,0.753,80,0.785,89,0.057,102,0.634,127,1.141,135,1.608,155,1.608,156,1.608,157,1.608,340,0.057,345,1.911,363,1.911,397,2.289,429,3.54,430,3.565,431,4.514,432,4.514,433,2.289,434,3.565,435,3.565,436,3.565,437,3.319,438,3.565,439,3.565,440,3.54,441,4.67,442,3.565,443,4.836,444,3.54,445,3.319,446,4.233,447,2.718,448,3.565,449,4.233,450,2.796,451,2.268,452,3.565,453,2.796,454,2.796,455,4.233,456,3.565,457,3.565,458,3.565,459,2.796,460,4.233,461,3.565,462,3.565,463,3.319,464,3.565,465,2.796,466,4.514,467,3.565,468,2.718,469,3.565,470,2.289,471,3.319,472,3.565,473,3.565,474,3.565,475,3.565,476,1.911,477,3.565,478,3.565,479,3.565]],["title/coverage.html",[476,1.842]],["body/coverage.html",[0,0.822,1,1.432,4,0.67,5,1.84,31,0.067,33,0.829,85,0.496,87,1.432,89,0.059,90,1.432,102,0.67,109,1.005,110,1.432,340,0.059,342,1.697,343,2.805,358,2.016,433,2.416,476,2.016,480,3.763,481,2.951,482,3.763,483,3.763,484,3.763,485,3.763,486,3.726,487,3.763,488,3.763,489,3.763,490,3.763,491,3.763,492,3.763,493,2.951,494,2.951]],["title/dependencies.html",[447,1.97,495,2.175]],["body/dependencies.html",[3,1.259,31,0.065,51,0.866,53,1.051,54,1.051,75,0.866,89,0.06,340,0.06,447,2.526,496,3.935,497,3.935]],["title/index.html",[17,0.581,208,0.581,247,0.696]],["body/index.html",[10,1.672,15,1.31,16,1.847,29,0.921,31,0.069,33,0.634,34,1.298,51,1.097,52,1.434,53,0.769,62,1.312,73,1.312,74,1.186,75,1.041,77,0.73,80,1.041,82,1.095,89,0.05,102,0.841,109,1.247,119,1.298,121,1.298,123,1.298,125,1.298,131,0.921,132,1.186,164,0.921,174,1.672,175,1.298,178,1.186,179,1.672,185,1.529,199,1.386,208,1.157,211,2.07,340,0.05,342,1.672,345,2.197,363,1.542,389,2.38,390,2.38,392,1.847,396,1.847,401,1.847,418,1.847,437,2.256,444,2.906,445,3.216,450,2.256,451,2.321,453,2.256,454,2.256,459,2.256,463,2.256,465,2.256,470,1.847,471,2.256,498,3.706,499,2.877,500,1.847,501,2.877,502,2.877,503,4.1,504,3.706,505,3.706,506,2.877,507,3.706,508,3.706,509,2.877,510,2.877,511,2.877,512,3.706,513,3.706,514,3.706,515,2.877,516,2.877,517,2.877,518,2.877,519,4.482,520,2.877,521,2.877,522,2.877,523,2.877,524,4.1,525,2.877,526,2.877,527,2.256,528,2.877,529,2.877,530,2.877,531,2.877,532,2.877,533,2.877,534,2.877,535,2.877,536,2.877,537,2.877,538,2.877,539,2.877,540,2.877,541,2.877,542,2.877,543,2.877,544,2.877,545,2.877,546,2.877,547,2.877,548,2.877,549,3.706,550,2.877,551,2.877,552,2.877,553,2.877,554,2.877,555,2.877,556,2.877,557,2.877,558,3.706,559,2.877,560,2.877,561,3.706,562,2.877,563,2.877,564,2.877,565,2.877,566,2.877,567,2.877,568,2.877,569,2.877,570,2.877,571,2.877,572,2.877,573,2.256,574,2.877,575,2.877,576,2.877,577,2.877,578,2.877,579,2.877,580,2.877,581,2.877,582,2.877,583,2.877,584,2.877,585,2.256,586,4.1,587,2.877,588,4.729,589,3.706,590,2.877,591,2.877,592,2.877,593,2.877,594,2.877,595,2.877,596,3.706,597,2.877,598,4.588,599,2.877,600,2.877,601,2.877,602,2.877,603,2.877,604,2.877]],["title/license.html",[208,0.581,247,0.696,468,1.396]],["body/license.html",[4,0.642,31,0.057,58,0.964,77,0.759,89,0.057,340,0.057,349,2.317,433,2.317,440,2.83,468,2.317,470,2.317,527,2.83,573,2.83,585,2.83,605,4.538,606,3.609,607,4.263,608,3.609,609,3.609,610,3.609,611,3.609,612,4.263,613,3.609,614,4.688,615,4.963,616,3.609,617,4.263,618,4.538,619,3.609,620,4.538,621,4.263,622,3.609,623,3.609,624,3.609,625,3.609,626,3.609,627,3.609,628,3.609,629,3.609,630,3.609,631,3.609,632,3.609,633,3.609,634,4.263,635,4.263,636,3.609,637,3.609,638,4.263,639,3.609,640,3.609,641,3.609,642,3.609,643,3.609,644,3.609,645,3.609,646,3.609,647,3.609,648,3.609,649,3.609,650,3.609,651,3.609,652,3.609,653,3.609,654,3.609,655,3.609,656,3.609,657,3.609,658,3.609,659,3.609]],["title/modules.html",[500,2.207]],["body/modules.html",[31,0.06,89,0.06,340,0.06,500,2.552]],["title/overview.html",[660,2.696]],["body/overview.html",[0,0.704,31,0.06,85,0.413,89,0.06,152,1.785,153,1.785,340,0.06,660,3.103]],["title/miscellaneous/typealiases.html",[661,1.705,662,3.068]],["body/miscellaneous/typealiases.html",[5,1.473,17,1.034,31,0.066,33,0.978,51,0.852,57,1.239,59,1.239,60,1.239,76,1.746,77,0.689,78,1.746,79,1.239,80,0.852,81,2.107,82,1.473,83,1.746,89,0.06,340,0.06,661,3.035,663,3.87,664,3.87]],["title/unit-test.html",[406,1.485,451,1.485]],["body/unit-test.html",[4,0.678,31,0.067,89,0.059,102,0.678,216,1.719,263,1.719,340,0.059,406,2.042,451,2.042,476,2.042,481,2.989,486,3.452,493,2.989,494,2.989,665,3.811,666,4.401,667,3.811,668,4.401,669,3.811,670,3.811,671,3.811,672,3.811,673,3.811,674,3.811,675,3.811,676,4.401,677,3.811,678,3.811,679,3.811,680,3.811]]],"invertedIndex":[["",{"_index":31,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["0",{"_index":10,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["0.0.0.0",{"_index":530,"title":{},"body":{"index.html":{}}}],["0.01",{"_index":36,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["0.05",{"_index":37,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["0.5",{"_index":38,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["0.5.9",{"_index":497,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":39,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["0.9",{"_index":40,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["0.95",{"_index":41,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["0.98",{"_index":42,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["0.99",{"_index":43,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["0.999",{"_index":44,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["04",{"_index":449,"title":{},"body":{"changelog.html":{}}}],["1",{"_index":11,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["1.0",{"_index":100,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["1.0.0",{"_index":459,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["1.15.0",{"_index":496,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":487,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":489,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":460,"title":{},"body":{"changelog.html":{}}}],["100",{"_index":486,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["1000",{"_index":403,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["1000192",{"_index":561,"title":{},"body":{"index.html":{}}}],["108/117",{"_index":674,"title":{},"body":{"unit-test.html":{}}}],["109/118",{"_index":669,"title":{},"body":{"unit-test.html":{}}}],["11",{"_index":441,"title":{},"body":{"changelog.html":{}}}],["12/12",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["127.0.0.3",{"_index":523,"title":{},"body":{"index.html":{}}}],["127.0.0.4",{"_index":576,"title":{},"body":{"index.html":{}}}],["15",{"_index":544,"title":{},"body":{"index.html":{}}}],["19/19",{"_index":676,"title":{},"body":{"unit-test.html":{}}}],["1999872",{"_index":564,"title":{},"body":{"index.html":{}}}],["2",{"_index":151,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["2.0.0",{"_index":448,"title":{},"body":{"changelog.html":{}}}],["2.1.0",{"_index":439,"title":{},"body":{"changelog.html":{}}}],["2000128",{"_index":566,"title":{},"body":{"index.html":{}}}],["2018",{"_index":440,"title":{},"body":{"changelog.html":{},"license.html":{}}}],["25",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["26",{"_index":442,"title":{},"body":{"changelog.html":{}}}],["27/33",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["283998208report",{"_index":572,"title":{},"body":{"index.html":{}}}],["29/33",{"_index":673,"title":{},"body":{"unit-test.html":{}}}],["3",{"_index":152,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"overview.html":{}}}],["3/4",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":546,"title":{},"body":{"index.html":{}}}],["362",{"_index":570,"title":{},"body":{"index.html":{}}}],["4",{"_index":153,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"overview.html":{}}}],["4/4",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["4000000",{"_index":568,"title":{},"body":{"index.html":{}}}],["42",{"_index":679,"title":{},"body":{"unit-test.html":{}}}],["5",{"_index":154,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["5/12",{"_index":680,"title":{},"body":{"unit-test.html":{}}}],["54",{"_index":677,"title":{},"body":{"unit-test.html":{}}}],["6",{"_index":155,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"changelog.html":{}}}],["69/77",{"_index":671,"title":{},"body":{"unit-test.html":{}}}],["7",{"_index":156,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"changelog.html":{}}}],["7/13",{"_index":678,"title":{},"body":{"unit-test.html":{}}}],["7/7",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":157,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"changelog.html":{}}}],["8080",{"_index":531,"title":{},"body":{"index.html":{}}}],["81",{"_index":484,"title":{},"body":{"coverage.html":{}}}],["88",{"_index":672,"title":{},"body":{"unit-test.html":{}}}],["9",{"_index":478,"title":{},"body":{"changelog.html":{}}}],["9\"].sort",{"_index":158,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["90",{"_index":670,"title":{},"body":{"unit-test.html":{}}}],["9091",{"_index":401,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["92",{"_index":668,"title":{},"body":{"unit-test.html":{}}}],["999936",{"_index":558,"title":{},"body":{"index.html":{}}}],["9_",{"_index":145,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["_",{"_index":150,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["_${field",{"_index":292,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["abov",{"_index":573,"title":{},"body":{"index.html":{},"license.html":{}}}],["action",{"_index":653,"title":{},"body":{"license.html":{}}}],["ad",{"_index":443,"title":{},"body":{"changelog.html":{}}}],["adapt",{"_index":457,"title":{},"body":{"changelog.html":{}}}],["additionalfield",{"_index":280,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["address",{"_index":388,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["adher",{"_index":435,"title":{},"body":{"changelog.html":{}}}],["alias",{"_index":663,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alway",{"_index":124,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["and/or",{"_index":628,"title":{},"body":{"license.html":{}}}],["anyth",{"_index":525,"title":{},"body":{"index.html":{}}}],["app",{"_index":549,"title":{},"body":{"index.html":{}}}],["append",{"_index":116,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["applic",{"_index":506,"title":{},"body":{"index.html":{}}}],["aris",{"_index":657,"title":{},"body":{"license.html":{}}}],["array",{"_index":215,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["assign",{"_index":49,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["associ",{"_index":616,"title":{},"body":{"license.html":{}}}],["async",{"_index":180,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["author",{"_index":646,"title":{},"body":{"license.html":{}}}],["await",{"_index":187,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["b",{"_index":98,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["base",{"_index":135,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"changelog.html":{}}}],["basic",{"_index":471,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["befor",{"_index":210,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["beforereport(ctx",{"_index":213,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["between",{"_index":9,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["boolean",{"_index":92,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["boundari",{"_index":14,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["boundaries.foreach((boundari",{"_index":99,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["boundaries.sort((a",{"_index":97,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["boundaries=[0.01",{"_index":96,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["branch",{"_index":665,"title":{},"body":{"unit-test.html":{}}}],["browser",{"_index":594,"title":{},"body":{"index.html":{}}}],["bucket",{"_index":56,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["bucketcount",{"_index":55,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["bucketcount}${timestamp",{"_index":320,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["bucketstr",{"_index":315,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["bucketstrings.join(\"\\n",{"_index":321,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["bucketstrings.push",{"_index":318,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["build",{"_index":178,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["buildprometheustags(tagg",{"_index":252,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["buildrun",{"_index":599,"title":{},"body":{"index.html":{}}}],["c",{"_index":606,"title":{},"body":{"license.html":{}}}],["call",{"_index":129,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["can't",{"_index":262,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["canbereport",{"_index":91,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["canreport",{"_index":267,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["chai",{"_index":473,"title":{},"body":{"changelog.html":{}}}],["chang",{"_index":431,"title":{},"body":{"changelog.html":{}}}],["changelog",{"_index":429,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["charact",{"_index":138,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["charg",{"_index":611,"title":{},"body":{"license.html":{}}}],["check",{"_index":161,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["claim",{"_index":649,"title":{},"body":{"license.html":{}}}],["class",{"_index":0,"title":{"classes/Percentiles.html":{},"classes/PushgatewayMetricReporter.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["click",{"_index":595,"title":{},"body":{"index.html":{}}}],["clock",{"_index":173,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["code",{"_index":397,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{}}}],["code(200",{"_index":539,"title":{},"body":{"index.html":{}}}],["comment",{"_index":120,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["common",{"_index":515,"title":{},"body":{"index.html":{}}}],["compil",{"_index":450,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["compos",{"_index":598,"title":{},"body":{"index.html":{}}}],["condit",{"_index":633,"title":{},"body":{"license.html":{}}}],["config",{"_index":466,"title":{},"body":{"changelog.html":{}}}],["configur",{"_index":106,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["connect",{"_index":659,"title":{},"body":{"license.html":{}}}],["consol",{"_index":400,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["console.log(\"report",{"_index":537,"title":{},"body":{"index.html":{}}}],["const",{"_index":185,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["constant",{"_index":48,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["constructor",{"_index":23,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["constructor(boundari",{"_index":24,"title":{},"body":{"classes/Percentiles.html":{}}}],["constructor(undefin",{"_index":357,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["contain",{"_index":512,"title":{},"body":{"index.html":{}}}],["content",{"_index":413,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["contract",{"_index":654,"title":{},"body":{"license.html":{}}}],["convert",{"_index":114,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["copi",{"_index":614,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":605,"title":{},"body":{"license.html":{}}}],["correct",{"_index":301,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["count",{"_index":234,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["counter",{"_index":57,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["counter.getcount",{"_index":227,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["countertyp",{"_index":169,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["count}${timestamp}\\n",{"_index":323,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["coverag",{"_index":476,"title":{"coverage.html":{}},"body":{"changelog.html":{},"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":28,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["ctx",{"_index":186,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["ctx.canbereport",{"_index":221,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["ctx.field",{"_index":222,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["ctx.result",{"_index":189,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["ctx.type",{"_index":220,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["custom",{"_index":504,"title":{},"body":{"index.html":{}}}],["damag",{"_index":650,"title":{},"body":{"license.html":{}}}],["dashboard",{"_index":596,"title":{},"body":{"index.html":{}}}],["data",{"_index":118,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["date",{"_index":197,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["deal",{"_index":617,"title":{},"body":{"license.html":{}}}],["default",{"_index":35,"title":{},"body":{"classes/Percentiles.html":{}}}],["defin",{"_index":26,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"classes/PushgatewayMetricReporter.html":{}}}],["depend",{"_index":447,"title":{"dependencies.html":{}},"body":{"changelog.html":{},"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["description}\\n",{"_index":286,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["determin",{"_index":78,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["dev",{"_index":578,"title":{},"body":{"index.html":{}}}],["differ",{"_index":453,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["distribut",{"_index":626,"title":{},"body":{"license.html":{}}}],["docker",{"_index":588,"title":{},"body":{"index.html":{}}}],["document",{"_index":433,"title":{},"body":{"changelog.html":{},"coverage.html":{},"license.html":{}}}],["durat",{"_index":554,"title":{},"body":{"index.html":{}}}],["each",{"_index":117,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["editorconfig",{"_index":477,"title":{},"body":{"changelog.html":{}}}],["emit",{"_index":122,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["emitcom",{"_index":123,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["empti",{"_index":163,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["endpoint",{"_index":505,"title":{},"body":{"index.html":{}}}],["enumer",{"_index":76,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["env/boot.sh",{"_index":587,"title":{},"body":{"index.html":{}}}],["environ",{"_index":584,"title":{},"body":{"index.html":{}}}],["eqaul",{"_index":105,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["error(\"boundari",{"_index":103,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["evaluation_interv",{"_index":545,"title":{},"body":{"index.html":{}}}],["event",{"_index":58,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"license.html":{}}}],["event.gettim",{"_index":201,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["exampl",{"_index":16,"title":{},"body":{"classes/Percentiles.html":{},"classes/PushgatewayMetricReporter.html":{},"index.html":{}}}],["example.t",{"_index":511,"title":{},"body":{"index.html":{}}}],["exclud",{"_index":251,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["exclude.indexof(normalizedkey",{"_index":258,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["exclude.sort",{"_index":253,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["execut",{"_index":586,"title":{},"body":{"index.html":{}}}],["export",{"_index":93,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["expos",{"_index":503,"title":{},"body":{"index.html":{}}}],["express",{"_index":527,"title":{},"body":{"index.html":{},"license.html":{}}}],["extend",{"_index":111,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["fals",{"_index":175,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["field",{"_index":86,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["fields[\"count",{"_index":282,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["fieldstr",{"_index":290,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["filter",{"_index":249,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["first",{"_index":147,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["fit",{"_index":642,"title":{},"body":{"license.html":{}}}],["flushev",{"_index":207,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["follow",{"_index":585,"title":{},"body":{"index.html":{},"license.html":{}}}],["foreach((bucketcount",{"_index":317,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["format",{"_index":127,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{}}}],["free",{"_index":610,"title":{},"body":{"license.html":{}}}],["fulli",{"_index":582,"title":{},"body":{"index.html":{}}}],["function",{"_index":263,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"unit-test.html":{}}}],["furnish",{"_index":631,"title":{},"body":{"license.html":{}}}],["g",{"_index":146,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["gaug",{"_index":59,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["gauge.getvalu",{"_index":231,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["gaugetyp",{"_index":170,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["gener",{"_index":365,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["get",{"_index":247,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["getbucket",{"_index":311,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["getcount",{"_index":316,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["getdescription(metr",{"_index":297,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["geteventstr",{"_index":203,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["geteventstring>(ev",{"_index":193,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["getmetricname(metr",{"_index":333,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["getmetricsstr",{"_index":181,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["getmetricstr",{"_index":268,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["getquantil",{"_index":324,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["gettimestamp(now",{"_index":308,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["getvalue(valu",{"_index":304,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["given",{"_index":162,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["global",{"_index":542,"title":{},"body":{"index.html":{}}}],["grant",{"_index":609,"title":{},"body":{"license.html":{}}}],["greater",{"_index":104,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["h",{"_index":536,"title":{},"body":{"index.html":{}}}],["h.response(reporter.getmetricsstr",{"_index":538,"title":{},"body":{"index.html":{}}}],["handler(request",{"_index":535,"title":{},"body":{"index.html":{}}}],["handleresult",{"_index":214,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["handleresults(ctx",{"_index":361,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["hapi",{"_index":528,"title":{},"body":{"index.html":{}}}],["hapi.serv",{"_index":529,"title":{},"body":{"index.html":{}}}],["header",{"_index":412,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["help",{"_index":121,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["helper",{"_index":84,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["herebi",{"_index":608,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":60,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["histogram.getcount",{"_index":235,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["histogram.getsum().tostr",{"_index":237,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["histogramtyp",{"_index":171,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["holder",{"_index":647,"title":{},"body":{"license.html":{}}}],["host",{"_index":389,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["hostnam",{"_index":386,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["http",{"_index":382,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["http.request(opt",{"_index":422,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["https://github.com/prometheus/pushgateway",{"_index":399,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["https://prometheus.io/docs/concept",{"_index":133,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["https://prometheus.io/docs/instrumenting/exposition_formats/#text",{"_index":134,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["id",{"_index":391,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["identifi",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["imag",{"_index":589,"title":{},"body":{"index.html":{}}}],["implement",{"_index":363,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["impli",{"_index":640,"title":{},"body":{"license.html":{}}}],["import",{"_index":52,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["includ",{"_index":620,"title":{},"body":{"license.html":{}}}],["includetimestamp",{"_index":119,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":112,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["inf",{"_index":303,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["infin",{"_index":307,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["initi",{"_index":461,"title":{},"body":{"changelog.html":{}}}],["inspector",{"_index":75,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":507,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":29,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["instanceof",{"_index":226,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["instead",{"_index":204,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["interfac",{"_index":85,"title":{"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["ip",{"_index":387,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["isempty(valu",{"_index":165,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["isnan(histogram.getcount",{"_index":233,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["isnan(meter.getcount",{"_index":240,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["isnan(timer.getcount",{"_index":243,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["isnumber(valu",{"_index":167,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["job",{"_index":392,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["job_nam",{"_index":548,"title":{},"body":{"index.html":{}}}],["join",{"_index":279,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["join(\"\\n",{"_index":332,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["keep",{"_index":434,"title":{},"body":{"changelog.html":{}}}],["key",{"_index":88,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["key.replace(prometheusmetricreporter.label_name_replacement_regexp",{"_index":257,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["keys(field",{"_index":288,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["keys(tag",{"_index":276,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["kind",{"_index":639,"title":{},"body":{"license.html":{}}}],["koa",{"_index":526,"title":{},"body":{"index.html":{}}}],["label",{"_index":139,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["label_name_replacement_regexp",{"_index":141,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["label_name_start_exclus",{"_index":149,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["latenc",{"_index":520,"title":{},"body":{"index.html":{}}}],["le",{"_index":274,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["length",{"_index":414,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["liabil",{"_index":651,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":648,"title":{},"body":{"license.html":{}}}],["lib/.../prometheusmetricreporter.t",{"_index":664,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/metrics/prometheusmetricreporter.t",{"_index":5,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/prometheusmetricreporter.ts:37",{"_index":341,"title":{},"body":{"interfaces/PrometheusFields.html":{}}}],["lib/metrics/prometheusmetricreporter.ts:64",{"_index":27,"title":{},"body":{"classes/Percentiles.html":{}}}],["lib/metrics/prometheusmetricreporter.ts:73",{"_index":45,"title":{},"body":{"classes/Percentiles.html":{}}}],["lib/metrics/pushgatewaymetricreporter.t",{"_index":343,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:131",{"_index":372,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:145",{"_index":360,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:155",{"_index":364,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:172",{"_index":380,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:199",{"_index":362,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:213",{"_index":369,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:224",{"_index":375,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:233",{"_index":376,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:242",{"_index":377,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:251",{"_index":378,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:86",{"_index":359,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["librari",{"_index":498,"title":{},"body":{"index.html":{}}}],["licens",{"_index":468,"title":{"license.html":{}},"body":{"changelog.html":{},"license.html":{}}}],["limit",{"_index":621,"title":{},"body":{"license.html":{}}}],["line",{"_index":216,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"unit-test.html":{}}}],["lines.join(\"\\n",{"_index":224,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["lines.push(lin",{"_index":223,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["link",{"_index":108,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["lint",{"_index":467,"title":{},"body":{"changelog.html":{}}}],["list",{"_index":7,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["localhost",{"_index":575,"title":{},"body":{"index.html":{}}}],["localhost:3000",{"_index":593,"title":{},"body":{"index.html":{}}}],["localhost:8080exampl",{"_index":553,"title":{},"body":{"index.html":{}}}],["log",{"_index":395,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["logger",{"_index":383,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["look",{"_index":579,"title":{},"body":{"index.html":{}}}],["made",{"_index":499,"title":{},"body":{"index.html":{}}}],["mainli",{"_index":302,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["map",{"_index":53,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"dependencies.html":{},"index.html":{}}}],["map((boundari",{"_index":328,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["map((field",{"_index":289,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["map((tag",{"_index":277,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["match",{"_index":340,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["meant",{"_index":501,"title":{},"body":{"index.html":{}}}],["memberof",{"_index":94,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["merchant",{"_index":641,"title":{},"body":{"license.html":{}}}],["merg",{"_index":624,"title":{},"body":{"license.html":{}}}],["messag",{"_index":398,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["metadata",{"_index":50,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metadata_nam",{"_index":22,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["meter",{"_index":61,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["meter.getcount",{"_index":241,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["method",{"_index":131,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["metric",{"_index":51,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metric.getbucket",{"_index":312,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metric.getdescript",{"_index":298,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metric.getgroup",{"_index":335,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metric.getgroup()}:${metric.getnam",{"_index":336,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metric.getmetadata(percentiles.metadata_nam",{"_index":325,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metric.getnam",{"_index":334,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metric.getsnapshot",{"_index":327,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metric_name_replacement_regexp",{"_index":159,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metric_name_start_exclus",{"_index":160,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metriclogg",{"_index":458,"title":{},"body":{"changelog.html":{}}}],["metricnam",{"_index":269,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metricname}${fieldstr}{${tagstr",{"_index":295,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metricname}_bucket{${tagstr}${tagprefix}le=\"${boundari",{"_index":319,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metricname}{${tagstr}${tagprefix}quantile=\"${boundari",{"_index":330,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metricregistri",{"_index":62,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["metricreport",{"_index":63,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["metricreporteropt",{"_index":64,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["metrics/job/${this.options.job}/instance/${this.options.inst",{"_index":419,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["metrics@1.11.0",{"_index":479,"title":{},"body":{"changelog.html":{}}}],["metrics@1.13.0",{"_index":456,"title":{},"body":{"changelog.html":{}}}],["metrics_path",{"_index":550,"title":{},"body":{"index.html":{}}}],["metricsetreportcontext",{"_index":65,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["metrictyp",{"_index":66,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["metrictype}\\n",{"_index":287,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["millisecond",{"_index":384,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["minreportingtimeout",{"_index":176,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["miscellan",{"_index":661,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":470,"title":{},"body":{"changelog.html":{},"index.html":{},"license.html":{}}}],["mnt/c/git/inspector",{"_index":666,"title":{},"body":{"unit-test.html":{}}}],["mocha",{"_index":472,"title":{},"body":{"changelog.html":{}}}],["modifi",{"_index":623,"title":{},"body":{"license.html":{}}}],["modul",{"_index":500,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["monotonecount",{"_index":67,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["n",{"_index":190,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["n${metricname}_bucket{${tagstr}${tagprefix}le=\"+inf",{"_index":322,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["name",{"_index":32,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{}}}],["name.replace(prometheusmetricreporter.metric_name_replacement_regexp",{"_index":337,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["name.slice(1",{"_index":339,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["navig",{"_index":592,"title":{},"body":{"index.html":{}}}],["need",{"_index":148,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["new",{"_index":102,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":454,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["node10licens",{"_index":604,"title":{},"body":{"index.html":{}}}],["node6",{"_index":600,"title":{},"body":{"index.html":{}}}],["node7",{"_index":601,"title":{},"body":{"index.html":{}}}],["node8",{"_index":602,"title":{},"body":{"index.html":{}}}],["node9",{"_index":603,"title":{},"body":{"index.html":{}}}],["nodej",{"_index":444,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["noninfring",{"_index":645,"title":{},"body":{"license.html":{}}}],["normal",{"_index":248,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["normalizedkey",{"_index":256,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["notabl",{"_index":430,"title":{},"body":{"changelog.html":{}}}],["noth",{"_index":206,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["notic",{"_index":634,"title":{},"body":{"license.html":{}}}],["now",{"_index":266,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["now.getutcmillisecond",{"_index":310,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["npm",{"_index":508,"title":{},"body":{"index.html":{}}}],["null",{"_index":198,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["number",{"_index":25,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["number.isfinite(valu",{"_index":306,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["numer",{"_index":300,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["nyc",{"_index":475,"title":{},"body":{"changelog.html":{}}}],["object",{"_index":107,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["obtain",{"_index":613,"title":{},"body":{"license.html":{}}}],["open",{"_index":128,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["option",{"_index":34,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["ot",{"_index":393,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["otherwis",{"_index":656,"title":{},"body":{"license.html":{}}}],["out",{"_index":658,"title":{},"body":{"license.html":{}}}],["output",{"_index":348,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["overallctx",{"_index":195,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["overallctx.result",{"_index":202,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["overallreportcontext",{"_index":68,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["overview",{"_index":660,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":495,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":95,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["paramet",{"_index":30,"title":{},"body":{"classes/Percentiles.html":{},"classes/PushgatewayMetricReporter.html":{}}}],["particular",{"_index":643,"title":{},"body":{"license.html":{}}}],["path",{"_index":418,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["payload",{"_index":381,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["payload.length",{"_index":415,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["percent",{"_index":13,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["percentil",{"_index":1,"title":{"classes/Percentiles.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["permiss",{"_index":607,"title":{},"body":{"license.html":{}}}],["permit",{"_index":630,"title":{},"body":{"license.html":{}}}],["person",{"_index":612,"title":{},"body":{"license.html":{}}}],["playground",{"_index":445,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["playground.sh",{"_index":591,"title":{},"body":{"index.html":{}}}],["playground/playground.t",{"_index":580,"title":{},"body":{"index.html":{}}}],["port",{"_index":390,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["portion",{"_index":637,"title":{},"body":{"license.html":{}}}],["privat",{"_index":140,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["project",{"_index":432,"title":{},"body":{"changelog.html":{}}}],["prometheu",{"_index":80,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["prometheus'",{"_index":344,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["prometheus/lib/metrics/prometheusmetricreporter.t",{"_index":667,"title":{},"body":{"unit-test.html":{}}}],["prometheus/lib/metrics/pushgatewaymetricreporter.t",{"_index":675,"title":{},"body":{"unit-test.html":{}}}],["prometheusfield",{"_index":87,"title":{"interfaces/PrometheusFields.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["prometheusmetricreport",{"_index":109,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["prometheusmetricreporter#geteventstr",{"_index":407,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["prometheusmetricreporter#getmetricsstr",{"_index":130,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.isempty(descript",{"_index":299,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.isempty(field",{"_index":291,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.isempty(tagstr",{"_index":314,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.isnumber(valu",{"_index":305,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.label_name_start_exclusion.indexof(normalizedkey.charat(0",{"_index":259,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.metric_name_start_exclusion.indexof(name.charat(0",{"_index":338,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["prometheusmetricresult",{"_index":90,"title":{"interfaces/PrometheusMetricResult.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["prometheusmetrictyp",{"_index":81,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["prometheusreporteropt",{"_index":110,"title":{"interfaces/PrometheusReporterOptions.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["promis",{"_index":182,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["properti",{"_index":18,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["protect",{"_index":212,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["provid",{"_index":349,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"license.html":{}}}],["provis",{"_index":583,"title":{},"body":{"index.html":{}}}],["public",{"_index":19,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["publish",{"_index":625,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":644,"title":{},"body":{"license.html":{}}}],["push",{"_index":502,"title":{},"body":{"index.html":{}}}],["pushgateway",{"_index":345,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["pushgatewaymetricreport",{"_index":342,"title":{"classes/PushgatewayMetricReporter.html":{}},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["pushgatewayreporteropt",{"_index":358,"title":{"interfaces/PushgatewayReporterOptions.html":{}},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{}}}],["pushreport",{"_index":574,"title":{},"body":{"index.html":{}}}],["pushreporter.start();loc",{"_index":577,"title":{},"body":{"index.html":{}}}],["put",{"_index":367,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["quantil",{"_index":47,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["re",{"_index":423,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["readm",{"_index":464,"title":{},"body":{"changelog.html":{}}}],["readonli",{"_index":21,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["regexp(\"[^a",{"_index":142,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["regist",{"_index":179,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["registri",{"_index":199,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["registry.newtimer(\"request",{"_index":521,"title":{},"body":{"index.html":{}}}],["releas",{"_index":462,"title":{},"body":{"changelog.html":{}}}],["replac",{"_index":136,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["report",{"_index":15,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"index.html":{}}}],["reportcount",{"_index":225,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["reportcounter(count",{"_index":368,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["reporter.addmetricregistry(registri",{"_index":514,"title":{},"body":{"index.html":{}}}],["reporter.settags(tag",{"_index":517,"title":{},"body":{"index.html":{}}}],["reportev",{"_index":351,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["reportevent(ev",{"_index":371,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["reportevent>(ev",{"_index":205,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["reportgaug",{"_index":352,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["reportgauge(gaug",{"_index":230,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["reporthistogram",{"_index":353,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["reporthistogram(histogram",{"_index":232,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["reportingresult",{"_index":69,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["reportinterv",{"_index":402,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["reportmet",{"_index":354,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["reportmeter(met",{"_index":239,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["reporttim",{"_index":355,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["reporttimer(tim",{"_index":242,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["repres",{"_index":12,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["represent",{"_index":191,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["req",{"_index":421,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["req.end",{"_index":428,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["req.write(payload",{"_index":427,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["request",{"_index":519,"title":{},"body":{"index.html":{}}}],["requests.settag(\"host",{"_index":522,"title":{},"body":{"index.html":{}}}],["requests_count{app_version=\"1.0.0\",host=\"127.0.0.3",{"_index":569,"title":{},"body":{"index.html":{}}}],["requests_sum{app_version=\"1.0.0\",host=\"127.0.0.3",{"_index":571,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.01",{"_index":555,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.05",{"_index":556,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.5",{"_index":557,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.75",{"_index":559,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.9",{"_index":560,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.95",{"_index":562,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.98",{"_index":563,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.99",{"_index":565,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.999",{"_index":567,"title":{},"body":{"index.html":{}}}],["res.statusmessag",{"_index":426,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["reserv",{"_index":250,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["respons",{"_index":396,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["restrict",{"_index":619,"title":{},"body":{"license.html":{}}}],["result",{"_index":89,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["result.metr",{"_index":217,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["result.result",{"_index":218,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["return",{"_index":164,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["right",{"_index":622,"title":{},"body":{"license.html":{}}}],["rout",{"_index":533,"title":{},"body":{"index.html":{}}}],["run",{"_index":211,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["sampl",{"_index":70,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["save",{"_index":509,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":404,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["scheduledmetricreport",{"_index":350,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["scheduledmetricreporteropt",{"_index":385,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["scrape_config",{"_index":547,"title":{},"body":{"index.html":{}}}],["scrape_interv",{"_index":543,"title":{},"body":{"index.html":{}}}],["script",{"_index":452,"title":{},"body":{"changelog.html":{}}}],["see",{"_index":132,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["sell",{"_index":629,"title":{},"body":{"license.html":{}}}],["semant",{"_index":436,"title":{},"body":{"changelog.html":{}}}],["send",{"_index":347,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["sendpayload",{"_index":356,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["sendpayload(payload",{"_index":379,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["server",{"_index":524,"title":{},"body":{"index.html":{}}}],["server.rout",{"_index":534,"title":{},"body":{"index.html":{}}}],["server.start();/etc/prometheus/config.yml",{"_index":541,"title":{},"body":{"index.html":{}}}],["server.to",{"_index":581,"title":{},"body":{"index.html":{}}}],["servic",{"_index":590,"title":{},"body":{"index.html":{}}}],["setinterv",{"_index":405,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["setup",{"_index":463,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["shall",{"_index":635,"title":{},"body":{"license.html":{}}}],["simpl",{"_index":518,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":346,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["simplifi",{"_index":394,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["sinon",{"_index":474,"title":{},"body":{"changelog.html":{}}}],["snapshot",{"_index":326,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["snapshot.getvalue(boundari",{"_index":329,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["softwar",{"_index":615,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"dependencies.html":{}}}],["specifi",{"_index":192,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["standard",{"_index":532,"title":{},"body":{"index.html":{}}}],["start",{"_index":208,"title":{"changelog.html":{},"index.html":{},"license.html":{}},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["statement",{"_index":481,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":20,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["static_config",{"_index":551,"title":{},"body":{"index.html":{}}}],["stdclock",{"_index":71,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["stop",{"_index":209,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["straight",{"_index":374,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["string",{"_index":46,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["subject",{"_index":632,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":627,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":636,"title":{},"body":{"license.html":{}}}],["sum",{"_index":236,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["summari",{"_index":82,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["summarytyp",{"_index":172,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["super",{"_index":177,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["support",{"_index":54,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"dependencies.html":{}}}],["t",{"_index":265,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["tabl",{"_index":494,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":493,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":73,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["taggabl",{"_index":72,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["taggable.gettags().foreach((valu",{"_index":261,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["tagprefix",{"_index":313,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["tags.set(\"app_vers",{"_index":516,"title":{},"body":{"index.html":{}}}],["tags[normalizedkey",{"_index":260,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["tagstr",{"_index":275,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["tag}=\"${tags[tag",{"_index":278,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["target",{"_index":552,"title":{},"body":{"index.html":{}}}],["templat",{"_index":264,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["test",{"_index":451,"title":{"unit-test.html":{}},"body":{"changelog.html":{},"index.html":{},"unit-test.html":{}}}],["tevent",{"_index":194,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["teventdata",{"_index":373,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["text",{"_index":126,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["text/plain",{"_index":416,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["this.buildprometheustags(metr",{"_index":273,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.countertyp",{"_index":229,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.createoverallreportcontext",{"_index":410,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["this.gaugetyp",{"_index":228,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.getbuckets(metr",{"_index":281,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.getdescription(metr",{"_index":271,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.getmetricname(metr",{"_index":270,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.getmetricstring(d",{"_index":219,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.getquantiles(metr",{"_index":283,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.gettimestamp(now",{"_index":272,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.getvalue(fields[field",{"_index":294,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.handleresult",{"_index":200,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.histogramtyp",{"_index":238,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.metricregistri",{"_index":183,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.metricregistries.length",{"_index":184,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.options.emitcom",{"_index":285,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.options.host",{"_index":417,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.includetimestamp",{"_index":309,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.options.log",{"_index":424,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.log.trace(`${res.statuscod",{"_index":425,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.port",{"_index":420,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.reporter.geteventstring(ev",{"_index":408,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.reporter.getmetricsstr",{"_index":411,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["this.options.tags.foreach((valu",{"_index":255,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.options.useuntyp",{"_index":284,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.report",{"_index":188,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.reportgauge(ev",{"_index":196,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["this.sendpayload(payload",{"_index":409,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["this.summarytyp",{"_index":246,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["throw",{"_index":101,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["timer",{"_index":74,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"index.html":{}}}],["timer.getcount",{"_index":244,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["timer.getsum().tostr",{"_index":245,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["timestamp",{"_index":115,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["tort",{"_index":655,"title":{},"body":{"license.html":{}}}],["travis.yml",{"_index":455,"title":{},"body":{"changelog.html":{}}}],["true",{"_index":174,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["type",{"_index":33,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type(\"text/plain",{"_index":540,"title":{},"body":{"index.html":{}}}],["typealias",{"_index":662,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof(valu",{"_index":168,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["typescript",{"_index":465,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["under",{"_index":469,"title":{},"body":{"changelog.html":{}}}],["unit",{"_index":406,"title":{"unit-test.html":{}},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"unit-test.html":{}}}],["unreleas",{"_index":438,"title":{},"body":{"changelog.html":{}}}],["unsupport",{"_index":137,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["untyp",{"_index":83,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["updat",{"_index":446,"title":{},"body":{"changelog.html":{}}}],["us",{"_index":77,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"changelog.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["usag",{"_index":510,"title":{},"body":{"index.html":{}}}],["useuntyp",{"_index":125,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"index.html":{}}}],["utc",{"_index":113,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["valid",{"_index":79,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["valu",{"_index":8,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["value.trim",{"_index":166,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["valuestr",{"_index":293,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["valuestr}${timestamp}\\n",{"_index":296,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["value}${timestamp",{"_index":331,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["version",{"_index":437,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["via",{"_index":366,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"interfaces/PushgatewayReporterOptions.html":{}}}],["void",{"_index":370,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["warranti",{"_index":638,"title":{},"body":{"license.html":{}}}],["whether",{"_index":652,"title":{},"body":{"license.html":{}}}],["within",{"_index":513,"title":{},"body":{"index.html":{}}}],["without",{"_index":618,"title":{},"body":{"license.html":{}}}],["work",{"_index":597,"title":{},"body":{"index.html":{}}}],["x",{"_index":254,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["z0",{"_index":144,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}],["za",{"_index":143,"title":{},"body":{"classes/Percentiles.html":{},"interfaces/PrometheusFields.html":{},"interfaces/PrometheusMetricResult.html":{},"interfaces/PrometheusReporterOptions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Percentiles.html":{"url":"classes/Percentiles.html","title":"class - Percentiles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Percentiles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PrometheusMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                List of values between 0 and 1 representing the percent boundaries for reporting.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                boundaries\n                            \n                            \n                                    Static\n                                    Readonly\n                                METADATA_NAME\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boundaries: number[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/PrometheusMetricReporter.ts:64\n                            \n                        \n\n                \n                    \n                            Creates an instance of Percentiles.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boundaries\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            boundaries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        boundaries:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PrometheusMetricReporter.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            METADATA_NAME\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        METADATA_NAME:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"quantiles\"\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PrometheusMetricReporter.ts:64\n                            \n                        \n\n                \n                    \n                        Name constant for assigning an instance of this class as metadata to a metric instance.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support\";\n\nimport {\n    BucketCounting,\n    Buckets,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MetricReporterOptions,\n    MetricSetReportContext,\n    MetricType,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    Sampling,\n    StdClock,\n    Taggable,\n    Tags,\n    Timer,\n} from \"inspector-metrics\";\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype PrometheusMetricType = \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\";\n\n/**\n * Helper interface for reported fields.\n *\n * @interface PrometheusFields\n */\ninterface PrometheusFields { [key: string]: number | string; }\n\n/**\n * Helper interface for a report result.\n *\n * @interface PrometheusMetricResult\n */\ninterface PrometheusMetricResult {\n    readonly type: PrometheusMetricType;\n    readonly fields: PrometheusFields;\n    readonly canBeReported: boolean;\n}\n\n/**\n * List of values between 0 and 1 representing the percent boundaries for reporting.\n *\n * @export\n * @class Percentiles\n */\nexport class Percentiles {\n\n    /**\n     * Name constant for assigning an instance of this class as metadata to a metric instance.\n     *\n     * @static\n     * @memberof Percentiles\n     */\n    public static readonly METADATA_NAME = \"quantiles\";\n\n    /**\n     * Creates an instance of Percentiles.\n     *\n     * @param {number[]} [boundaries=[0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]]\n     * @memberof Percentiles\n     */\n    constructor(\n        public boundaries: number[] = [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999],\n    ) {\n        boundaries.sort((a: number, b: number) => a - b);\n        boundaries.forEach((boundary) => {\n            if (boundary = 1.0) {\n                throw new Error(\"boundaries cannot be greater or eqaul to 1.0\");\n            }\n        });\n    }\n\n}\n\n/**\n * Configuration object for {@link PrometheusMetricReporter}.\n *\n * @export\n * @interface PrometheusReporterOptions\n */\nexport interface PrometheusReporterOptions extends MetricReporterOptions {\n    /**\n     * indicates if UTC converted timestamps should be appended to each metric data\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly includeTimestamp?: boolean;\n    /**\n     * indicates if comments like HELP and TYPE should be emitted\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly emitComments?: boolean;\n    /**\n     * indicates if the untyped should always be used\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly useUntyped?: boolean;\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n\n    /**\n     * Used to replace unsupported characters from label name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_]\", \"g\");\n    /**\n     * used to replace the first character of a label name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_START_EXCLUSION = [\"_\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n    /**\n     * Used to replace unsupported characters from metric name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_:]\", \"g\");\n    /**\n     * used to replace the first character of a metric name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_START_EXCLUSION = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n\n    /**\n     * Checks if a given string is empty.\n     *\n     * @private\n     * @static\n     * @param {string} value\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isEmpty(value: string): boolean {\n        return !value || value.trim() === \"\";\n    }\n\n    /**\n     * Checks if a given value is a number.\n     *\n     * @private\n     * @static\n     * @param {*} value\n     * @returns {value is number}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isNumber(value: any): value is number {\n        return typeof(value) === \"number\";\n    }\n\n    /**\n     * The prometheus counter type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private counterType: PrometheusMetricType = \"counter\";\n    /**\n     * The prometheus gauge type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private gaugeType: PrometheusMetricType = \"gauge\";\n    /**\n     * The prometheus histogram type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private histogramType: PrometheusMetricType = \"histogram\";\n    /**\n     * The prometheus summary type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private summaryType: PrometheusMetricType = \"summary\";\n\n    /**\n     * Creates an instance of PrometheusMetricReporter.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public constructor({\n        clock = new StdClock(),\n        emitComments = true,\n        includeTimestamp = false,\n        minReportingTimeout = 1,\n        tags = new Map(),\n        useUntyped = false,\n    }: PrometheusReporterOptions) {\n        super({\n            clock,\n            emitComments,\n            includeTimestamp,\n            minReportingTimeout,\n            tags,\n            useUntyped,\n        });\n    }\n\n    /**\n     * Build the metric reporting string for all registered {@link MetricRegistry} instances.\n     *\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public async getMetricsString(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = await this.report();\n            return ctx.result;\n        }\n        return \"\\n\";\n    }\n\n    /**\n     * Builds the text representation of the event specified.\n     *\n     * @param {MetricRegistry} event\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public async getEventString>(event: TEvent): Promise {\n        const overallCtx: OverallReportContext = {\n            result: \"\",\n        };\n\n        const result = this.reportGauge(event, {\n            date: null,\n            metrics: [],\n            overallCtx,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        await this.handleResults(\n            overallCtx,\n            null,\n            event.getTime(),\n            \"gauge\",\n            [{\n                metric: event,\n                result,\n            }],\n        );\n\n        return overallCtx.result;\n    }\n\n    /**\n     * Use {@link #getEventString} instead.\n     *\n     * @param {Event} event\n     * @returns {Promise} always the specified event.\n     * @memberof PrometheusMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @returns {Promise}\n     * @memberof PrometheusMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public start(): this {\n        return this;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public stop(): this {\n        return this;\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n        ctx.result = \"\";\n    }\n\n    protected async handleResults(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        const lines = [];\n        for (const result of results) {\n            const metric = result.metric;\n            const ctx = result.result;\n            const line = this.getMetricString(date, metric, ctx.type, ctx.canBeReported, ctx.fields);\n            lines.push(line);\n        }\n        overallCtx.result += lines.join(\"\\n\");\n    }\n\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): PrometheusMetricResult {\n        if (counter instanceof Counter) {\n            return {\n                canBeReported: true,\n                fields: {\n                    \"\": counter.getCount() || 0,\n                },\n                type: this.gaugeType,\n            };\n        }\n        return {\n            canBeReported: true,\n            fields: {\n                \"\": counter.getCount() || 0,\n            },\n            type: this.counterType,\n        };\n    }\n\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): PrometheusMetricResult {\n        return {\n            canBeReported: true,\n            fields: {\n                \"\": gauge.getValue(),\n            },\n            type: this.gaugeType,\n        };\n    }\n\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(histogram.getCount()),\n            fields: {\n                count: histogram.getCount() || 0,\n                sum: histogram.getSum().toString() || 0,\n            },\n            type: this.histogramType,\n        };\n    }\n\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(meter.getCount()),\n            fields: {\n                \"\": meter.getCount() || 0,\n            },\n            type: this.gaugeType,\n        };\n    }\n\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(timer.getCount()),\n            fields: {\n                count: timer.getCount() || 0,\n                sum: timer.getSum().toString() || 0,\n            },\n            type: this.summaryType,\n        };\n    }\n\n    /**\n     * Gets the mapping of tags with normalized names and filtered for reserved tags.\n     *\n     * @private\n     * @param {Taggable} taggable\n     * @param {string[]} exclude\n     * @returns {Tags}\n     * @memberof PrometheusMetricReporter\n     */\n    protected buildPrometheusTags(taggable: Taggable, exclude: string[]): Tags {\n        exclude.sort();\n\n        const tags: { [x: string]: string } = {};\n        this.options.tags.forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        taggable.getTags().forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        return tags;\n    }\n\n    /**\n     * Builds the metric string based on the specified type of the metric instance.\n     * Returns an empty string if the metric can't be reported - determined with the\n     * specified function.\n     *\n     * @private\n     * @template T\n     * @param {Date} now\n     * @param {T} metric\n     * @param {PrometheusMetricType} metricType\n     * @param {boolean} canReport\n     * @param {PrometheusFields} fields\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricString(\n        now: Date,\n        metric: T,\n        metricType: PrometheusMetricType,\n        canReport: boolean,\n        fields: PrometheusFields,\n        ): string {\n\n        if (!canReport) {\n            return \"\";\n        }\n\n        const metricName = this.getMetricName(metric);\n        const description = this.getDescription(metric, metricName);\n        const timestamp = this.getTimestamp(now);\n        const tags = this.buildPrometheusTags(metric, [\"le\", \"quantile\"]);\n        const tagStr = Object\n            .keys(tags)\n            .map((tag) => `${tag}=\"${tags[tag]}\"`)\n            .join(\",\");\n        let additionalFields = \"\";\n\n        if (metricType === \"histogram\") {\n            additionalFields = this.getBuckets(metric as any, metricName, fields[\"count\"] as number, tagStr, timestamp);\n        } else if (metricType === \"summary\") {\n            additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp);\n        }\n\n        if (this.options.useUntyped) {\n            metricType = \"untyped\";\n        }\n\n        let comments = \"\";\n        if (this.options.emitComments === true) {\n            comments =  `# HELP ${metricName} ${description}\\n` +\n                        `# TYPE ${metricName} ${metricType}\\n`;\n        }\n\n        return comments + additionalFields + Object\n            .keys(fields)\n            .map((field) => {\n                const fieldStr = PrometheusMetricReporter.isEmpty(field) ? \"\" : `_${field}`;\n                const valueStr = this.getValue(fields[field]);\n\n                return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`;\n            })\n            .join(\"\");\n    }\n\n    /**\n     * Builds the description for a metric instance based on the description property.\n     * If no description was specified this function returns ' description'.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getDescription(metric: T, metricName: string): string {\n        let description = metric.getDescription();\n        if (PrometheusMetricReporter.isEmpty(description)) {\n            description = `${metricName} description`;\n        }\n        return description;\n    }\n\n    /**\n     * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n     *\n     * @private\n     * @param {*} value\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getValue(value: any): string {\n        let valueStr = `${value}`;\n\n        if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n            if (value === -Infinity) {\n                valueStr = \"-Inf\";\n            } else if (value === Infinity) {\n                valueStr = \"+Inf\";\n            }\n        }\n\n        return valueStr;\n    }\n\n    /**\n     * Gets the UTC timestamp.\n     *\n     * @private\n     * @param {Date} now\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimestamp(now: Date): string {\n        return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : \"\";\n    }\n\n    /**\n     * Builds the string for bucket data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {number} count\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getBuckets(\n        metric: T,\n        metricName: string,\n        count: number,\n        tagStr: string,\n        timestamp: string): string {\n\n        const buckets: Buckets = metric.getBuckets();\n        if (buckets) {\n            const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n            const bucketStrings: string[] = [];\n\n            metric\n                .getCounts()\n                .forEach((bucketCount: number, boundary: number) => {\n                    bucketStrings.push(\n                        `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`,\n                    );\n                });\n\n            return bucketStrings.join(\"\\n\") +\n                `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds the string for percentile data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getQuantiles(\n        metric: T,\n        metricName: string,\n        tagStr: string,\n        timestamp: string): string {\n\n        let quantiles: Percentiles = metric.getMetadata(Percentiles.METADATA_NAME);\n        if (!quantiles) {\n            quantiles = new Percentiles();\n        }\n        const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n        const snapshot = metric.getSnapshot();\n\n        return quantiles\n            .boundaries\n            .map((boundary) => {\n                const value = snapshot.getValue(boundary);\n                return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`;\n            })\n            .join(\"\\n\") + \"\\n\";\n    }\n\n    /**\n     * Gets the normalized metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricName(metric: Metric): string {\n        let name = metric.getName();\n        if (metric.getGroup()) {\n            name = `${metric.getGroup()}:${metric.getName()}`;\n        }\n\n        name = name.replace(PrometheusMetricReporter.METRIC_NAME_REPLACEMENT_REGEXP, \"_\");\n        if (PrometheusMetricReporter.METRIC_NAME_START_EXCLUSION.indexOf(name.charAt(0)) !== -1) {\n            name = \"_\" + name.slice(1);\n        }\n        return name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusFields.html":{"url":"interfaces/PrometheusFields.html","title":"interface - PrometheusFields","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PrometheusFields\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PrometheusMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for reported fields.\n\n            \n\n\n\n\n            \n    Indexable\n        \n            \n                \n                    \n                        [key: string]:    number | string\n\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/PrometheusMetricReporter.ts:37\n                            \n                        \n            \n        \n\n\n    \n\n\n    \n        import \"source-map-support\";\n\nimport {\n    BucketCounting,\n    Buckets,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MetricReporterOptions,\n    MetricSetReportContext,\n    MetricType,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    Sampling,\n    StdClock,\n    Taggable,\n    Tags,\n    Timer,\n} from \"inspector-metrics\";\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype PrometheusMetricType = \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\";\n\n/**\n * Helper interface for reported fields.\n *\n * @interface PrometheusFields\n */\ninterface PrometheusFields { [key: string]: number | string; }\n\n/**\n * Helper interface for a report result.\n *\n * @interface PrometheusMetricResult\n */\ninterface PrometheusMetricResult {\n    readonly type: PrometheusMetricType;\n    readonly fields: PrometheusFields;\n    readonly canBeReported: boolean;\n}\n\n/**\n * List of values between 0 and 1 representing the percent boundaries for reporting.\n *\n * @export\n * @class Percentiles\n */\nexport class Percentiles {\n\n    /**\n     * Name constant for assigning an instance of this class as metadata to a metric instance.\n     *\n     * @static\n     * @memberof Percentiles\n     */\n    public static readonly METADATA_NAME = \"quantiles\";\n\n    /**\n     * Creates an instance of Percentiles.\n     *\n     * @param {number[]} [boundaries=[0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]]\n     * @memberof Percentiles\n     */\n    constructor(\n        public boundaries: number[] = [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999],\n    ) {\n        boundaries.sort((a: number, b: number) => a - b);\n        boundaries.forEach((boundary) => {\n            if (boundary = 1.0) {\n                throw new Error(\"boundaries cannot be greater or eqaul to 1.0\");\n            }\n        });\n    }\n\n}\n\n/**\n * Configuration object for {@link PrometheusMetricReporter}.\n *\n * @export\n * @interface PrometheusReporterOptions\n */\nexport interface PrometheusReporterOptions extends MetricReporterOptions {\n    /**\n     * indicates if UTC converted timestamps should be appended to each metric data\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly includeTimestamp?: boolean;\n    /**\n     * indicates if comments like HELP and TYPE should be emitted\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly emitComments?: boolean;\n    /**\n     * indicates if the untyped should always be used\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly useUntyped?: boolean;\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n\n    /**\n     * Used to replace unsupported characters from label name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_]\", \"g\");\n    /**\n     * used to replace the first character of a label name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_START_EXCLUSION = [\"_\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n    /**\n     * Used to replace unsupported characters from metric name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_:]\", \"g\");\n    /**\n     * used to replace the first character of a metric name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_START_EXCLUSION = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n\n    /**\n     * Checks if a given string is empty.\n     *\n     * @private\n     * @static\n     * @param {string} value\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isEmpty(value: string): boolean {\n        return !value || value.trim() === \"\";\n    }\n\n    /**\n     * Checks if a given value is a number.\n     *\n     * @private\n     * @static\n     * @param {*} value\n     * @returns {value is number}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isNumber(value: any): value is number {\n        return typeof(value) === \"number\";\n    }\n\n    /**\n     * The prometheus counter type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private counterType: PrometheusMetricType = \"counter\";\n    /**\n     * The prometheus gauge type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private gaugeType: PrometheusMetricType = \"gauge\";\n    /**\n     * The prometheus histogram type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private histogramType: PrometheusMetricType = \"histogram\";\n    /**\n     * The prometheus summary type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private summaryType: PrometheusMetricType = \"summary\";\n\n    /**\n     * Creates an instance of PrometheusMetricReporter.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public constructor({\n        clock = new StdClock(),\n        emitComments = true,\n        includeTimestamp = false,\n        minReportingTimeout = 1,\n        tags = new Map(),\n        useUntyped = false,\n    }: PrometheusReporterOptions) {\n        super({\n            clock,\n            emitComments,\n            includeTimestamp,\n            minReportingTimeout,\n            tags,\n            useUntyped,\n        });\n    }\n\n    /**\n     * Build the metric reporting string for all registered {@link MetricRegistry} instances.\n     *\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public async getMetricsString(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = await this.report();\n            return ctx.result;\n        }\n        return \"\\n\";\n    }\n\n    /**\n     * Builds the text representation of the event specified.\n     *\n     * @param {MetricRegistry} event\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public async getEventString>(event: TEvent): Promise {\n        const overallCtx: OverallReportContext = {\n            result: \"\",\n        };\n\n        const result = this.reportGauge(event, {\n            date: null,\n            metrics: [],\n            overallCtx,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        await this.handleResults(\n            overallCtx,\n            null,\n            event.getTime(),\n            \"gauge\",\n            [{\n                metric: event,\n                result,\n            }],\n        );\n\n        return overallCtx.result;\n    }\n\n    /**\n     * Use {@link #getEventString} instead.\n     *\n     * @param {Event} event\n     * @returns {Promise} always the specified event.\n     * @memberof PrometheusMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @returns {Promise}\n     * @memberof PrometheusMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public start(): this {\n        return this;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public stop(): this {\n        return this;\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n        ctx.result = \"\";\n    }\n\n    protected async handleResults(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        const lines = [];\n        for (const result of results) {\n            const metric = result.metric;\n            const ctx = result.result;\n            const line = this.getMetricString(date, metric, ctx.type, ctx.canBeReported, ctx.fields);\n            lines.push(line);\n        }\n        overallCtx.result += lines.join(\"\\n\");\n    }\n\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): PrometheusMetricResult {\n        if (counter instanceof Counter) {\n            return {\n                canBeReported: true,\n                fields: {\n                    \"\": counter.getCount() || 0,\n                },\n                type: this.gaugeType,\n            };\n        }\n        return {\n            canBeReported: true,\n            fields: {\n                \"\": counter.getCount() || 0,\n            },\n            type: this.counterType,\n        };\n    }\n\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): PrometheusMetricResult {\n        return {\n            canBeReported: true,\n            fields: {\n                \"\": gauge.getValue(),\n            },\n            type: this.gaugeType,\n        };\n    }\n\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(histogram.getCount()),\n            fields: {\n                count: histogram.getCount() || 0,\n                sum: histogram.getSum().toString() || 0,\n            },\n            type: this.histogramType,\n        };\n    }\n\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(meter.getCount()),\n            fields: {\n                \"\": meter.getCount() || 0,\n            },\n            type: this.gaugeType,\n        };\n    }\n\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(timer.getCount()),\n            fields: {\n                count: timer.getCount() || 0,\n                sum: timer.getSum().toString() || 0,\n            },\n            type: this.summaryType,\n        };\n    }\n\n    /**\n     * Gets the mapping of tags with normalized names and filtered for reserved tags.\n     *\n     * @private\n     * @param {Taggable} taggable\n     * @param {string[]} exclude\n     * @returns {Tags}\n     * @memberof PrometheusMetricReporter\n     */\n    protected buildPrometheusTags(taggable: Taggable, exclude: string[]): Tags {\n        exclude.sort();\n\n        const tags: { [x: string]: string } = {};\n        this.options.tags.forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        taggable.getTags().forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        return tags;\n    }\n\n    /**\n     * Builds the metric string based on the specified type of the metric instance.\n     * Returns an empty string if the metric can't be reported - determined with the\n     * specified function.\n     *\n     * @private\n     * @template T\n     * @param {Date} now\n     * @param {T} metric\n     * @param {PrometheusMetricType} metricType\n     * @param {boolean} canReport\n     * @param {PrometheusFields} fields\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricString(\n        now: Date,\n        metric: T,\n        metricType: PrometheusMetricType,\n        canReport: boolean,\n        fields: PrometheusFields,\n        ): string {\n\n        if (!canReport) {\n            return \"\";\n        }\n\n        const metricName = this.getMetricName(metric);\n        const description = this.getDescription(metric, metricName);\n        const timestamp = this.getTimestamp(now);\n        const tags = this.buildPrometheusTags(metric, [\"le\", \"quantile\"]);\n        const tagStr = Object\n            .keys(tags)\n            .map((tag) => `${tag}=\"${tags[tag]}\"`)\n            .join(\",\");\n        let additionalFields = \"\";\n\n        if (metricType === \"histogram\") {\n            additionalFields = this.getBuckets(metric as any, metricName, fields[\"count\"] as number, tagStr, timestamp);\n        } else if (metricType === \"summary\") {\n            additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp);\n        }\n\n        if (this.options.useUntyped) {\n            metricType = \"untyped\";\n        }\n\n        let comments = \"\";\n        if (this.options.emitComments === true) {\n            comments =  `# HELP ${metricName} ${description}\\n` +\n                        `# TYPE ${metricName} ${metricType}\\n`;\n        }\n\n        return comments + additionalFields + Object\n            .keys(fields)\n            .map((field) => {\n                const fieldStr = PrometheusMetricReporter.isEmpty(field) ? \"\" : `_${field}`;\n                const valueStr = this.getValue(fields[field]);\n\n                return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`;\n            })\n            .join(\"\");\n    }\n\n    /**\n     * Builds the description for a metric instance based on the description property.\n     * If no description was specified this function returns ' description'.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getDescription(metric: T, metricName: string): string {\n        let description = metric.getDescription();\n        if (PrometheusMetricReporter.isEmpty(description)) {\n            description = `${metricName} description`;\n        }\n        return description;\n    }\n\n    /**\n     * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n     *\n     * @private\n     * @param {*} value\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getValue(value: any): string {\n        let valueStr = `${value}`;\n\n        if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n            if (value === -Infinity) {\n                valueStr = \"-Inf\";\n            } else if (value === Infinity) {\n                valueStr = \"+Inf\";\n            }\n        }\n\n        return valueStr;\n    }\n\n    /**\n     * Gets the UTC timestamp.\n     *\n     * @private\n     * @param {Date} now\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimestamp(now: Date): string {\n        return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : \"\";\n    }\n\n    /**\n     * Builds the string for bucket data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {number} count\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getBuckets(\n        metric: T,\n        metricName: string,\n        count: number,\n        tagStr: string,\n        timestamp: string): string {\n\n        const buckets: Buckets = metric.getBuckets();\n        if (buckets) {\n            const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n            const bucketStrings: string[] = [];\n\n            metric\n                .getCounts()\n                .forEach((bucketCount: number, boundary: number) => {\n                    bucketStrings.push(\n                        `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`,\n                    );\n                });\n\n            return bucketStrings.join(\"\\n\") +\n                `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds the string for percentile data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getQuantiles(\n        metric: T,\n        metricName: string,\n        tagStr: string,\n        timestamp: string): string {\n\n        let quantiles: Percentiles = metric.getMetadata(Percentiles.METADATA_NAME);\n        if (!quantiles) {\n            quantiles = new Percentiles();\n        }\n        const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n        const snapshot = metric.getSnapshot();\n\n        return quantiles\n            .boundaries\n            .map((boundary) => {\n                const value = snapshot.getValue(boundary);\n                return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`;\n            })\n            .join(\"\\n\") + \"\\n\";\n    }\n\n    /**\n     * Gets the normalized metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricName(metric: Metric): string {\n        let name = metric.getName();\n        if (metric.getGroup()) {\n            name = `${metric.getGroup()}:${metric.getName()}`;\n        }\n\n        name = name.replace(PrometheusMetricReporter.METRIC_NAME_REPLACEMENT_REGEXP, \"_\");\n        if (PrometheusMetricReporter.METRIC_NAME_START_EXCLUSION.indexOf(name.charAt(0)) !== -1) {\n            name = \"_\" + name.slice(1);\n        }\n        return name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusMetricResult.html":{"url":"interfaces/PrometheusMetricResult.html","title":"interface - PrometheusMetricResult","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PrometheusMetricResult\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PrometheusMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Helper interface for a report result.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        canBeReported\n                                \n                                \n                                        fields\n                                \n                                \n                                        type\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        canBeReported\n                                    \n                                \n                                \n                                    \n                                        canBeReported:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fields\n                                    \n                                \n                                \n                                    \n                                        fields:     PrometheusFields\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrometheusFields\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     PrometheusMetricType\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrometheusMetricType\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support\";\n\nimport {\n    BucketCounting,\n    Buckets,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MetricReporterOptions,\n    MetricSetReportContext,\n    MetricType,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    Sampling,\n    StdClock,\n    Taggable,\n    Tags,\n    Timer,\n} from \"inspector-metrics\";\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype PrometheusMetricType = \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\";\n\n/**\n * Helper interface for reported fields.\n *\n * @interface PrometheusFields\n */\ninterface PrometheusFields { [key: string]: number | string; }\n\n/**\n * Helper interface for a report result.\n *\n * @interface PrometheusMetricResult\n */\ninterface PrometheusMetricResult {\n    readonly type: PrometheusMetricType;\n    readonly fields: PrometheusFields;\n    readonly canBeReported: boolean;\n}\n\n/**\n * List of values between 0 and 1 representing the percent boundaries for reporting.\n *\n * @export\n * @class Percentiles\n */\nexport class Percentiles {\n\n    /**\n     * Name constant for assigning an instance of this class as metadata to a metric instance.\n     *\n     * @static\n     * @memberof Percentiles\n     */\n    public static readonly METADATA_NAME = \"quantiles\";\n\n    /**\n     * Creates an instance of Percentiles.\n     *\n     * @param {number[]} [boundaries=[0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]]\n     * @memberof Percentiles\n     */\n    constructor(\n        public boundaries: number[] = [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999],\n    ) {\n        boundaries.sort((a: number, b: number) => a - b);\n        boundaries.forEach((boundary) => {\n            if (boundary = 1.0) {\n                throw new Error(\"boundaries cannot be greater or eqaul to 1.0\");\n            }\n        });\n    }\n\n}\n\n/**\n * Configuration object for {@link PrometheusMetricReporter}.\n *\n * @export\n * @interface PrometheusReporterOptions\n */\nexport interface PrometheusReporterOptions extends MetricReporterOptions {\n    /**\n     * indicates if UTC converted timestamps should be appended to each metric data\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly includeTimestamp?: boolean;\n    /**\n     * indicates if comments like HELP and TYPE should be emitted\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly emitComments?: boolean;\n    /**\n     * indicates if the untyped should always be used\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly useUntyped?: boolean;\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n\n    /**\n     * Used to replace unsupported characters from label name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_]\", \"g\");\n    /**\n     * used to replace the first character of a label name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_START_EXCLUSION = [\"_\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n    /**\n     * Used to replace unsupported characters from metric name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_:]\", \"g\");\n    /**\n     * used to replace the first character of a metric name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_START_EXCLUSION = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n\n    /**\n     * Checks if a given string is empty.\n     *\n     * @private\n     * @static\n     * @param {string} value\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isEmpty(value: string): boolean {\n        return !value || value.trim() === \"\";\n    }\n\n    /**\n     * Checks if a given value is a number.\n     *\n     * @private\n     * @static\n     * @param {*} value\n     * @returns {value is number}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isNumber(value: any): value is number {\n        return typeof(value) === \"number\";\n    }\n\n    /**\n     * The prometheus counter type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private counterType: PrometheusMetricType = \"counter\";\n    /**\n     * The prometheus gauge type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private gaugeType: PrometheusMetricType = \"gauge\";\n    /**\n     * The prometheus histogram type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private histogramType: PrometheusMetricType = \"histogram\";\n    /**\n     * The prometheus summary type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private summaryType: PrometheusMetricType = \"summary\";\n\n    /**\n     * Creates an instance of PrometheusMetricReporter.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public constructor({\n        clock = new StdClock(),\n        emitComments = true,\n        includeTimestamp = false,\n        minReportingTimeout = 1,\n        tags = new Map(),\n        useUntyped = false,\n    }: PrometheusReporterOptions) {\n        super({\n            clock,\n            emitComments,\n            includeTimestamp,\n            minReportingTimeout,\n            tags,\n            useUntyped,\n        });\n    }\n\n    /**\n     * Build the metric reporting string for all registered {@link MetricRegistry} instances.\n     *\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public async getMetricsString(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = await this.report();\n            return ctx.result;\n        }\n        return \"\\n\";\n    }\n\n    /**\n     * Builds the text representation of the event specified.\n     *\n     * @param {MetricRegistry} event\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public async getEventString>(event: TEvent): Promise {\n        const overallCtx: OverallReportContext = {\n            result: \"\",\n        };\n\n        const result = this.reportGauge(event, {\n            date: null,\n            metrics: [],\n            overallCtx,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        await this.handleResults(\n            overallCtx,\n            null,\n            event.getTime(),\n            \"gauge\",\n            [{\n                metric: event,\n                result,\n            }],\n        );\n\n        return overallCtx.result;\n    }\n\n    /**\n     * Use {@link #getEventString} instead.\n     *\n     * @param {Event} event\n     * @returns {Promise} always the specified event.\n     * @memberof PrometheusMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @returns {Promise}\n     * @memberof PrometheusMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public start(): this {\n        return this;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public stop(): this {\n        return this;\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n        ctx.result = \"\";\n    }\n\n    protected async handleResults(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        const lines = [];\n        for (const result of results) {\n            const metric = result.metric;\n            const ctx = result.result;\n            const line = this.getMetricString(date, metric, ctx.type, ctx.canBeReported, ctx.fields);\n            lines.push(line);\n        }\n        overallCtx.result += lines.join(\"\\n\");\n    }\n\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): PrometheusMetricResult {\n        if (counter instanceof Counter) {\n            return {\n                canBeReported: true,\n                fields: {\n                    \"\": counter.getCount() || 0,\n                },\n                type: this.gaugeType,\n            };\n        }\n        return {\n            canBeReported: true,\n            fields: {\n                \"\": counter.getCount() || 0,\n            },\n            type: this.counterType,\n        };\n    }\n\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): PrometheusMetricResult {\n        return {\n            canBeReported: true,\n            fields: {\n                \"\": gauge.getValue(),\n            },\n            type: this.gaugeType,\n        };\n    }\n\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(histogram.getCount()),\n            fields: {\n                count: histogram.getCount() || 0,\n                sum: histogram.getSum().toString() || 0,\n            },\n            type: this.histogramType,\n        };\n    }\n\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(meter.getCount()),\n            fields: {\n                \"\": meter.getCount() || 0,\n            },\n            type: this.gaugeType,\n        };\n    }\n\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(timer.getCount()),\n            fields: {\n                count: timer.getCount() || 0,\n                sum: timer.getSum().toString() || 0,\n            },\n            type: this.summaryType,\n        };\n    }\n\n    /**\n     * Gets the mapping of tags with normalized names and filtered for reserved tags.\n     *\n     * @private\n     * @param {Taggable} taggable\n     * @param {string[]} exclude\n     * @returns {Tags}\n     * @memberof PrometheusMetricReporter\n     */\n    protected buildPrometheusTags(taggable: Taggable, exclude: string[]): Tags {\n        exclude.sort();\n\n        const tags: { [x: string]: string } = {};\n        this.options.tags.forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        taggable.getTags().forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        return tags;\n    }\n\n    /**\n     * Builds the metric string based on the specified type of the metric instance.\n     * Returns an empty string if the metric can't be reported - determined with the\n     * specified function.\n     *\n     * @private\n     * @template T\n     * @param {Date} now\n     * @param {T} metric\n     * @param {PrometheusMetricType} metricType\n     * @param {boolean} canReport\n     * @param {PrometheusFields} fields\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricString(\n        now: Date,\n        metric: T,\n        metricType: PrometheusMetricType,\n        canReport: boolean,\n        fields: PrometheusFields,\n        ): string {\n\n        if (!canReport) {\n            return \"\";\n        }\n\n        const metricName = this.getMetricName(metric);\n        const description = this.getDescription(metric, metricName);\n        const timestamp = this.getTimestamp(now);\n        const tags = this.buildPrometheusTags(metric, [\"le\", \"quantile\"]);\n        const tagStr = Object\n            .keys(tags)\n            .map((tag) => `${tag}=\"${tags[tag]}\"`)\n            .join(\",\");\n        let additionalFields = \"\";\n\n        if (metricType === \"histogram\") {\n            additionalFields = this.getBuckets(metric as any, metricName, fields[\"count\"] as number, tagStr, timestamp);\n        } else if (metricType === \"summary\") {\n            additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp);\n        }\n\n        if (this.options.useUntyped) {\n            metricType = \"untyped\";\n        }\n\n        let comments = \"\";\n        if (this.options.emitComments === true) {\n            comments =  `# HELP ${metricName} ${description}\\n` +\n                        `# TYPE ${metricName} ${metricType}\\n`;\n        }\n\n        return comments + additionalFields + Object\n            .keys(fields)\n            .map((field) => {\n                const fieldStr = PrometheusMetricReporter.isEmpty(field) ? \"\" : `_${field}`;\n                const valueStr = this.getValue(fields[field]);\n\n                return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`;\n            })\n            .join(\"\");\n    }\n\n    /**\n     * Builds the description for a metric instance based on the description property.\n     * If no description was specified this function returns ' description'.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getDescription(metric: T, metricName: string): string {\n        let description = metric.getDescription();\n        if (PrometheusMetricReporter.isEmpty(description)) {\n            description = `${metricName} description`;\n        }\n        return description;\n    }\n\n    /**\n     * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n     *\n     * @private\n     * @param {*} value\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getValue(value: any): string {\n        let valueStr = `${value}`;\n\n        if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n            if (value === -Infinity) {\n                valueStr = \"-Inf\";\n            } else if (value === Infinity) {\n                valueStr = \"+Inf\";\n            }\n        }\n\n        return valueStr;\n    }\n\n    /**\n     * Gets the UTC timestamp.\n     *\n     * @private\n     * @param {Date} now\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimestamp(now: Date): string {\n        return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : \"\";\n    }\n\n    /**\n     * Builds the string for bucket data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {number} count\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getBuckets(\n        metric: T,\n        metricName: string,\n        count: number,\n        tagStr: string,\n        timestamp: string): string {\n\n        const buckets: Buckets = metric.getBuckets();\n        if (buckets) {\n            const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n            const bucketStrings: string[] = [];\n\n            metric\n                .getCounts()\n                .forEach((bucketCount: number, boundary: number) => {\n                    bucketStrings.push(\n                        `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`,\n                    );\n                });\n\n            return bucketStrings.join(\"\\n\") +\n                `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds the string for percentile data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getQuantiles(\n        metric: T,\n        metricName: string,\n        tagStr: string,\n        timestamp: string): string {\n\n        let quantiles: Percentiles = metric.getMetadata(Percentiles.METADATA_NAME);\n        if (!quantiles) {\n            quantiles = new Percentiles();\n        }\n        const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n        const snapshot = metric.getSnapshot();\n\n        return quantiles\n            .boundaries\n            .map((boundary) => {\n                const value = snapshot.getValue(boundary);\n                return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`;\n            })\n            .join(\"\\n\") + \"\\n\";\n    }\n\n    /**\n     * Gets the normalized metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricName(metric: Metric): string {\n        let name = metric.getName();\n        if (metric.getGroup()) {\n            name = `${metric.getGroup()}:${metric.getName()}`;\n        }\n\n        name = name.replace(PrometheusMetricReporter.METRIC_NAME_REPLACEMENT_REGEXP, \"_\");\n        if (PrometheusMetricReporter.METRIC_NAME_START_EXCLUSION.indexOf(name.charAt(0)) !== -1) {\n            name = \"_\" + name.slice(1);\n        }\n        return name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PrometheusReporterOptions.html":{"url":"interfaces/PrometheusReporterOptions.html","title":"interface - PrometheusReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PrometheusReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PrometheusMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object for PrometheusMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                    MetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        emitComments\n                                \n                                \n                                            Optional\n                                        includeTimestamp\n                                \n                                \n                                            Optional\n                                        useUntyped\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        emitComments\n                                    \n                                \n                                \n                                    \n                                        emitComments:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    indicates if comments like HELP and TYPE should be emitted\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        includeTimestamp\n                                    \n                                \n                                \n                                    \n                                        includeTimestamp:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    indicates if UTC converted timestamps should be appended to each metric data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useUntyped\n                                    \n                                \n                                \n                                    \n                                        useUntyped:     boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    indicates if the untyped should always be used\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support\";\n\nimport {\n    BucketCounting,\n    Buckets,\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MetricReporterOptions,\n    MetricSetReportContext,\n    MetricType,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    Sampling,\n    StdClock,\n    Taggable,\n    Tags,\n    Timer,\n} from \"inspector-metrics\";\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype PrometheusMetricType = \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\";\n\n/**\n * Helper interface for reported fields.\n *\n * @interface PrometheusFields\n */\ninterface PrometheusFields { [key: string]: number | string; }\n\n/**\n * Helper interface for a report result.\n *\n * @interface PrometheusMetricResult\n */\ninterface PrometheusMetricResult {\n    readonly type: PrometheusMetricType;\n    readonly fields: PrometheusFields;\n    readonly canBeReported: boolean;\n}\n\n/**\n * List of values between 0 and 1 representing the percent boundaries for reporting.\n *\n * @export\n * @class Percentiles\n */\nexport class Percentiles {\n\n    /**\n     * Name constant for assigning an instance of this class as metadata to a metric instance.\n     *\n     * @static\n     * @memberof Percentiles\n     */\n    public static readonly METADATA_NAME = \"quantiles\";\n\n    /**\n     * Creates an instance of Percentiles.\n     *\n     * @param {number[]} [boundaries=[0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]]\n     * @memberof Percentiles\n     */\n    constructor(\n        public boundaries: number[] = [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999],\n    ) {\n        boundaries.sort((a: number, b: number) => a - b);\n        boundaries.forEach((boundary) => {\n            if (boundary = 1.0) {\n                throw new Error(\"boundaries cannot be greater or eqaul to 1.0\");\n            }\n        });\n    }\n\n}\n\n/**\n * Configuration object for {@link PrometheusMetricReporter}.\n *\n * @export\n * @interface PrometheusReporterOptions\n */\nexport interface PrometheusReporterOptions extends MetricReporterOptions {\n    /**\n     * indicates if UTC converted timestamps should be appended to each metric data\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly includeTimestamp?: boolean;\n    /**\n     * indicates if comments like HELP and TYPE should be emitted\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly emitComments?: boolean;\n    /**\n     * indicates if the untyped should always be used\n     *\n     * @type {boolean}\n     * @memberof PrometheusReporterOptions\n     */\n    readonly useUntyped?: boolean;\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n\n    /**\n     * Used to replace unsupported characters from label name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_]\", \"g\");\n    /**\n     * used to replace the first character of a label name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_START_EXCLUSION = [\"_\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n    /**\n     * Used to replace unsupported characters from metric name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_:]\", \"g\");\n    /**\n     * used to replace the first character of a metric name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_START_EXCLUSION = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n\n    /**\n     * Checks if a given string is empty.\n     *\n     * @private\n     * @static\n     * @param {string} value\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isEmpty(value: string): boolean {\n        return !value || value.trim() === \"\";\n    }\n\n    /**\n     * Checks if a given value is a number.\n     *\n     * @private\n     * @static\n     * @param {*} value\n     * @returns {value is number}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isNumber(value: any): value is number {\n        return typeof(value) === \"number\";\n    }\n\n    /**\n     * The prometheus counter type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private counterType: PrometheusMetricType = \"counter\";\n    /**\n     * The prometheus gauge type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private gaugeType: PrometheusMetricType = \"gauge\";\n    /**\n     * The prometheus histogram type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private histogramType: PrometheusMetricType = \"histogram\";\n    /**\n     * The prometheus summary type string.\n     *\n     * @private\n     * @type {PrometheusMetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private summaryType: PrometheusMetricType = \"summary\";\n\n    /**\n     * Creates an instance of PrometheusMetricReporter.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public constructor({\n        clock = new StdClock(),\n        emitComments = true,\n        includeTimestamp = false,\n        minReportingTimeout = 1,\n        tags = new Map(),\n        useUntyped = false,\n    }: PrometheusReporterOptions) {\n        super({\n            clock,\n            emitComments,\n            includeTimestamp,\n            minReportingTimeout,\n            tags,\n            useUntyped,\n        });\n    }\n\n    /**\n     * Build the metric reporting string for all registered {@link MetricRegistry} instances.\n     *\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public async getMetricsString(): Promise {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            const ctx = await this.report();\n            return ctx.result;\n        }\n        return \"\\n\";\n    }\n\n    /**\n     * Builds the text representation of the event specified.\n     *\n     * @param {MetricRegistry} event\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public async getEventString>(event: TEvent): Promise {\n        const overallCtx: OverallReportContext = {\n            result: \"\",\n        };\n\n        const result = this.reportGauge(event, {\n            date: null,\n            metrics: [],\n            overallCtx,\n            registry: null,\n            type: \"gauge\",\n        });\n\n        await this.handleResults(\n            overallCtx,\n            null,\n            event.getTime(),\n            \"gauge\",\n            [{\n                metric: event,\n                result,\n            }],\n        );\n\n        return overallCtx.result;\n    }\n\n    /**\n     * Use {@link #getEventString} instead.\n     *\n     * @param {Event} event\n     * @returns {Promise} always the specified event.\n     * @memberof PrometheusMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        return event;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @returns {Promise}\n     * @memberof PrometheusMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public start(): this {\n        return this;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public stop(): this {\n        return this;\n    }\n\n    /**\n     * Called be before each reporting run.\n     *\n     * @protected\n     * @memberof MetricReporter\n     */\n    protected async beforeReport(ctx: OverallReportContext) {\n        ctx.result = \"\";\n    }\n\n    protected async handleResults(\n        overallCtx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n        const lines = [];\n        for (const result of results) {\n            const metric = result.metric;\n            const ctx = result.result;\n            const line = this.getMetricString(date, metric, ctx.type, ctx.canBeReported, ctx.fields);\n            lines.push(line);\n        }\n        overallCtx.result += lines.join(\"\\n\");\n    }\n\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext): PrometheusMetricResult {\n        if (counter instanceof Counter) {\n            return {\n                canBeReported: true,\n                fields: {\n                    \"\": counter.getCount() || 0,\n                },\n                type: this.gaugeType,\n            };\n        }\n        return {\n            canBeReported: true,\n            fields: {\n                \"\": counter.getCount() || 0,\n            },\n            type: this.counterType,\n        };\n    }\n\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>): PrometheusMetricResult {\n        return {\n            canBeReported: true,\n            fields: {\n                \"\": gauge.getValue(),\n            },\n            type: this.gaugeType,\n        };\n    }\n\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(histogram.getCount()),\n            fields: {\n                count: histogram.getCount() || 0,\n                sum: histogram.getSum().toString() || 0,\n            },\n            type: this.histogramType,\n        };\n    }\n\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(meter.getCount()),\n            fields: {\n                \"\": meter.getCount() || 0,\n            },\n            type: this.gaugeType,\n        };\n    }\n\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext): PrometheusMetricResult {\n        return {\n            canBeReported: !isNaN(timer.getCount()),\n            fields: {\n                count: timer.getCount() || 0,\n                sum: timer.getSum().toString() || 0,\n            },\n            type: this.summaryType,\n        };\n    }\n\n    /**\n     * Gets the mapping of tags with normalized names and filtered for reserved tags.\n     *\n     * @private\n     * @param {Taggable} taggable\n     * @param {string[]} exclude\n     * @returns {Tags}\n     * @memberof PrometheusMetricReporter\n     */\n    protected buildPrometheusTags(taggable: Taggable, exclude: string[]): Tags {\n        exclude.sort();\n\n        const tags: { [x: string]: string } = {};\n        this.options.tags.forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        taggable.getTags().forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        return tags;\n    }\n\n    /**\n     * Builds the metric string based on the specified type of the metric instance.\n     * Returns an empty string if the metric can't be reported - determined with the\n     * specified function.\n     *\n     * @private\n     * @template T\n     * @param {Date} now\n     * @param {T} metric\n     * @param {PrometheusMetricType} metricType\n     * @param {boolean} canReport\n     * @param {PrometheusFields} fields\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricString(\n        now: Date,\n        metric: T,\n        metricType: PrometheusMetricType,\n        canReport: boolean,\n        fields: PrometheusFields,\n        ): string {\n\n        if (!canReport) {\n            return \"\";\n        }\n\n        const metricName = this.getMetricName(metric);\n        const description = this.getDescription(metric, metricName);\n        const timestamp = this.getTimestamp(now);\n        const tags = this.buildPrometheusTags(metric, [\"le\", \"quantile\"]);\n        const tagStr = Object\n            .keys(tags)\n            .map((tag) => `${tag}=\"${tags[tag]}\"`)\n            .join(\",\");\n        let additionalFields = \"\";\n\n        if (metricType === \"histogram\") {\n            additionalFields = this.getBuckets(metric as any, metricName, fields[\"count\"] as number, tagStr, timestamp);\n        } else if (metricType === \"summary\") {\n            additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp);\n        }\n\n        if (this.options.useUntyped) {\n            metricType = \"untyped\";\n        }\n\n        let comments = \"\";\n        if (this.options.emitComments === true) {\n            comments =  `# HELP ${metricName} ${description}\\n` +\n                        `# TYPE ${metricName} ${metricType}\\n`;\n        }\n\n        return comments + additionalFields + Object\n            .keys(fields)\n            .map((field) => {\n                const fieldStr = PrometheusMetricReporter.isEmpty(field) ? \"\" : `_${field}`;\n                const valueStr = this.getValue(fields[field]);\n\n                return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`;\n            })\n            .join(\"\");\n    }\n\n    /**\n     * Builds the description for a metric instance based on the description property.\n     * If no description was specified this function returns ' description'.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getDescription(metric: T, metricName: string): string {\n        let description = metric.getDescription();\n        if (PrometheusMetricReporter.isEmpty(description)) {\n            description = `${metricName} description`;\n        }\n        return description;\n    }\n\n    /**\n     * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n     *\n     * @private\n     * @param {*} value\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getValue(value: any): string {\n        let valueStr = `${value}`;\n\n        if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n            if (value === -Infinity) {\n                valueStr = \"-Inf\";\n            } else if (value === Infinity) {\n                valueStr = \"+Inf\";\n            }\n        }\n\n        return valueStr;\n    }\n\n    /**\n     * Gets the UTC timestamp.\n     *\n     * @private\n     * @param {Date} now\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimestamp(now: Date): string {\n        return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : \"\";\n    }\n\n    /**\n     * Builds the string for bucket data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {number} count\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getBuckets(\n        metric: T,\n        metricName: string,\n        count: number,\n        tagStr: string,\n        timestamp: string): string {\n\n        const buckets: Buckets = metric.getBuckets();\n        if (buckets) {\n            const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n            const bucketStrings: string[] = [];\n\n            metric\n                .getCounts()\n                .forEach((bucketCount: number, boundary: number) => {\n                    bucketStrings.push(\n                        `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`,\n                    );\n                });\n\n            return bucketStrings.join(\"\\n\") +\n                `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds the string for percentile data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getQuantiles(\n        metric: T,\n        metricName: string,\n        tagStr: string,\n        timestamp: string): string {\n\n        let quantiles: Percentiles = metric.getMetadata(Percentiles.METADATA_NAME);\n        if (!quantiles) {\n            quantiles = new Percentiles();\n        }\n        const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n        const snapshot = metric.getSnapshot();\n\n        return quantiles\n            .boundaries\n            .map((boundary) => {\n                const value = snapshot.getValue(boundary);\n                return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`;\n            })\n            .join(\"\\n\") + \"\\n\";\n    }\n\n    /**\n     * Gets the normalized metric name.\n     *\n     * @private\n     * @param {Metric} metric\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricName(metric: Metric): string {\n        let name = metric.getName();\n        if (metric.getGroup()) {\n            name = `${metric.getGroup()}:${metric.getName()}`;\n        }\n\n        name = name.replace(PrometheusMetricReporter.METRIC_NAME_REPLACEMENT_REGEXP, \"_\");\n        if (PrometheusMetricReporter.METRIC_NAME_START_EXCLUSION.indexOf(name.charAt(0)) !== -1) {\n            name = \"_\" + name.slice(1);\n        }\n        return name;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PushgatewayMetricReporter.html":{"url":"classes/PushgatewayMetricReporter.html","title":"class - PushgatewayMetricReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PushgatewayMetricReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PushgatewayMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Metric reporter for prometheus's pushgateway.\nSimply sends the output of the provided PrometheusMetricReporter\nto the configurated pushgateway using the text format.\n\n            \n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporter\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                flushEvents\n                            \n                            \n                                    Protected\n                                    Async\n                                handleResults\n                            \n                            \n                                    Protected\n                                    Async\n                                report\n                            \n                            \n                                    Protected\n                                reportCounter\n                            \n                            \n                                    Public\n                                    Async\n                                reportEvent\n                            \n                            \n                                    Protected\n                                reportGauge\n                            \n                            \n                                    Protected\n                                reportHistogram\n                            \n                            \n                                    Protected\n                                reportMeter\n                            \n                            \n                                    Protected\n                                reportTimer\n                            \n                            \n                                    Protected\n                                sendPayload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(undefined: PushgatewayReporterOptions)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/PushgatewayMetricReporter.ts:86\n                            \n                        \n\n                \n                    \n                            Creates an instance of PushgatewayMetricReporter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                  \n                                                        \n                                                                    PushgatewayReporterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Async\n                            flushEvents\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        flushEvents()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:145\n                            \n                        \n\n\n                \n                    \n                            Does nothing.\n\n\n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Async\n                            handleResults\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        handleResults(ctx: OverallReportContext, registry: MetricRegistry, date: Date, type: MetricType, results: Array>)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:199\n                            \n                        \n\n\n                \n                    \n                            Not implemented.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ctx\n                                                        \n                                                                    OverallReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        registry\n                                                        \n                                                                    MetricRegistry\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        date\n                                                        \n                                                                    Date\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        type\n                                                        \n                                                                    MetricType\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        results\n                                                        \n                                                                    Array>\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                                Async\n                            report\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        report()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:155\n                            \n                        \n\n\n                \n                    \n                            Calls the PrometheusMetricReporter to generate the metrics in a valid prometheus text format.\nSends the metrics via 'PUT' to the configured pushgateway.\n\n\n                            \n                                Returns :     Promise\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportCounter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportCounter(counter: MonotoneCounter | Counter, ctx: MetricSetReportContext)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:213\n                            \n                        \n\n\n                \n                    \n                            Not implemented.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        counter\n                                                        \n                                                                    MonotoneCounter | Counter\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Async\n                            reportEvent\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportEvent(event: TEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:131\n                            \n                        \n\n                        \n                            \n                                Type parameters :\n                                \n                                        TEventData\n                                        TEvent\n                                \n                            \n                        \n\n                \n                    \n                            Uses PrometheusMetricReporter to build the string and sends the event\nstraight to the pushgateway.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        event\n                                                        \n                                                                    TEvent\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Promise\n\n                            \n                                \n                                    always the specified event.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportGauge\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportGauge(gauge: Gauge, ctx: MetricSetReportContext>)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:224\n                            \n                        \n\n\n                \n                    \n                            Not implemented.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        gauge\n                                                        \n                                                                    Gauge\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext>\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportHistogram\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportHistogram(histogram: Histogram, ctx: MetricSetReportContext)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:233\n                            \n                        \n\n\n                \n                    \n                            Not implemented.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        histogram\n                                                        \n                                                                    Histogram\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportMeter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportMeter(meter: Meter, ctx: MetricSetReportContext)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:242\n                            \n                        \n\n\n                \n                    \n                            Not implemented.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        meter\n                                                        \n                                                                    Meter\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            reportTimer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        reportTimer(timer: Timer, ctx: MetricSetReportContext)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:251\n                            \n                        \n\n\n                \n                    \n                            Not implemented.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        timer\n                                                        \n                                                                    Timer\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                                \n                                                        ctx\n                                                        \n                                                                    MetricSetReportContext\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Protected\n                            sendPayload\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        sendPayload(payload: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:172\n                            \n                        \n\n\n                \n                    \n                            Sends the specified payload to the prometheus pushgateway.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        payload\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support\";\n\nimport * as http from \"http\";\nimport {\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    StdClock,\n    Timer,\n} from \"inspector-metrics\";\nimport { PrometheusMetricReporter } from \"./PrometheusMetricReporter\";\n\n/**\n * Configuration object for {@link PushgatewayMetricReporter}.\n *\n * @export\n * @interface PushgatewayReporterOptions\n */\nexport interface PushgatewayReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The hostname or ip address of the pushgateway\n     *\n     * @type {string}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly host?: string;\n    /**\n     * The port of the pushgateway.\n     *\n     * @type {number}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly port?: number;\n    /**\n     * The id of the job.\n     *\n     * @type {string}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly job?: string;\n    /**\n     * The id of this instance.\n     *\n     * @type {string}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly instance?: string;\n    /**\n     * The reporter use ot generate the metrics string.\n     *\n     * @type {PrometheusMetricReporter}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly reporter?: PrometheusMetricReporter;\n    /**\n     * A simplified logger interface to log response code and message of the pushgateway.\n     *\n     * @type {Logger}\n     * @memberof PushgatewayReporterOptions\n     */\n    log?: Logger;\n}\n\n/**\n * Metric reporter for prometheus's pushgateway.\n * Simply sends the output of the provided {@link PrometheusMetricReporter}\n * to the configurated pushgateway using the text format.\n *\n * @see https://github.com/prometheus/pushgateway\n * @export\n * @class PushgatewayMetricReporter\n * @extends {MetricReporter}\n */\nexport class PushgatewayMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Creates an instance of PushgatewayMetricReporter.\n     *\n     * @memberof PushgatewayMetricReporter\n     */\n    public constructor({\n        clock = new StdClock(),\n        host = \"\",\n        instance = \"\",\n        job = \"\",\n        log = console,\n        minReportingTimeout = 1,\n        port = 9091,\n        reporter,\n        reportInterval = 1000,\n        scheduler = setInterval,\n        tags = new Map(),\n        unit = MILLISECOND,\n    }: PushgatewayReporterOptions) {\n        super({\n            clock,\n            host,\n            instance,\n            job,\n            log,\n            minReportingTimeout,\n            port,\n            reportInterval,\n            reporter,\n            scheduler,\n            tags,\n            unit,\n        });\n    }\n\n    /**\n     * Uses {@link PrometheusMetricReporter#getEventString} to build the string and sends the event\n     * straight to the pushgateway.\n     *\n     * @param {Event} event\n     * @returns {Promise} always the specified event.\n     * @memberof PushgatewayMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const payload = await this.options.reporter.getEventString(event);\n\n        this.sendPayload(payload);\n\n        return event;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @returns {Promise}\n     * @memberof PushgatewayMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Calls the {@link PrometheusMetricReporter} to generate the metrics in a valid prometheus text format.\n     * Sends the metrics via 'PUT' to the configured pushgateway.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected async report(): Promise {\n        const ctx = this.createOverallReportContext();\n        const payload = await this.options.reporter.getMetricsString();\n\n        this.sendPayload(payload);\n\n        ctx.result = payload;\n        return ctx;\n    }\n\n    /**\n     * Sends the specified payload to the prometheus pushgateway.\n     *\n     * @protected\n     * @param {string} payload\n     * @memberof PushgatewayMetricReporter\n     */\n    protected sendPayload(payload: string) {\n        const options = {\n            headers: {\n                \"Content-Length\": payload.length,\n                \"Content-Type\": \"text/plain\",\n            },\n            host: this.options.host,\n            method: \"PUT\",\n            path: `/metrics/job/${this.options.job}/instance/${this.options.instance}`,\n            port: `${this.options.port}`,\n        };\n\n        const req = http.request(options, (res) => {\n            if (this.options.log) {\n                this.options.log.trace(`${res.statusCode} ${res.statusMessage}`);\n            }\n        });\n        req.write(payload);\n        req.end();\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected async handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext) {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>) {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext) {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext) {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext) {\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PushgatewayReporterOptions.html":{"url":"interfaces/PushgatewayReporterOptions.html","title":"interface - PushgatewayReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  PushgatewayReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PushgatewayMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object for PushgatewayMetricReporter.\n\n            \n\n            \n                Extends\n            \n            \n                    ScheduledMetricReporterOptions\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        host\n                                \n                                \n                                            Optional\n                                        instance\n                                \n                                \n                                            Optional\n                                        job\n                                \n                                \n                                            Optional\n                                        log\n                                \n                                \n                                            Optional\n                                        port\n                                \n                                \n                                            Optional\n                                        reporter\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The hostname or ip address of the pushgateway\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        instance\n                                    \n                                \n                                \n                                    \n                                        instance:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The id of this instance.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        job\n                                    \n                                \n                                \n                                    \n                                        job:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The id of the job.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        log\n                                    \n                                \n                                \n                                    \n                                        log:     Logger\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Logger\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    A simplified logger interface to log response code and message of the pushgateway.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The port of the pushgateway.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reporter\n                                    \n                                \n                                \n                                    \n                                        reporter:     PrometheusMetricReporter\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     PrometheusMetricReporter\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The reporter use ot generate the metrics string.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support\";\n\nimport * as http from \"http\";\nimport {\n    Counter,\n    Event,\n    Gauge,\n    Histogram,\n    Logger,\n    Meter,\n    MetricRegistry,\n    MetricSetReportContext,\n    MetricType,\n    MILLISECOND,\n    MonotoneCounter,\n    OverallReportContext,\n    ReportingResult,\n    ScheduledMetricReporter,\n    ScheduledMetricReporterOptions,\n    StdClock,\n    Timer,\n} from \"inspector-metrics\";\nimport { PrometheusMetricReporter } from \"./PrometheusMetricReporter\";\n\n/**\n * Configuration object for {@link PushgatewayMetricReporter}.\n *\n * @export\n * @interface PushgatewayReporterOptions\n */\nexport interface PushgatewayReporterOptions extends ScheduledMetricReporterOptions {\n    /**\n     * The hostname or ip address of the pushgateway\n     *\n     * @type {string}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly host?: string;\n    /**\n     * The port of the pushgateway.\n     *\n     * @type {number}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly port?: number;\n    /**\n     * The id of the job.\n     *\n     * @type {string}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly job?: string;\n    /**\n     * The id of this instance.\n     *\n     * @type {string}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly instance?: string;\n    /**\n     * The reporter use ot generate the metrics string.\n     *\n     * @type {PrometheusMetricReporter}\n     * @memberof PushgatewayReporterOptions\n     */\n    readonly reporter?: PrometheusMetricReporter;\n    /**\n     * A simplified logger interface to log response code and message of the pushgateway.\n     *\n     * @type {Logger}\n     * @memberof PushgatewayReporterOptions\n     */\n    log?: Logger;\n}\n\n/**\n * Metric reporter for prometheus's pushgateway.\n * Simply sends the output of the provided {@link PrometheusMetricReporter}\n * to the configurated pushgateway using the text format.\n *\n * @see https://github.com/prometheus/pushgateway\n * @export\n * @class PushgatewayMetricReporter\n * @extends {MetricReporter}\n */\nexport class PushgatewayMetricReporter extends ScheduledMetricReporter {\n\n    /**\n     * Creates an instance of PushgatewayMetricReporter.\n     *\n     * @memberof PushgatewayMetricReporter\n     */\n    public constructor({\n        clock = new StdClock(),\n        host = \"\",\n        instance = \"\",\n        job = \"\",\n        log = console,\n        minReportingTimeout = 1,\n        port = 9091,\n        reporter,\n        reportInterval = 1000,\n        scheduler = setInterval,\n        tags = new Map(),\n        unit = MILLISECOND,\n    }: PushgatewayReporterOptions) {\n        super({\n            clock,\n            host,\n            instance,\n            job,\n            log,\n            minReportingTimeout,\n            port,\n            reportInterval,\n            reporter,\n            scheduler,\n            tags,\n            unit,\n        });\n    }\n\n    /**\n     * Uses {@link PrometheusMetricReporter#getEventString} to build the string and sends the event\n     * straight to the pushgateway.\n     *\n     * @param {Event} event\n     * @returns {Promise} always the specified event.\n     * @memberof PushgatewayMetricReporter\n     */\n    public async reportEvent>(event: TEvent): Promise {\n        const payload = await this.options.reporter.getEventString(event);\n\n        this.sendPayload(payload);\n\n        return event;\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @returns {Promise}\n     * @memberof PushgatewayMetricReporter\n     */\n    public async flushEvents(): Promise {\n    }\n\n    /**\n     * Calls the {@link PrometheusMetricReporter} to generate the metrics in a valid prometheus text format.\n     * Sends the metrics via 'PUT' to the configured pushgateway.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected async report(): Promise {\n        const ctx = this.createOverallReportContext();\n        const payload = await this.options.reporter.getMetricsString();\n\n        this.sendPayload(payload);\n\n        ctx.result = payload;\n        return ctx;\n    }\n\n    /**\n     * Sends the specified payload to the prometheus pushgateway.\n     *\n     * @protected\n     * @param {string} payload\n     * @memberof PushgatewayMetricReporter\n     */\n    protected sendPayload(payload: string) {\n        const options = {\n            headers: {\n                \"Content-Length\": payload.length,\n                \"Content-Type\": \"text/plain\",\n            },\n            host: this.options.host,\n            method: \"PUT\",\n            path: `/metrics/job/${this.options.job}/instance/${this.options.instance}`,\n            port: `${this.options.port}`,\n        };\n\n        const req = http.request(options, (res) => {\n            if (this.options.log) {\n                this.options.log.trace(`${res.statusCode} ${res.statusMessage}`);\n            }\n        });\n        req.write(payload);\n        req.end();\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected async handleResults(\n        ctx: OverallReportContext,\n        registry: MetricRegistry,\n        date: Date,\n        type: MetricType,\n        results: Array>): Promise {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportCounter(\n        counter: MonotoneCounter | Counter,\n        ctx: MetricSetReportContext) {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportGauge(gauge: Gauge, ctx: MetricSetReportContext>) {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportHistogram(histogram: Histogram, ctx: MetricSetReportContext) {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportMeter(meter: Meter, ctx: MetricSetReportContext) {\n    }\n\n    /**\n     * Not implemented.\n     *\n     * @protected\n     * @memberof PushgatewayMetricReporter\n     */\n    protected reportTimer(timer: Timer, ctx: MetricSetReportContext) {\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file.\nThe format is based on Keep a Changelog,\nand this project adheres to Semantic Versioning.\n[Unreleased]\n[2.1.0] - 2018-11-26\nAdded\n\nsupport for reporting events\n\nChanged\n\nadded nodejs 11 to playground\nupdated dependencies\n\n[2.0.0] - 2018-11-04\nAdded\n\nCHANGELOG\ncompile and test script for different node versions\n\nChanged\n\nadded nodejs 11 to travis.yml\nupdated dependencies\nuse inspector-metrics@1.13.0\nadapted new MetricLogger implementation\n\n[1.0.0] - 2018-10-04\nInitial release.\nAdded\n\nproject setup\nREADME\ntypescript config\nlint config\n\n\nlicensed under MIT license\nbasic prometheus / pushgateway reporter\nmocha testing (with chai, sinon)\nNYC code-coverage config\nadded editorconfig file\ntravis.yml for nodejs 6, 7, 8, 9, 10\nbasic playground setup\nuse inspector-metrics@1.11.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                class\n            \n            \n                Percentiles\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                class\n            \n            \n                PrometheusMetricReporter\n            \n            \n                81 %\n                (27/33)\n            \n        \n        \n            \n                \n                lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                interface\n            \n            \n                PrometheusFields\n            \n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                interface\n            \n            \n                PrometheusMetricResult\n            \n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                interface\n            \n            \n                PrometheusReporterOptions\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                lib/metrics/PushgatewayMetricReporter.ts\n            \n            \n                class\n            \n            \n                PushgatewayMetricReporter\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                lib/metrics/PushgatewayMetricReporter.ts\n            \n            \n                interface\n            \n            \n                PushgatewayReporterOptions\n            \n            \n                100 %\n                (7/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            inspector-metrics : 1.15.0\n        \n            source-map-support : 0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-prometheus\nTypescript metric reporter for prometheus.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics\nnode module and is meant to be used with nodejs.  \nAll metrics from the inspector-metrics library\ncan be pushed to a pushgateway or be exposed with\na custom /metrics endpoint in your application.\ninstall\nnpm install --save inspector-prometheus\nbasic usage\nexample.ts\nimport {\n    MetricRegistry,\n} from \"inspector-metrics\";\n\nimport {\n    PrometheusMetricReporter,\n} from \"inspector-prometheus\";\n\n// contains all metrics\nconst registry = new MetricRegistry();\n// exposes the metrics\nconst reporter = new PrometheusMetricReporter({});\n\n// register the registry within the reporter\nreporter.addMetricRegistry(registry);\n\n// common tags for all metrics\nconst tags = new Map();\ntags.set(\"app_version\", \"1.0.0\");\nreporter.setTags(tags);\n\n// a simple request timer used to report response latencies\nconst requests: Timer = registry.newTimer(\"requests\");\n// custom metric tag\nrequests.setTag(\"host\", \"127.0.0.3\");\n\n// some server implementation - could be anything KOA, Express, HAPI ...\nconst server = new Hapi.Server({ host: \"0.0.0.0\", port: 8080 });\n\n// '/metrics' is the standard route used by prometheus ...\nserver.route({\n    method: \"GET\",\n    path: \"/metrics\",\n    handler(request, h) {\n        console.log(\"reporting metrics\");\n        return h.response(reporter.getMetricsString())\n            .code(200)\n            .type(\"text/plain\");\n    },\n});\n\n// starts the server\nserver.start();/etc/prometheus/config.yml\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 30s\n\nscrape_configs:\n- job_name: test-app\n  metrics_path: /metrics\n  static_configs:\n    - targets:\n      - localhost:8080example metrics report\n# HELP requests request durations for some endpoint\n# TYPE requests summary\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.01\"} 0\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.05\"} 0\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.5\"} 999936\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.75\"} 999936\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.9\"} 1000192\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.95\"} 1000192\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.98\"} 1999872\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.99\"} 2000128\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.999\"} 4000000\nrequests_count{app_version=\"1.0.0\",host=\"127.0.0.3\"} 362\nrequests_sum{app_version=\"1.0.0\",host=\"127.0.0.3\"} 283998208reporting options for PrometheusMetricReporter\nimport {\n    PrometheusMetricReporter,\n} from \"inspector-prometheus\";\n\nconst reporter = new PrometheusMetricReporter({\n    includeTimestamp: true,\n    emitComments: true,\n    useUntyped: false,\n});report metrics with pushgateway\nimport ...; // like in the example above\n\nimport {\n    PrometheusMetricReporter,\n    PushgatewayMetricReporter,\n} from \"inspector-prometheus\";\n\n// contains all metrics\nconst registry = new MetricRegistry();\n// exposes the metrics\nconst reporter = new PrometheusMetricReporter({});\n\n// register the registry within the reporter\nreporter.addMetricRegistry(registry);\n\nconst pushReporter = new PushgatewayMetricReporter({\n    reporter,\n\n    host: \"localhost\",\n    port: 9091,\n    job: \"pushgateway\",\n    instance: \"127.0.0.4\",\n});\n\n// start reporting\npushReporter.start();local dev\nsetup playground\nHave a look at playground/playground.ts to see what is reported to the prometheus server.To let it run in a fully provisioned environment do the following:  \n\nexecute npm i\nexecute test-env/boot.sh - builds the docker images and starts the services\nstart the playground app by executing ./playground.sh\nnavigate to localhost:3000 in the browser\nclick on dashboard Playground Dashboard and see the reporter work\n\ncompile & test with different nodejs versions\nbuild docker images:  \ndocker-compose buildrun tests:  \ndocker-compose run node6\ndocker-compose run node7\ndocker-compose run node8\ndocker-compose run node9\ndocker-compose run node10License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PrometheusMetricType   (lib/.../PrometheusMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/PrometheusMetricReporter.ts\n    \n        \n            \n                \n                    \n                        \n                        PrometheusMetricType\n                    \n                \n                    \n                        \n                            Enumeration used to determine valid metric types of prometheus.\n\n                        \n                    \n                \n                    \n                        PrometheusMetricType:     \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\"\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /mnt/c/git/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                92 %\n                (109/118)\n            \n            \n                90 %\n                (69/77)\n            \n            \n                88 %\n                (29/33)\n            \n            \n                92 %\n                (108/117)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n            \n            \n                100 %\n                (19/19)\n            \n            \n                54 %\n                (7/13)\n            \n            \n                42 %\n                (5/12)\n            \n            \n                100 %\n                (19/19)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
