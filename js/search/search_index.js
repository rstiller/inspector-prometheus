var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.2","fields":["title","body"],"fieldVectors":[["title/interfaces/MetricEntry.html",[0,0.54,1,1.012]],["body/interfaces/MetricEntry.html",[0,0.663,1,1.4,2,0.48,3,0.639,4,0.257,5,0.48,6,1.548,7,1.155,8,1.457,9,1.551,10,2.471,11,2.235,12,1.041,13,1.3,14,1.155,15,1.641,16,1.155,17,1.842,18,1.155,19,1.842,20,1.241,21,1.155,22,0.982,23,1.155,24,1.676,25,1.193,26,1.155,27,1.457,28,2.297,29,1.155,30,1.155,31,0.321,32,0.982,33,1.842,34,2.163,35,1.864,36,0.986,37,0.08,38,1.842,39,0.639,40,1.113,41,0.639,42,0.713,43,1.842,44,2.163,45,2.093,46,1.994,47,2.023,48,2.297,49,1.372,50,0.982,51,0.779,52,1.972,53,0.713,54,1.457,55,0.713,56,1.271,57,0.321,58,1.903,59,0.583,60,0.901,61,1.615,62,0.394,63,0.935,64,2.072,65,1.129,66,1.193,67,0.713,68,0.713,69,1.961,70,1.771,71,0.713,72,0.713,73,1.842,74,1.329,75,0.295,76,1.458,77,1.241,78,0.713,79,0.713,80,0.713,81,2.471,82,1.583,83,1.241,84,0.713,85,1.972,86,0.982,87,1.927,88,0.713,89,1.155,90,1.155,91,1.155,92,1.155,93,1.155,94,1.155,95,1.155,96,1.155,97,0.982,98,0.713,99,0.713,100,1.155,101,0.713,102,1.155,103,0.713,104,1.237,105,0.713,106,0.713,107,0.713,108,0.982,109,0.982,110,1.269,111,1.271,112,2.395,113,0.713,114,1.457,115,1.155,116,0.48,117,0.713,118,1.155,119,0.982,120,0.713,121,1.676,122,0.946,123,0.713,124,0.713,125,1.155,126,0.583,127,0.946,128,0.583,129,1.7,130,0.583,131,0.48,132,1.129,133,0.713,134,0.779,135,0.713,136,0.394,137,0.779,138,0.713,139,0.713,140,1.457,141,0.779,142,1.676,143,1.155,144,1.676,145,1.155,146,1.949,147,0.713,148,1.155,149,1.155,150,1.155,151,1.155,152,1.842,153,1.155,154,1.676,155,0.713,156,1.457,157,1.155,158,1.155,159,1.155,160,0.946,161,1.155,162,1.155,163,0.946,164,1.155,165,0.713,166,0.713,167,1.457,168,0.779,169,1.966,170,1.155,171,1.573,172,0.713,173,0.713,174,0.713,175,0.713,176,0.713,177,0.928,178,0.713,179,1.155,180,0.713,181,0.713,182,0.946,183,1.155,184,0.583,185,1.88,186,0.713,187,0.713,188,0.713,189,0.713,190,0.713,191,0.713,192,0.713,193,0.713,194,0.713,195,0.713,196,0.713,197,0.48,198,0.48,199,1.457,200,0.713,201,1.155,202,0.713,203,0.713,204,0.713,205,0.713,206,0.982,207,2.435,208,0.583,209,0.713,210,0.713,211,1.155,212,0.713,213,0.713,214,0.713,215,1.457,216,1.457,217,1.155,218,0.257,219,0.48,220,0.713,221,0.713,222,0.713,223,1.477,224,2.654,225,2.72,226,0.713,227,0.713,228,1.615,229,0.713,230,1.155,231,0.713,232,0.713,233,0.713,234,0.713,235,0.713,236,0.713,237,1.193,238,0.713,239,0.713,240,0.713,241,1.457,242,0.713,243,0.713,244,0.713,245,1.808,246,0.713,247,0.713,248,0.713,249,0.713,250,0.713,251,0.713,252,0.713,253,0.713,254,1.155,255,0.713,256,0.713,257,1.842,258,1.155,259,0.928,260,0.48,261,0.713,262,0.713,263,1.155,264,0.713,265,0.713,266,1.155,267,0.713,268,0.713,269,0.713,270,0.713,271,0.982,272,0.713,273,1.155,274,1.457,275,1.155,276,0.713,277,0.713,278,2.435,279,0.713,280,0.713,281,0.713,282,0.713,283,0.713,284,0.713,285,2.077,286,0.713,287,0.713,288,0.713,289,1.676,290,0.713,291,0.713,292,0.713,293,0.713,294,0.713,295,0.713,296,0.713,297,0.713,298,0.713,299,0.713,300,0.713,301,0.713,302,1.842,303,0.713,304,0.713,305,0.713,306,0.713,307,0.713,308,0.713,309,0.713,310,0.713,311,0.713,312,1.676,313,0.713,314,0.713,315,0.713,316,1.155,317,0.713,318,0.713,319,0.713,320,0.946,321,1.676,322,0.713,323,0.713,324,1.155,325,1.155,326,0.713,327,0.713,328,0.713,329,0.713,330,0.713,331,0.713,332,0.713,333,0.713,334,0.713,335,0.713,336,0.713,337,0.713,338,0.713,339,0.713,340,0.713,341,0.713,342,0.713,343,0.713,344,1.972,345,0.713,346,1.972,347,0.713,348,1.155,349,0.713,350,1.457,351,0.713,352,0.713,353,0.713,354,0.713,355,0.713,356,0.713,357,1.155,358,0.713,359,0.713,360,0.713,361,0.713,362,0.713,363,0.713,364,0.713,365,0.713,366,0.713,367,0.713,368,0.713,369,0.713,370,0.713,371,0.713,372,0.713,373,0.713,374,0.713,375,0.713,376,1.155,377,1.155,378,1.155,379,1.155,380,1.155,381,0.713,382,0.03,383,0.03]],["title/classes/Percentiles.html",[75,0.213,76,1.012]],["body/classes/Percentiles.html",[0,0.522,1,1.325,2,0.477,3,0.636,4,0.255,5,0.477,6,1.545,7,0.708,8,1.149,9,1.53,10,2.391,11,2.215,12,1.04,13,1.346,14,0.708,15,1.611,16,0.708,17,1.67,18,0.708,19,1.451,20,1.125,21,0.708,22,0.775,23,0.708,24,1.451,25,0.941,26,0.708,27,1.149,28,2.158,29,0.708,30,0.708,31,0.319,32,0.978,33,1.149,34,1.836,35,1.863,36,0.989,37,0.08,38,1.451,39,0.636,40,1.111,41,0.636,42,0.708,43,1.836,44,2.158,45,2.09,46,1.991,47,2.02,48,2.292,49,1.367,50,0.978,51,0.775,52,1.966,53,0.708,54,1.451,55,0.708,56,1.269,57,0.319,58,1.902,59,0.58,60,0.9,61,1.61,62,0.392,63,0.933,64,2.069,65,1.125,66,1.188,67,1.149,68,1.149,69,1.991,70,1.826,71,1.149,72,1.149,73,2.292,74,1.325,75,0.316,76,1.545,77,1.396,78,1.149,79,1.149,80,1.149,81,2.528,82,1.639,83,1.396,84,1.67,85,2.071,86,1.125,87,1.926,88,0.708,89,1.451,90,1.451,91,1.451,92,1.451,93,1.451,94,1.451,95,1.451,96,1.451,97,1.125,98,1.149,99,0.708,100,1.149,101,0.708,102,1.149,103,0.708,104,1.234,105,0.708,106,0.708,107,0.708,108,0.978,109,0.978,110,1.268,111,1.269,112,2.391,113,0.708,114,1.451,115,1.149,116,0.477,117,0.708,118,1.149,119,0.978,120,0.708,121,1.67,122,0.941,123,0.708,124,0.708,125,1.149,126,0.58,127,0.941,128,0.58,129,1.696,130,0.58,131,0.477,132,1.125,133,0.708,134,0.775,135,0.708,136,0.392,137,0.775,138,0.708,139,0.708,140,1.451,141,0.775,142,1.67,143,1.149,144,1.67,145,1.149,146,1.948,147,0.708,148,1.149,149,1.149,150,1.149,151,1.149,152,1.836,153,1.149,154,1.67,155,0.708,156,1.451,157,1.149,158,1.149,159,1.149,160,0.941,161,1.149,162,1.149,163,0.941,164,1.149,165,0.708,166,0.708,167,1.451,168,0.775,169,1.968,170,1.149,171,1.572,172,0.708,173,0.708,174,0.708,175,0.708,176,0.708,177,1.016,178,0.708,179,1.149,180,0.708,181,0.708,182,0.941,183,1.149,184,0.58,185,1.877,186,0.708,187,0.708,188,0.708,189,0.708,190,0.708,191,0.708,192,0.708,193,0.708,194,0.708,195,0.708,196,0.708,197,0.477,198,0.477,199,1.451,200,0.708,201,1.149,202,0.708,203,0.708,204,0.708,205,0.708,206,0.978,207,2.431,208,0.58,209,0.708,210,0.708,211,1.149,212,0.708,213,0.708,214,0.708,215,1.451,216,1.451,217,1.149,218,0.255,219,0.477,220,0.708,221,0.708,222,0.708,223,1.476,224,2.651,225,2.717,226,0.708,227,0.708,228,1.61,229,0.708,230,1.149,231,0.708,232,0.708,233,0.708,234,0.708,235,0.708,236,0.708,237,1.188,238,0.708,239,0.708,240,0.708,241,1.451,242,0.708,243,0.708,244,0.708,245,1.807,246,0.708,247,0.708,248,0.708,249,0.708,250,0.708,251,0.708,252,0.708,253,0.708,254,1.149,255,0.708,256,0.708,257,1.836,258,1.149,259,0.924,260,0.477,261,0.708,262,0.708,263,1.149,264,0.708,265,0.708,266,1.149,267,0.708,268,0.708,269,0.708,270,0.708,271,0.978,272,0.708,273,1.149,274,1.451,275,1.149,276,0.708,277,0.708,278,2.431,279,0.708,280,0.708,281,0.708,282,0.708,283,0.708,284,0.708,285,2.071,286,0.708,287,0.708,288,0.708,289,1.67,290,0.708,291,0.708,292,0.708,293,0.708,294,0.708,295,0.708,296,0.708,297,0.708,298,0.708,299,0.708,300,0.708,301,0.708,302,1.836,303,0.708,304,0.708,305,0.708,306,0.708,307,0.708,308,0.708,309,0.708,310,0.708,311,0.708,312,1.67,313,0.708,314,0.708,315,0.708,316,1.149,317,0.708,318,0.708,319,0.708,320,0.941,321,1.67,322,0.708,323,0.708,324,1.149,325,1.149,326,0.708,327,0.708,328,0.708,329,0.708,330,0.708,331,0.708,332,0.708,333,0.708,334,0.708,335,0.708,336,0.708,337,0.708,338,0.708,339,0.708,340,0.708,341,0.708,342,0.708,343,0.708,344,1.966,345,0.708,346,1.966,347,0.708,348,1.149,349,0.708,350,1.451,351,0.708,352,0.708,353,0.708,354,0.708,355,0.708,356,0.708,357,1.149,358,0.708,359,0.708,360,0.708,361,0.708,362,0.708,363,0.708,364,0.708,365,0.708,366,0.708,367,0.708,368,0.708,369,0.708,370,0.708,371,0.708,372,0.708,373,0.708,374,0.708,375,0.708,376,1.149,377,1.149,378,1.149,379,1.149,380,1.149,381,0.708,382,0.03,383,0.03,384,0.477,385,1.141,386,1.188,387,1.852,388,0.58,389,0.941,390,1.141]],["title/classes/PrometheusReporterOptions.html",[75,0.213,111,0.831]],["body/classes/PrometheusReporterOptions.html",[0,0.518,1,1.319,2,0.472,3,0.631,4,0.252,5,0.472,6,1.575,7,0.701,8,1.14,9,1.523,10,2.461,11,2.212,12,1.041,13,1.294,14,0.701,15,1.607,16,0.701,17,1.659,18,0.701,19,1.44,20,1.118,21,0.701,22,0.768,23,0.701,24,1.44,25,0.933,26,0.701,27,1.14,28,2.149,29,0.701,30,0.701,31,0.315,32,0.971,33,1.14,34,1.826,35,1.836,36,0.997,37,0.08,38,1.44,39,0.631,40,1.108,41,0.631,42,0.701,43,1.826,44,2.149,45,2.086,46,1.985,47,2.015,48,2.284,49,1.358,50,0.971,51,0.768,52,1.957,53,0.701,54,1.44,55,0.701,56,1.264,57,0.315,58,1.9,59,0.574,60,0.917,61,1.602,62,0.388,63,0.928,64,2.064,65,1.118,66,1.495,67,0.701,68,0.701,69,1.952,70,1.76,71,0.701,72,0.701,73,1.826,74,1.319,75,0.305,76,1.448,77,1.319,78,0.701,79,0.701,80,0.701,81,2.461,82,1.717,83,1.23,84,0.701,85,1.957,86,1.118,87,1.924,88,0.701,89,1.14,90,1.14,91,1.14,92,1.14,93,1.14,94,1.14,95,1.14,96,1.14,97,1.118,98,0.701,99,0.701,100,1.14,101,0.701,102,1.14,103,0.701,104,1.23,105,0.701,106,0.701,107,0.701,108,1.118,109,1.118,110,1.269,111,1.319,112,2.676,113,0.701,114,2.222,115,1.659,116,0.971,117,1.44,118,1.659,119,1.23,120,0.701,121,1.957,122,1.358,123,1.44,124,0.701,125,1.659,126,1.495,127,1.358,128,1.602,129,1.76,130,1.602,131,0.472,132,1.118,133,0.701,134,0.768,135,0.701,136,0.388,137,0.768,138,0.701,139,0.701,140,1.44,141,0.768,142,1.659,143,1.14,144,1.659,145,1.14,146,1.947,147,0.701,148,1.14,149,1.14,150,1.14,151,1.14,152,1.826,153,1.14,154,1.659,155,0.701,156,1.44,157,1.14,158,1.14,159,1.14,160,0.933,161,1.14,162,1.14,163,0.933,164,1.14,165,0.701,166,0.701,167,1.44,168,0.768,169,1.964,170,1.14,171,1.571,172,0.701,173,0.701,174,0.701,175,0.701,176,0.701,177,1.01,178,0.701,179,1.14,180,0.701,181,0.701,182,0.933,183,1.14,184,0.574,185,1.87,186,0.701,187,0.701,188,0.701,189,0.701,190,0.701,191,0.701,192,0.701,193,0.701,194,0.701,195,0.701,196,0.701,197,0.472,198,0.472,199,1.44,200,0.701,201,1.14,202,0.701,203,0.701,204,0.701,205,0.701,206,0.971,207,2.425,208,0.574,209,0.701,210,0.701,211,1.14,212,0.701,213,0.701,214,0.701,215,1.44,216,1.44,217,1.14,218,0.252,219,0.472,220,0.701,221,0.701,222,0.701,223,1.473,224,2.647,225,2.713,226,0.701,227,0.701,228,1.602,229,0.701,230,1.14,231,0.701,232,0.701,233,0.701,234,0.701,235,0.701,236,0.701,237,1.179,238,0.701,239,0.701,240,0.701,241,1.44,242,0.701,243,0.701,244,0.701,245,1.804,246,0.701,247,0.701,248,0.701,249,0.701,250,0.701,251,0.701,252,0.701,253,0.701,254,1.14,255,0.701,256,0.701,257,1.826,258,1.14,259,0.918,260,0.472,261,0.701,262,0.701,263,1.14,264,0.701,265,0.701,266,1.14,267,0.701,268,0.701,269,0.701,270,0.701,271,0.971,272,0.701,273,1.14,274,1.44,275,1.14,276,0.701,277,0.701,278,2.425,279,0.701,280,0.701,281,0.701,282,0.701,283,0.701,284,0.701,285,2.062,286,0.701,287,0.701,288,0.701,289,1.659,290,0.701,291,0.701,292,0.701,293,0.701,294,0.701,295,0.701,296,0.701,297,0.701,298,0.701,299,0.701,300,0.701,301,0.701,302,1.826,303,0.701,304,0.701,305,0.701,306,0.701,307,0.701,308,0.701,309,0.701,310,0.701,311,0.701,312,1.659,313,0.701,314,0.701,315,0.701,316,1.14,317,0.701,318,0.701,319,0.701,320,0.933,321,1.659,322,0.701,323,0.701,324,1.14,325,1.14,326,0.701,327,0.701,328,0.701,329,0.701,330,0.701,331,0.701,332,0.701,333,0.701,334,0.701,335,0.701,336,0.701,337,0.701,338,0.701,339,0.701,340,0.701,341,0.701,342,0.701,343,0.701,344,1.957,345,0.701,346,1.957,347,0.701,348,1.14,349,0.701,350,1.44,351,0.701,352,0.701,353,0.701,354,0.701,355,0.701,356,0.701,357,1.14,358,0.701,359,0.701,360,0.701,361,0.701,362,0.701,363,0.701,364,0.701,365,0.701,366,0.701,367,0.701,368,0.701,369,0.701,370,0.701,371,0.701,372,0.701,373,0.701,374,0.701,375,0.701,376,1.14,377,1.14,378,1.14,379,1.14,380,1.14,381,0.701,382,0.03,383,0.03,384,0.472,386,1.358,388,0.574,389,1.179,391,1.129,392,1.129,393,1.129,394,1.129,395,1.129]],["title/classes/PushgatewayMetricReporter.html",[75,0.213,396,1.012]],["body/classes/PushgatewayMetricReporter.html",[0,0.659,2,0.882,3,1.013,4,0.471,6,0.882,9,1.606,12,0.956,13,1.381,15,1.623,22,1.234,31,0.589,32,1.234,35,1.834,36,1.013,37,0.079,39,1.266,40,0.589,41,0.724,50,1.542,51,1.424,56,1.381,57,0.589,58,1.85,60,0.941,62,1.013,63,0.824,74,1.542,75,0.342,77,0.882,82,1.85,83,1.542,86,1.623,87,1.814,97,1.424,108,1.727,109,1.623,110,1.236,116,1.234,119,1.234,131,1.542,132,1.542,134,1.542,136,1.169,137,0.882,141,1.424,146,1.973,168,1.234,169,1.834,171,1.333,177,1.506,197,0.882,198,0.882,206,1.542,218,0.824,219,1.682,223,1.266,245,1.234,259,1.49,260,1.542,271,1.234,382,0.048,383,0.048,384,0.882,386,2.227,388,1.071,396,1.921,397,1.308,398,2.275,399,2.745,400,2.275,401,3.102,402,2.275,403,1.831,404,3.554,405,3.542,406,3.612,407,2.204,408,2.108,409,1.85,410,3.302,411,2.95,412,2.108,413,2.108,414,2.275,415,2.275,416,1.831,417,2.844,418,2.275,419,2.108,420,2.108,421,2.275,422,2.275,423,2.844,424,2.108,425,2.275,426,1.831,427,2.625,428,2.108,429,2.275,430,2.108,431,2.275,432,2.625,433,2.108,434,2.108,435,2.275,436,2.275,437,2.112,438,1.626,439,1.626,440,1.626,441,1.626,442,2.112,443,2.112,444,1.831,445,1.308,446,1.626,447,1.626,448,1.626,449,1.626,450,1.626,451,1.626,452,1.308,453,1.626,454,1.626,455,1.626,456,2.275,457,2.275,458,2.275,459,1.626,460,1.626,461,1.626,462,2.275,463,1.626,464,2.275,465,1.626,466,1.626,467,2.275,468,1.626,469,1.626,470,1.626,471,1.626,472,1.308,473,1.626,474,1.626,475,1.626,476,1.626,477,1.626,478,1.626,479,1.626,480,1.626,481,1.626]],["title/classes/PushgatewayReporterOptions.html",[75,0.213,409,1.012]],["body/classes/PushgatewayReporterOptions.html",[0,0.505,2,0.945,3,1.064,4,0.505,6,1.295,9,1.538,11,1.93,12,0.889,13,1.548,15,1.665,22,0.945,31,0.632,32,1.295,35,1.857,36,1.007,37,0.079,39,1.305,40,0.632,41,0.776,50,1.477,51,1.295,56,1.064,57,0.632,58,1.872,60,0.849,62,0.776,63,0.632,74,1.589,75,0.35,77,0.945,82,1.906,83,1.872,86,1.589,87,1.84,97,1.477,108,1.665,109,1.589,110,1.176,116,0.945,119,0.945,131,1.295,132,1.295,134,1.295,136,0.776,137,0.945,141,1.295,146,1.915,168,0.945,169,1.947,171,1.064,177,1.412,197,0.945,198,0.945,206,1.295,218,0.505,219,1.295,223,1.305,245,0.945,259,1.367,260,1.295,271,0.945,382,0.05,383,0.05,384,0.945,386,2.022,388,1.148,389,1.93,396,1.915,397,1.403,398,1.743,399,2.756,400,1.743,401,2.724,402,1.743,403,1.403,404,3.392,405,3.353,406,3.476,407,1.93,409,1.84,410,3.069,414,1.743,415,1.743,416,1.403,417,2.388,418,1.743,421,1.743,422,1.743,423,2.388,425,1.743,426,1.403,427,2.388,429,1.743,431,1.743,432,2.388,435,2.388,436,2.388,437,2.612,438,2.724,439,2.724,440,2.724,441,1.743,442,2.729,443,2.729,444,2.551,445,1.922,446,1.743,447,1.743,448,1.743,449,1.743,450,1.743,451,1.743,452,1.403,453,1.743,454,1.743,455,1.743,456,2.388,457,2.388,458,2.388,459,1.743,460,1.743,461,1.743,462,2.388,463,1.743,464,2.388,465,1.743,466,1.743,467,2.388,468,1.743,469,1.743,470,1.743,471,1.743,472,1.403,473,1.743,474,1.743,475,1.743,476,1.743,477,1.743,478,1.743,479,1.743,480,1.743,481,1.743,482,2.26,483,2.26,484,2.26,485,2.26,486,2.26,487,2.26]],["title/coverage.html",[488,2.012]],["body/coverage.html",[0,0.802,1,1.501,4,0.802,5,1.882,36,0.802,37,0.076,75,0.403,76,1.501,104,1.233,110,1.003,111,1.233,382,0.068,383,0.068,396,1.501,397,2.575,409,1.501,488,2.227,489,2.768,490,3.589,491,2.768,492,3.589,493,3.589,494,4.576,495,3.589,496,3.589,497,3.589,498,3.589,499,3.589,500,2.768,501,2.768]],["title/dependencies.html",[502,2.05,503,2.232]],["body/dependencies.html",[3,1.277,12,0.831,37,0.074,40,1.039,41,1.277,57,1.039,382,0.069,383,0.069,503,2.868,504,3.718,505,3.718]],["title/index.html",[20,0.858,31,0.573,218,0.458]],["body/index.html",[9,1.586,12,1.056,13,0.99,36,0.644,37,0.079,39,1.479,40,0.805,49,2.021,56,1.248,57,1.262,60,0.889,63,1.247,65,1.205,69,1.846,104,1.565,110,1.229,111,1.248,122,1.464,126,1.464,127,2.021,128,1.464,129,2.021,130,1.464,136,0.99,171,0.99,177,0.99,184,1.464,185,2.021,208,1.846,218,0.811,223,1.565,237,1.464,382,0.059,383,0.059,384,1.205,389,2.021,396,1.519,399,2.673,409,1.519,416,1.788,426,1.788,437,1.788,442,2.254,443,1.788,444,2.254,445,1.788,452,1.788,472,1.788,506,2.881,507,3.632,508,2.881,509,2.881,510,1.788,511,2.881,512,2.881,513,3.978,514,3.632,515,3.632,516,2.881,517,3.632,518,2.881,519,2.881,520,2.881,521,2.881,522,2.881,523,3.632,524,4.177,525,3.632,526,3.632,527,2.881,528,2.881,529,2.881,530,2.881,531,4.306,532,2.881,533,2.881,534,2.881,535,2.881,536,3.978,537,2.881,538,2.881,539,2.881,540,2.222,541,2.881,542,2.881,543,2.881,544,2.881,545,3.632,546,2.881,547,2.881,548,2.881,549,2.881,550,2.881,551,2.881,552,2.881,553,2.881,554,2.881,555,2.881,556,2.881,557,2.881,558,2.881,559,2.881,560,1.788,561,2.881,562,2.881,563,2.881,564,2.881,565,2.881,566,2.881,567,2.881,568,2.881,569,2.881,570,3.632,571,2.881,572,2.881,573,3.632,574,2.881,575,2.881,576,2.881,577,2.881,578,2.881,579,2.881,580,2.881,581,2.881,582,2.881,583,2.881,584,2.881,585,2.881,586,2.222,587,2.881,588,3.632,589,2.881,590,2.881,591,2.881,592,2.881,593,2.222]],["title/license.html",[20,0.858,218,0.458,594,1.581]],["body/license.html",[4,0.767,25,2.183,37,0.066,60,0.903,182,2.183,228,1.744,382,0.066,383,0.066,403,2.13,489,2.647,540,2.647,586,2.647,593,2.647,594,2.647,595,4.296,596,3.432,597,4.042,598,3.432,599,3.432,600,3.432,601,3.432,602,4.042,603,3.432,604,4.435,605,4.689,606,3.432,607,4.042,608,3.432,609,4.042,610,3.432,611,3.432,612,3.432,613,3.432,614,3.432,615,3.432,616,3.432,617,3.432,618,3.432,619,3.432,620,3.432,621,3.432,622,3.432,623,4.042,624,4.042,625,3.432,626,3.432,627,4.042,628,3.432,629,3.432,630,3.432,631,3.432,632,3.432,633,3.432,634,3.432,635,3.432,636,3.432,637,3.432,638,3.432,639,3.432,640,3.432,641,3.432,642,3.432,643,3.432,644,3.432,645,3.432,646,3.432,647,3.432,648,3.432,649,3.432]],["title/modules.html",[510,2.012]],["body/modules.html",[37,0.069,382,0.069,383,0.069,510,2.329]],["title/overview.html",[650,2.501]],["body/overview.html",[0,0.835,37,0.069,70,1.899,75,0.329,160,1.899,382,0.069,383,0.069,650,2.882]],["title/miscellaneous/typealiases.html",[651,1.581,652,2.893]],["body/miscellaneous/typealiases.html",[5,1.532,12,0.818,31,1.023,36,0.937,37,0.076,45,1.861,46,1.861,47,1.861,59,1.861,60,0.818,61,1.861,62,1.258,63,1.023,64,2.241,65,1.532,66,1.861,382,0.068,383,0.068,651,2.824,653,3.661,654,3.661]],["title/unit-test.html",[407,1.327,560,1.621]],["body/unit-test.html",[4,0.807,37,0.077,104,1.24,163,1.835,259,1.24,320,1.835,382,0.068,383,0.068,407,1.835,488,2.241,491,2.785,500,2.785,501,2.785,560,2.241,655,3.61,656,4.162,657,3.61,658,4.386,659,3.61,660,3.61,661,3.61,662,4.162,663,3.61,664,3.61,665,3.61,666,3.61,667,3.61,668,3.61,669,3.61,670,3.61]]],"invertedIndex":[["",{"_index":37,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["0",{"_index":69,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["0.0.0.0",{"_index":543,"title":{},"body":{"index.html":{}}}],["0.01",{"_index":98,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["0.05",{"_index":89,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["0.5",{"_index":90,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["0.5.9",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["0.75",{"_index":91,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["0.9",{"_index":92,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["0.95",{"_index":93,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["0.98",{"_index":94,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["0.99",{"_index":95,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["0.999",{"_index":96,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["1",{"_index":70,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"overview.html":{}}}],["1.0",{"_index":102,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["1.0.0",{"_index":528,"title":{},"body":{"index.html":{}}}],["1.11.0",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["1/12",{"_index":667,"title":{},"body":{"unit-test.html":{}}}],["100",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["1000192",{"_index":573,"title":{},"body":{"index.html":{}}}],["12/12",{"_index":498,"title":{},"body":{"coverage.html":{}}}],["127.0.0.3",{"_index":535,"title":{},"body":{"index.html":{}}}],["127.0.0.4",{"_index":591,"title":{},"body":{"index.html":{}}}],["147/159",{"_index":664,"title":{},"body":{"unit-test.html":{}}}],["148/160",{"_index":659,"title":{},"body":{"unit-test.html":{}}}],["15",{"_index":452,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["1999872",{"_index":576,"title":{},"body":{"index.html":{}}}],["2",{"_index":157,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["2000128",{"_index":578,"title":{},"body":{"index.html":{}}}],["2018",{"_index":596,"title":{},"body":{"license.html":{}}}],["26/28",{"_index":670,"title":{},"body":{"unit-test.html":{}}}],["27/29",{"_index":666,"title":{},"body":{"unit-test.html":{}}}],["283998208report",{"_index":584,"title":{},"body":{"index.html":{}}}],["3",{"_index":158,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["3/3",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":557,"title":{},"body":{"index.html":{}}}],["362",{"_index":582,"title":{},"body":{"index.html":{}}}],["39/39",{"_index":495,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":159,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["4000000",{"_index":580,"title":{},"body":{"index.html":{}}}],["5",{"_index":160,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"overview.html":{}}}],["5/5",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["57/62",{"_index":663,"title":{},"body":{"unit-test.html":{}}}],["6",{"_index":161,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["6/6",{"_index":499,"title":{},"body":{"coverage.html":{}}}],["6/7",{"_index":669,"title":{},"body":{"unit-test.html":{}}}],["7",{"_index":162,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["71/84",{"_index":661,"title":{},"body":{"unit-test.html":{}}}],["75",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":163,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"unit-test.html":{}}}],["8080",{"_index":544,"title":{},"body":{"index.html":{}}}],["85",{"_index":660,"title":{},"body":{"unit-test.html":{}}}],["86",{"_index":668,"title":{},"body":{"unit-test.html":{}}}],["9\"].sort",{"_index":164,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["9091",{"_index":445,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["92",{"_index":662,"title":{},"body":{"unit-test.html":{}}}],["93",{"_index":658,"title":{},"body":{"unit-test.html":{}}}],["999936",{"_index":570,"title":{},"body":{"index.html":{}}}],["9_",{"_index":151,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["_",{"_index":156,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["_${field",{"_index":301,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["abov",{"_index":586,"title":{},"body":{"index.html":{},"license.html":{}}}],["action",{"_index":643,"title":{},"body":{"license.html":{}}}],["additionalfield",{"_index":289,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["address",{"_index":440,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["alias",{"_index":653,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alway",{"_index":125,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["amount",{"_index":21,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["and/or",{"_index":616,"title":{},"body":{"license.html":{}}}],["any).id",{"_index":266,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["anyth",{"_index":538,"title":{},"body":{"index.html":{}}}],["app",{"_index":561,"title":{},"body":{"index.html":{}}}],["append",{"_index":117,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["applic",{"_index":516,"title":{},"body":{"index.html":{}}}],["aris",{"_index":647,"title":{},"body":{"license.html":{}}}],["assign",{"_index":79,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["associ",{"_index":606,"title":{},"body":{"license.html":{}}}],["assum",{"_index":589,"title":{},"body":{"index.html":{}}}],["author",{"_index":636,"title":{},"body":{"license.html":{}}}],["b",{"_index":100,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["base",{"_index":140,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["basic",{"_index":520,"title":{},"body":{"index.html":{}}}],["be",{"_index":26,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["between",{"_index":68,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["boolean",{"_index":112,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["boundari",{"_index":73,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["boundaries.foreach((boundari",{"_index":101,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["boundaries.sort((a",{"_index":99,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["boundaries=[0.01",{"_index":88,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["branch",{"_index":655,"title":{},"body":{"unit-test.html":{}}}],["bucket",{"_index":43,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["bucketcount",{"_index":42,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["bucketcount}${timestamp",{"_index":331,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["bucketstr",{"_index":326,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["bucketstrings.join(\"\\n",{"_index":332,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["bucketstrings.push",{"_index":329,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["build",{"_index":207,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["c",{"_index":228,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"license.html":{}}}],["c.getcount",{"_index":230,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["call",{"_index":134,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["can't",{"_index":272,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["canreport",{"_index":273,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["canreport(metr",{"_index":277,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["certain",{"_index":19,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["chang",{"_index":28,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["charact",{"_index":144,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["charg",{"_index":601,"title":{},"body":{"license.html":{}}}],["check",{"_index":167,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["clack",{"_index":178,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["claim",{"_index":639,"title":{},"body":{"license.html":{}}}],["class",{"_index":75,"title":{"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["clock",{"_index":44,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["clock=new",{"_index":195,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["code",{"_index":417,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["code(200",{"_index":551,"title":{},"body":{"index.html":{}}}],["comment",{"_index":121,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["common",{"_index":184,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["concat(count",{"_index":249,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["concat(gaug",{"_index":250,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["concat(histogram",{"_index":251,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["concat(met",{"_index":252,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["concat(monotonecount",{"_index":248,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["concat(tim",{"_index":253,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["condit",{"_index":622,"title":{},"body":{"license.html":{}}}],["configur",{"_index":108,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["connect",{"_index":649,"title":{},"body":{"license.html":{}}}],["console.log(\"report",{"_index":549,"title":{},"body":{"index.html":{}}}],["const",{"_index":223,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["constant",{"_index":78,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["constructor",{"_index":97,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["constructor(boundari",{"_index":385,"title":{},"body":{"classes/Percentiles.html":{}}}],["constructor(host",{"_index":482,"title":{},"body":{"classes/PushgatewayReporterOptions.html":{}}}],["constructor(includetimestamp",{"_index":391,"title":{},"body":{"classes/PrometheusReporterOptions.html":{}}}],["constructor(report",{"_index":408,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["contain",{"_index":523,"title":{},"body":{"index.html":{}}}],["content",{"_index":467,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["contract",{"_index":644,"title":{},"body":{"license.html":{}}}],["convert",{"_index":116,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["copi",{"_index":604,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":595,"title":{},"body":{"license.html":{}}}],["correct",{"_index":310,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["count",{"_index":321,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["counter",{"_index":45,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["counter.getcount",{"_index":348,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["countertyp",{"_index":189,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["count}${timestamp}\\n",{"_index":334,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["coverag",{"_index":488,"title":{"coverage.html":{}},"body":{"coverage.html":{},"unit-test.html":{}}}],["creat",{"_index":86,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["custom",{"_index":514,"title":{},"body":{"index.html":{}}}],["damag",{"_index":640,"title":{},"body":{"license.html":{}}}],["data",{"_index":119,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["date",{"_index":225,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["date(this.clock.time().millisecond",{"_index":226,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["deal",{"_index":607,"title":{},"body":{"license.html":{}}}],["default",{"_index":389,"title":{},"body":{"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["defin",{"_index":386,"title":{},"body":{"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["depend",{"_index":503,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["descript",{"_index":6,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["description}\\n",{"_index":295,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["determin",{"_index":61,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["directli",{"_index":14,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["distribut",{"_index":614,"title":{},"body":{"license.html":{}}}],["document",{"_index":489,"title":{},"body":{"coverage.html":{},"license.html":{}}}],["durat",{"_index":566,"title":{},"body":{"index.html":{}}}],["e.g",{"_index":23,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["each",{"_index":118,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["emit",{"_index":123,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["emitcom",{"_index":128,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["emitcomments=tru",{"_index":120,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["empti",{"_index":170,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["endpoint",{"_index":515,"title":{},"body":{"index.html":{}}}],["ensur",{"_index":18,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["enumer",{"_index":59,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["eqaul",{"_index":107,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["error(\"boundari",{"_index":105,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["evaluation_interv",{"_index":556,"title":{},"body":{"index.html":{}}}],["event",{"_index":635,"title":{},"body":{"license.html":{}}}],["exampl",{"_index":384,"title":{},"body":{"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["example.t",{"_index":522,"title":{},"body":{"index.html":{}}}],["exclude.indexof(normalizedkey",{"_index":378,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["export",{"_index":74,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["expos",{"_index":513,"title":{},"body":{"index.html":{}}}],["express",{"_index":540,"title":{},"body":{"index.html":{},"license.html":{}}}],["extend",{"_index":141,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["fals",{"_index":127,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["featur",{"_index":180,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["fieldstr",{"_index":299,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["file",{"_index":4,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"license.html":{},"unit-test.html":{}}}],["filter((metr",{"_index":265,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["first",{"_index":153,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["fit",{"_index":631,"title":{},"body":{"license.html":{}}}],["follow",{"_index":621,"title":{},"body":{"license.html":{}}}],["foreach((bucketcount",{"_index":328,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["format",{"_index":132,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["free",{"_index":600,"title":{},"body":{"license.html":{}}}],["function",{"_index":259,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"unit-test.html":{}}}],["furnish",{"_index":619,"title":{},"body":{"license.html":{}}}],["g",{"_index":152,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["g.getvalu",{"_index":235,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["gaug",{"_index":46,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["gauge.getvalu",{"_index":352,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["gaugetyp",{"_index":190,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["gener",{"_index":260,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["get",{"_index":20,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getbucket",{"_index":322,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getcount",{"_index":327,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getcountergaugestring(now",{"_index":349,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getcounterstring(now",{"_index":345,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getdescription(metr",{"_index":306,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getgaugestring(now",{"_index":351,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["gethistogramstring(now",{"_index":353,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getmeterstring(now",{"_index":359,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getmetricsstr",{"_index":210,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getmetricstr",{"_index":276,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getquantil",{"_index":335,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["gettag",{"_index":203,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["gettimerstring(now",{"_index":362,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["gettimestamp(now",{"_index":317,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getvalu",{"_index":275,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getvalue(valu",{"_index":313,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["getvalues(metr",{"_index":281,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["given",{"_index":168,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["global",{"_index":554,"title":{},"body":{"index.html":{}}}],["grant",{"_index":599,"title":{},"body":{"license.html":{}}}],["greater",{"_index":106,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["group",{"_index":255,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["h",{"_index":237,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["h.getcount",{"_index":239,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["h.response(reporter.getmetricsstr",{"_index":550,"title":{},"body":{"index.html":{}}}],["hand",{"_index":29,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["handler(request",{"_index":548,"title":{},"body":{"index.html":{}}}],["hapi",{"_index":541,"title":{},"body":{"index.html":{}}}],["hapi.serv",{"_index":542,"title":{},"body":{"index.html":{}}}],["haschanged(metricid",{"_index":371,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["have",{"_index":27,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["haven't",{"_index":30,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["header",{"_index":466,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["help",{"_index":122,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["herebi",{"_index":598,"title":{},"body":{"license.html":{}}}],["histogram",{"_index":47,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["histogram.getcount",{"_index":356,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["histogram.getsum().tostr",{"_index":358,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["histogramtyp",{"_index":191,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["holder",{"_index":637,"title":{},"body":{"license.html":{}}}],["host",{"_index":437,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["hostnam",{"_index":438,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["http",{"_index":435,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["http.request(opt",{"_index":476,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["https://github.com/prometheus/pushgateway",{"_index":446,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["https://prometheus.io/docs/concept",{"_index":138,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["https://prometheus.io/docs/instrumenting/exposition_formats/#text",{"_index":139,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["id",{"_index":444,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["identifi",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["implement",{"_index":537,"title":{},"body":{"index.html":{}}}],["impli",{"_index":629,"title":{},"body":{"license.html":{}}}],["import",{"_index":39,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["includ",{"_index":182,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"license.html":{}}}],["includetimestamp",{"_index":126,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["includetimestamp=fals",{"_index":113,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["index",{"_index":31,"title":{"index.html":{}},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["indic",{"_index":114,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["inf",{"_index":312,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["infin",{"_index":316,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["info",{"_index":2,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["inspector",{"_index":57,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"dependencies.html":{},"index.html":{}}}],["instal",{"_index":517,"title":{},"body":{"index.html":{}}}],["instanc",{"_index":13,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["interfac",{"_index":0,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"overview.html":{}}}],["interpret",{"_index":429,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["interv",{"_index":404,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["interval=15",{"_index":448,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["ip",{"_index":439,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["isempty(valu",{"_index":172,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["isnan(histogram.getcount",{"_index":355,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["isnan(meter.getcount",{"_index":360,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["isnan(timer.getcount",{"_index":364,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["isnumber(valu",{"_index":174,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["it'",{"_index":367,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["job",{"_index":443,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["job_nam",{"_index":559,"title":{},"body":{"index.html":{}}}],["join",{"_index":215,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["join(\"\\n",{"_index":254,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["keep",{"_index":186,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["key",{"_index":274,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["key.replace(prometheusmetricreporter.label_name_replacement_regexp",{"_index":377,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["keys(tag",{"_index":286,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["keys(valu",{"_index":297,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["kind",{"_index":628,"title":{},"body":{"license.html":{}}}],["koa",{"_index":539,"title":{},"body":{"index.html":{}}}],["label",{"_index":145,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["label_name_replacement_regexp",{"_index":147,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["label_name_start_exclus",{"_index":155,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["last",{"_index":368,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["lastfn",{"_index":263,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["lastfn(metr",{"_index":268,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["lastreport",{"_index":33,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["lastvalu",{"_index":34,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["latenc",{"_index":532,"title":{},"body":{"index.html":{}}}],["latest",{"_index":38,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["le",{"_index":284,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["length",{"_index":468,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["liabil",{"_index":641,"title":{},"body":{"license.html":{}}}],["liabl",{"_index":638,"title":{},"body":{"license.html":{}}}],["lib/.../prometheusmetricreporter.t",{"_index":654,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["lib/metrics/prometheusmetricreporter.t",{"_index":5,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["lib/metrics/prometheusmetricreporter.ts:110",{"_index":394,"title":{},"body":{"classes/PrometheusReporterOptions.html":{}}}],["lib/metrics/prometheusmetricreporter.ts:111",{"_index":393,"title":{},"body":{"classes/PrometheusReporterOptions.html":{}}}],["lib/metrics/prometheusmetricreporter.ts:112",{"_index":395,"title":{},"body":{"classes/PrometheusReporterOptions.html":{}}}],["lib/metrics/prometheusmetricreporter.ts:68",{"_index":387,"title":{},"body":{"classes/Percentiles.html":{}}}],["lib/metrics/prometheusmetricreporter.ts:77",{"_index":390,"title":{},"body":{"classes/Percentiles.html":{}}}],["lib/metrics/prometheusmetricreporter.ts:98",{"_index":392,"title":{},"body":{"classes/PrometheusReporterOptions.html":{}}}],["lib/metrics/pushgatewaymetricreporter.t",{"_index":397,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:102",{"_index":413,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:110",{"_index":411,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:146",{"_index":433,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:156",{"_index":434,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:170",{"_index":430,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:20",{"_index":483,"title":{},"body":{"classes/PushgatewayReporterOptions.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:32",{"_index":484,"title":{},"body":{"classes/PushgatewayReporterOptions.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:33",{"_index":487,"title":{},"body":{"classes/PushgatewayReporterOptions.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:34",{"_index":486,"title":{},"body":{"classes/PushgatewayReporterOptions.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:35",{"_index":485,"title":{},"body":{"classes/PushgatewayReporterOptions.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:60",{"_index":420,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:68",{"_index":419,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:77",{"_index":412,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:85",{"_index":428,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["lib/metrics/pushgatewaymetricreporter.ts:94",{"_index":424,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{}}}],["librari",{"_index":507,"title":{},"body":{"index.html":{}}}],["licens",{"_index":594,"title":{"license.html":{}},"body":{"license.html":{}}}],["limit",{"_index":609,"title":{},"body":{"license.html":{}}}],["line",{"_index":320,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"unit-test.html":{}}}],["link",{"_index":15,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["list",{"_index":67,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["localhost",{"_index":588,"title":{},"body":{"index.html":{}}}],["localhost:8080exampl",{"_index":565,"title":{},"body":{"index.html":{}}}],["log",{"_index":415,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["logger",{"_index":405,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["logger=nul",{"_index":450,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["m",{"_index":241,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["m.getcount",{"_index":243,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["made",{"_index":508,"title":{},"body":{"index.html":{}}}],["mainli",{"_index":311,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["map",{"_index":40,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"dependencies.html":{},"index.html":{}}}],["map((boundari",{"_index":339,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["map((field",{"_index":298,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["map((metr",{"_index":269,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["map((registri",{"_index":213,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["map((tag",{"_index":287,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["match",{"_index":383,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["meant",{"_index":511,"title":{},"body":{"index.html":{}}}],["memberof",{"_index":58,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["merchant",{"_index":630,"title":{},"body":{"license.html":{}}}],["merg",{"_index":612,"title":{},"body":{"license.html":{}}}],["messag",{"_index":418,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["metadata",{"_index":80,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metadata_nam",{"_index":84,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["meter",{"_index":48,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["meter.getcount",{"_index":361,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["method",{"_index":136,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["metric",{"_index":12,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"dependencies.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["metric.getbucket",{"_index":323,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metric.getdescript",{"_index":307,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metric.getmetadata(percentiles.metadata_nam",{"_index":336,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metric.getsnapshot",{"_index":338,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metric_name_replacement_regexp",{"_index":165,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metric_name_start_exclus",{"_index":166,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metricentri",{"_index":1,"title":{"interfaces/MetricEntry.html":{}},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["metricentry.lastreport",{"_index":375,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metricentry.lastvalu",{"_index":374,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metricid",{"_index":370,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metricnam",{"_index":278,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metricname}${fieldstr}{${tagstr",{"_index":304,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metricname}_bucket{${tagstr}${tagprefix}le=\"${boundari",{"_index":330,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metricname}{${tagstr}${tagprefix}quantile=\"${boundari",{"_index":341,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metricregistri",{"_index":49,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["metricregistry}",{"_index":209,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metricreport",{"_index":50,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["metrics/job/${this.options.job}/instance/${this.options.inst",{"_index":473,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["metrics_path",{"_index":562,"title":{},"body":{"index.html":{}}}],["metricst",{"_index":188,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["metrictyp",{"_index":64,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["metrictype}\\n",{"_index":296,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["millisecond",{"_index":51,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["millisecond}",{"_index":460,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["minim",{"_index":179,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["minimum",{"_index":16,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["minreportingtimeout",{"_index":183,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["minreportingtimeout=1",{"_index":196,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["minut",{"_index":24,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["minute.convertto(minreportingtimeout",{"_index":202,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["minute}",{"_index":181,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["miscellan",{"_index":651,"title":{"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/typealiases.html":{}}}],["mit",{"_index":593,"title":{},"body":{"index.html":{},"license.html":{}}}],["mnt/c/git/inspector",{"_index":656,"title":{},"body":{"unit-test.html":{}}}],["modifi",{"_index":611,"title":{},"body":{"license.html":{}}}],["modul",{"_index":510,"title":{"modules.html":{}},"body":{"index.html":{},"modules.html":{}}}],["monoton",{"_index":343,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["monotonecount",{"_index":52,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["n",{"_index":216,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["n${metricname}_bucket{${tagstr}${tagprefix}le=\"+inf",{"_index":333,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["name",{"_index":77,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["need",{"_index":154,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["new",{"_index":104,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"coverage.html":{},"index.html":{},"unit-test.html":{}}}],["node",{"_index":509,"title":{},"body":{"index.html":{}}}],["nodej",{"_index":426,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["nodejs.tim",{"_index":423,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["noninfring",{"_index":634,"title":{},"body":{"license.html":{}}}],["normalizedkey",{"_index":376,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["noth",{"_index":217,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["notic",{"_index":623,"title":{},"body":{"license.html":{}}}],["now",{"_index":224,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["now.getutcmillisecond",{"_index":319,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["npm",{"_index":518,"title":{},"body":{"index.html":{}}}],["null",{"_index":453,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["number",{"_index":35,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["number.isfinite(valu",{"_index":315,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["numer",{"_index":309,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["object",{"_index":109,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["obtain",{"_index":603,"title":{},"body":{"license.html":{}}}],["open",{"_index":133,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["option",{"_index":177,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["options=new",{"_index":193,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["ot",{"_index":421,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["otherwis",{"_index":646,"title":{},"body":{"license.html":{}}}],["out",{"_index":648,"title":{},"body":{"license.html":{}}}],["output",{"_index":402,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["overview",{"_index":650,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["packag",{"_index":502,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":87,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["paramet",{"_index":388,"title":{},"body":{"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["particular",{"_index":632,"title":{},"body":{"license.html":{}}}],["path",{"_index":472,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["payload",{"_index":464,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["payload.length",{"_index":469,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["percent",{"_index":72,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["percentil",{"_index":76,"title":{"classes/Percentiles.html":{}},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"coverage.html":{}}}],["permiss",{"_index":597,"title":{},"body":{"license.html":{}}}],["permit",{"_index":618,"title":{},"body":{"license.html":{}}}],["person",{"_index":602,"title":{},"body":{"license.html":{}}}],["port",{"_index":442,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["port=9091",{"_index":441,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["portion",{"_index":626,"title":{},"body":{"license.html":{}}}],["privat",{"_index":146,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["prometheu",{"_index":63,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["prometheus'",{"_index":398,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["prometheus/lib/metrics/prometheusmetricreporter.t",{"_index":657,"title":{},"body":{"unit-test.html":{}}}],["prometheus/lib/metrics/pushgatewaymetricreporter.t",{"_index":665,"title":{},"body":{"unit-test.html":{}}}],["prometheusmetricreport",{"_index":110,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["prometheusmetricreporter#getmetricsstr",{"_index":135,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter#getmetricstr",{"_index":344,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter(new",{"_index":585,"title":{},"body":{"index.html":{}}}],["prometheusmetricreporter.isempty(descript",{"_index":308,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.isempty(field",{"_index":300,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.isempty(tagstr",{"_index":325,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.isnumber(valu",{"_index":314,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["prometheusmetricreporter.label_name_start_exclusion.indexof(normalizedkey.charat(0",{"_index":379,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["prometheusreporteropt",{"_index":111,"title":{"classes/PrometheusReporterOptions.html":{}},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["properti",{"_index":32,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["provid",{"_index":403,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"license.html":{}}}],["public",{"_index":82,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["publish",{"_index":613,"title":{},"body":{"license.html":{}}}],["purpos",{"_index":633,"title":{},"body":{"license.html":{}}}],["push",{"_index":512,"title":{},"body":{"index.html":{}}}],["pushgateway",{"_index":399,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["pushgatewaymetricreport",{"_index":396,"title":{"classes/PushgatewayMetricReporter.html":{}},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["pushgatewaymetricreporter#report",{"_index":459,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["pushgatewaymetricreporter#unit",{"_index":447,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["pushgatewayreporteropt",{"_index":409,"title":{"classes/PushgatewayReporterOptions.html":{}},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"index.html":{}}}],["pushreport",{"_index":587,"title":{},"body":{"index.html":{}}}],["pushreporter.start();licens",{"_index":592,"title":{},"body":{"index.html":{}}}],["put",{"_index":432,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["quantil",{"_index":85,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["r",{"_index":221,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["re",{"_index":477,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["reach",{"_index":369,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["readonli",{"_index":83,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["refer",{"_index":425,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["regexp(\"[^a",{"_index":148,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["regist",{"_index":208,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["registri",{"_index":524,"title":{},"body":{"index.html":{}}}],["registry.newtimer(\"request",{"_index":533,"title":{},"body":{"index.html":{}}}],["render",{"_index":176,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["replac",{"_index":142,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["report",{"_index":9,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["reporter.addmetricregistry(registri",{"_index":526,"title":{},"body":{"index.html":{}}}],["reporter.settags(tag",{"_index":529,"title":{},"body":{"index.html":{}}}],["reportfn",{"_index":258,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["reportfn(metr",{"_index":270,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["reportmetr",{"_index":264,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["reportmetricregistry(r",{"_index":222,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["repres",{"_index":71,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["req",{"_index":475,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["req.end",{"_index":481,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["req.write(payload",{"_index":480,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["request",{"_index":531,"title":{},"body":{"index.html":{}}}],["requests.settag(\"host",{"_index":534,"title":{},"body":{"index.html":{}}}],["requests_count{app_version=\"1.0.0\",host=\"127.0.0.3",{"_index":581,"title":{},"body":{"index.html":{}}}],["requests_sum{app_version=\"1.0.0\",host=\"127.0.0.3",{"_index":583,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.01",{"_index":567,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.05",{"_index":568,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.5",{"_index":569,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.75",{"_index":571,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.9",{"_index":572,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.95",{"_index":574,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.98",{"_index":575,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.99",{"_index":577,"title":{},"body":{"index.html":{}}}],["requests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.999",{"_index":579,"title":{},"body":{"index.html":{}}}],["res.statusmessag",{"_index":479,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["respons",{"_index":416,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["restrict",{"_index":608,"title":{},"body":{"license.html":{}}}],["result",{"_index":382,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"dependencies.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"unit-test.html":{}}}],["return",{"_index":171,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["right",{"_index":610,"title":{},"body":{"license.html":{}}}],["rout",{"_index":546,"title":{},"body":{"index.html":{}}}],["run",{"_index":590,"title":{},"body":{"index.html":{}}}],["same",{"_index":256,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["sampl",{"_index":53,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["save",{"_index":519,"title":{},"body":{"index.html":{}}}],["schedul",{"_index":406,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["scheduler=setinterv",{"_index":451,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["scrape_config",{"_index":558,"title":{},"body":{"index.html":{}}}],["scrape_interv",{"_index":555,"title":{},"body":{"index.html":{}}}],["second",{"_index":436,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["see",{"_index":137,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["sell",{"_index":617,"title":{},"body":{"license.html":{}}}],["send",{"_index":401,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["server",{"_index":536,"title":{},"body":{"index.html":{}}}],["server.rout",{"_index":547,"title":{},"body":{"index.html":{}}}],["server.start();/etc/prometheus/config.yml",{"_index":553,"title":{},"body":{"index.html":{}}}],["set",{"_index":204,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["setinterv",{"_index":427,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["settags(tag",{"_index":205,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["shall",{"_index":624,"title":{},"body":{"license.html":{}}}],["simpl",{"_index":530,"title":{},"body":{"index.html":{}}}],["simpli",{"_index":400,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["simplifi",{"_index":414,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["singl",{"_index":262,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["snapshot",{"_index":337,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["snapshot.getvalue(boundari",{"_index":340,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["softwar",{"_index":605,"title":{},"body":{"license.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"dependencies.html":{}}}],["specif",{"_index":220,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["specifi",{"_index":271,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["standard",{"_index":545,"title":{},"body":{"index.html":{}}}],["start",{"_index":218,"title":{"index.html":{},"license.html":{}},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["state",{"_index":187,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["statement",{"_index":491,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["static",{"_index":81,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["static_config",{"_index":563,"title":{},"body":{"index.html":{}}}],["stdclock",{"_index":54,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["stop",{"_index":219,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["string",{"_index":169,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["subject",{"_index":620,"title":{},"body":{"license.html":{}}}],["sublicens",{"_index":615,"title":{},"body":{"license.html":{}}}],["substanti",{"_index":625,"title":{},"body":{"license.html":{}}}],["sum",{"_index":357,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["summari",{"_index":65,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["summarytyp",{"_index":192,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["super",{"_index":197,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["support",{"_index":41,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"dependencies.html":{}}}],["t",{"_index":245,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["t.getcount",{"_index":247,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["tabl",{"_index":501,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":500,"title":{},"body":{"coverage.html":{},"unit-test.html":{}}}],["tag",{"_index":185,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["taggabl",{"_index":55,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["taggable.gettags().foreach((valu",{"_index":381,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["tagprefix",{"_index":324,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["tags.set(\"app_vers",{"_index":527,"title":{},"body":{"index.html":{}}}],["tags=new",{"_index":194,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["tags[normalizedkey",{"_index":380,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["tagstr",{"_index":285,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["tag}=\"${tags[tag",{"_index":288,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["target",{"_index":564,"title":{},"body":{"index.html":{}}}],["teh",{"_index":261,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["templat",{"_index":257,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["test",{"_index":560,"title":{"unit-test.html":{}},"body":{"index.html":{},"unit-test.html":{}}}],["text",{"_index":131,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["text/plain",{"_index":470,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.buildtags(metr",{"_index":283,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.clock",{"_index":200,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.countertyp",{"_index":347,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.gaugetyp",{"_index":350,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getbuckets(metr",{"_index":290,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getcountergaugestring(now",{"_index":232,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getcounterstring(now",{"_index":229,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getdescription(metr",{"_index":280,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getgaugestring(now",{"_index":234,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.gethistogramstring(now",{"_index":238,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getmeterstring(now",{"_index":242,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getmetricname(metr",{"_index":279,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getmetricstr",{"_index":346,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getquantiles(metr",{"_index":292,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.gettimerstring(now",{"_index":246,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.gettimestamp(now",{"_index":282,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.getvalue(values[field",{"_index":303,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.haschanged((metr",{"_index":267,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.histogramtyp",{"_index":354,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.interv",{"_index":454,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.logg",{"_index":457,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.logger.debug(`${res.statuscod",{"_index":478,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.metricregistri",{"_index":211,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.metricregistries.length",{"_index":212,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.metricstates.get(metricid",{"_index":373,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.metricstates.has(metricid",{"_index":372,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.minreportingtimeout",{"_index":201,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.opt",{"_index":198,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.options.emitcom",{"_index":294,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.options.host",{"_index":471,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.options.includetimestamp",{"_index":318,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.options.port",{"_index":474,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.options.useuntyp",{"_index":293,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.report",{"_index":456,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.reporter.getmetricsstr",{"_index":465,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.reportmetricregistry(registri",{"_index":214,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.reportmetrics(r.getcounterlist",{"_index":231,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.reportmetrics(r.getgaugelist",{"_index":233,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.reportmetrics(r.gethistogramlist",{"_index":236,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.reportmetrics(r.getmeterlist",{"_index":240,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.reportmetrics(r.getmonotonecounterlist",{"_index":227,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.reportmetrics(r.gettimerlist",{"_index":244,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.schedul",{"_index":458,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.summarytyp",{"_index":363,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.tag",{"_index":199,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["this.tim",{"_index":462,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.timer.unref",{"_index":463,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.unit",{"_index":455,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["this.unit.convertto(this.interv",{"_index":461,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["throw",{"_index":103,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["time",{"_index":22,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["timeout",{"_index":17,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["timer",{"_index":56,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{}}}],["timer.getcount",{"_index":365,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["timer.getsum().tostr",{"_index":366,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["timestamp",{"_index":10,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["timeunit",{"_index":410,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["tort",{"_index":645,"title":{},"body":{"license.html":{}}}],["track",{"_index":8,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["true",{"_index":129,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["type",{"_index":36,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"coverage.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["type(\"text/plain",{"_index":552,"title":{},"body":{"index.html":{}}}],["typealias",{"_index":652,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof(valu",{"_index":175,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["typescript",{"_index":506,"title":{},"body":{"index.html":{}}}],["unit",{"_index":407,"title":{"unit-test.html":{}},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"unit-test.html":{}}}],["unit=second",{"_index":449,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["unsupport",{"_index":143,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["untyp",{"_index":66,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["us",{"_index":60,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"index.html":{},"license.html":{},"miscellaneous/typealiases.html":{}}}],["usag",{"_index":521,"title":{},"body":{"index.html":{}}}],["useuntyp",{"_index":130,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"index.html":{}}}],["useuntyped=fals",{"_index":124,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["utc",{"_index":115,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["util",{"_index":7,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["valid",{"_index":62,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{},"miscellaneous/typealiases.html":{}}}],["valu",{"_index":11,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["value.trim",{"_index":173,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["values[\"count",{"_index":291,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["valuestr",{"_index":302,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["valuestr}${timestamp}\\n",{"_index":305,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["value}${timestamp",{"_index":342,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["via",{"_index":431,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["void",{"_index":206,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["warranti",{"_index":627,"title":{},"body":{"license.html":{}}}],["whether",{"_index":642,"title":{},"body":{"license.html":{}}}],["wit",{"_index":422,"title":{},"body":{"classes/PushgatewayMetricReporter.html":{},"classes/PushgatewayReporterOptions.html":{}}}],["within",{"_index":525,"title":{},"body":{"index.html":{}}}],["without",{"_index":25,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{},"license.html":{}}}],["z0",{"_index":150,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}],["za",{"_index":149,"title":{},"body":{"interfaces/MetricEntry.html":{},"classes/Percentiles.html":{},"classes/PrometheusReporterOptions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/MetricEntry.html":{"url":"interfaces/MetricEntry.html","title":"interface - MetricEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MetricEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PrometheusMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Utility interface to track report-timestamps and -values of metric instances.\nThis is directly linked to the minimum-reporting timeout, which ensures\nthat a certain value gets reported at least in a certain amount of time\ne.g. every minute without the value being having changed. On the other hand\nto not report values that haven't changed.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        lastReport\n                                \n                                \n                                        lastValue\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        lastReport\n                                    \n                                \n                                \n                                    \n                                        lastReport:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    timestamp of the latest report.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastValue\n                                    \n                                \n                                \n                                    \n                                        lastValue:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    value that got reported as latest.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import \"source-map-support\";\n\nimport {\n    BucketCounting,\n    Buckets,\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MILLISECOND,\n    MINUTE,\n    MonotoneCounter,\n    Sampling,\n    StdClock,\n    Taggable,\n    Timer,\n} from \"inspector-metrics\";\n\n/**\n * Utility interface to track report-timestamps and -values of metric instances.\n * This is directly linked to the minimum-reporting timeout, which ensures\n * that a certain value gets reported at least in a certain amount of time\n * e.g. every minute without the value being having changed. On the other hand\n * to not report values that haven't changed.\n *\n * @interface MetricEntry\n */\ninterface MetricEntry {\n    /**\n     * timestamp of the latest report.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n    /**\n     * value that got reported as latest.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype MetricType = \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\";\n\n/**\n * List of values between 0 and 1 representing the percent boundaries for reporting.\n *\n * @export\n * @class Percentiles\n */\nexport class Percentiles {\n\n    /**\n     * Name constant for assigning an instance of this class as metadata to a metric instance.\n     *\n     * @static\n     * @memberof Percentiles\n     */\n    public static readonly METADATA_NAME = \"quantiles\";\n\n    /**\n     * Creates an instance of Percentiles.\n     *\n     * @param {number[]} [boundaries=[0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]]\n     * @memberof Percentiles\n     */\n    constructor(\n        public boundaries: number[] = [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999],\n    ) {\n        boundaries.sort((a: number, b: number) => a - b);\n        boundaries.forEach((boundary) => {\n            if (boundary = 1.0) {\n                throw new Error(\"boundaries cannot be greater or eqaul to 1.0\");\n            }\n        });\n    }\n\n}\n\n/**\n * Configuration object for {@link PrometheusMetricReporter}.\n *\n * @export\n * @class PrometheusReporterOptions\n */\nexport class PrometheusReporterOptions {\n\n    /**\n     * Creates an instance of PrometheusReporterOptions.\n     *\n     * @param {boolean} [includeTimestamp=false]\n     *  indicates if UTC converted timestamps should be appended to each metric data\n     * @param {boolean} [emitComments=true] indicates if comments like HELP and TYPE should be emitted\n     * @param {boolean} [useUntyped=false] indicates if the untyped should always be used\n     * @memberof PrometheusReporterOptions\n     */\n    constructor(\n        public includeTimestamp: boolean = false,\n        public emitComments: boolean = true,\n        public useUntyped: boolean = false,\n    ) {}\n\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n\n    /**\n     * Used to replace unsupported characters from label name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_]\", \"g\");\n    /**\n     * used to replace the first character of a label name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_START_EXCLUSION = [\"_\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n    /**\n     * Used to replace unsupported characters from metric name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_:]\", \"g\");\n    /**\n     * used to replace the first character of a metric name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_START_EXCLUSION = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n\n    /**\n     * Checks if a given string is empty.\n     *\n     * @private\n     * @static\n     * @param {string} value\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isEmpty(value: string): boolean {\n        return !value || value.trim() === \"\";\n    }\n\n    /**\n     * Checks if a given value is a number.\n     *\n     * @private\n     * @static\n     * @param {*} value\n     * @returns {value is number}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isNumber(value: any): value is number {\n        return typeof(value) === \"number\";\n    }\n\n    /**\n     * Configuration for the rendering of the metric report.\n     *\n     * @private\n     * @type {PrometheusReporterOptions}\n     * @memberof PrometheusMetricReporter\n     */\n    private options: PrometheusReporterOptions;\n    /**\n     * Clack instance used to determine the time for reports and minimal-reporting feature.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof PrometheusMetricReporter\n     */\n    private clock: Clock;\n    /**\n     * Timeout in {@link MINUTE}s in which a certain metric needs to be included in the metric report.\n     *\n     * @private\n     * @type {number}\n     * @memberof PrometheusMetricReporter\n     */\n    private minReportingTimeout: number;\n    /**\n     * Common tags for this reporter.\n     *\n     * @private\n     * @type {Map}\n     * @memberof PrometheusMetricReporter\n     */\n    private tags: Map;\n    /**\n     * Keeps track of the reporting states for each metric.\n     *\n     * @private\n     * @type {Map}\n     * @memberof PrometheusMetricReporter\n     */\n    private metricStates: Map = new Map();\n    /**\n     * The prometheus counter type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private counterType: MetricType = \"counter\";\n    /**\n     * The prometheus gauge type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private gaugeType: MetricType = \"gauge\";\n    /**\n     * The prometheus histogram type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private histogramType: MetricType = \"histogram\";\n    /**\n     * The prometheus summary type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private summaryType: MetricType = \"summary\";\n\n    /**\n     * Creates an instance of PrometheusMetricReporter.\n     *\n     * @param {PrometheusReporterOptions} [options=new PrometheusReporterOptions()] configuration options\n     * @param {Map} [tags=new Map()]\n     * @param {Clock} [clock=new StdClock()]\n     * @param {number} [minReportingTimeout=1]\n     *     timeout in minutes a metric need to be included in the report without having changed\n     * @memberof PrometheusMetricReporter\n     */\n    public constructor(\n        options: PrometheusReporterOptions = new PrometheusReporterOptions(),\n        tags: Map = new Map(),\n        clock: Clock = new StdClock(),\n        minReportingTimeout = 1) {\n        super();\n\n        this.options = options;\n        this.tags = tags;\n        this.clock = clock;\n        this.minReportingTimeout = MINUTE.convertTo(minReportingTimeout, MILLISECOND);\n    }\n\n    /**\n     * Gets the tags of this reporter.\n     *\n     * @returns {Map}\n     * @memberof PrometheusMetricReporter\n     */\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    /**\n     * Sets the tags for this reporter.\n     *\n     * @param {Map} tags\n     * @memberof PrometheusMetricReporter\n     */\n    public setTags(tags: Map): void {\n        this.tags = tags;\n    }\n\n    /**\n     * Build the metric reporting string for all registered {@link MetricRegistry}s.\n     *\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public getMetricsString(): string {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            return this.metricRegistries\n                .map((registry) => this.reportMetricRegistry(registry))\n                .join(\"\") + \"\\n\";\n        }\n        return \"\\n\";\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public start(): void {\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public stop(): void {\n    }\n\n    /**\n     * Builds the reporting string for the specifed {@link MetricRegistry}.\n     *\n     * @private\n     * @param {MetricRegistry} r\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private reportMetricRegistry(r: MetricRegistry): string {\n        const now: Date = new Date(this.clock.time().milliseconds);\n\n        const monotoneCounters = this.reportMetrics(r.getMonotoneCounterList(), now,\n            (c: MonotoneCounter) => this.getCounterString(now, c),\n            (c: MonotoneCounter) => c.getCount());\n        const counters = this.reportMetrics(r.getCounterList(), now,\n            (c: Counter) => this.getCounterGaugeString(now, c),\n            (c: Counter) => c.getCount());\n        const gauges = this.reportMetrics(r.getGaugeList(), now,\n            (g: Gauge) => this.getGaugeString(now, g),\n            (g: Gauge) => g.getValue());\n        const histograms = this.reportMetrics(r.getHistogramList(), now,\n            (h: Histogram) => this.getHistogramString(now, h),\n            (h: Histogram) => h.getCount());\n        const meters = this.reportMetrics(r.getMeterList(), now,\n            (m: Meter) => this.getMeterString(now, m),\n            (m: Meter) => m.getCount());\n        const timers = this.reportMetrics(r.getTimerList(), now,\n            (t: Timer) => this.getTimerString(now, t),\n            (t: Timer) => t.getCount());\n\n        return []\n            .concat(monotoneCounters)\n            .concat(counters)\n            .concat(gauges)\n            .concat(histograms)\n            .concat(meters)\n            .concat(timers)\n            .join(\"\\n\");\n    }\n\n    /**\n     * Builds the reporting string for a group of metrics with the same type.\n     *\n     * @private\n     * @template T\n     * @param {T[]} metrics\n     * @param {Date} date the date used to determine the timestamp from.\n     * @param {(metric: T) => string} reportFn function called generate teh reporting string for a single metric\n     * @param {(metric: Metric) => number} lastFn function to determine the latest value of a metric\n     * @returns {string[]}\n     * @memberof PrometheusMetricReporter\n     */\n    private reportMetrics(\n        metrics: T[],\n        date: Date,\n        reportFn: (metric: T) => string,\n        lastFn: (metric: Metric) => number): string[] {\n\n        return metrics\n            .filter((metric) => !(metric as any).id || this.hasChanged((metric as any).id, lastFn(metric), date))\n            .map((metric) => reportFn(metric));\n    }\n\n    /**\n     * Builds the metric string based on the specified type of the metric instance.\n     * Returns an empty string if the metric can't be reported - determined with the\n     * specified function.\n     *\n     * @private\n     * @template T\n     * @param {Date} now\n     * @param {T} metric\n     * @param {MetricType} metricType\n     * @param {(metric: T) => boolean} canReport\n     * @param {((metric: T) => { [key: string]: number | string; })} getValues\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricString(\n        now: Date,\n        metric: T,\n        metricType: MetricType,\n        canReport: (metric: T) => boolean,\n        getValues: (metric: T) => { [key: string]: number | string; },\n        ): string {\n\n        if (!canReport(metric)) {\n            return \"\";\n        }\n\n        const metricName = this.getMetricName(metric);\n        const description = this.getDescription(metric, metricName);\n        const values = getValues(metric);\n        const timestamp = this.getTimestamp(now);\n        const tags = this.buildTags(metric, [\"le\", \"quantile\"]);\n        const tagStr = Object\n            .keys(tags)\n            .map((tag) => `${tag}=\"${tags[tag]}\"`)\n            .join(\",\");\n        let additionalFields = \"\";\n\n        if (metricType === \"histogram\") {\n            additionalFields = this.getBuckets(metric as any, metricName, values[\"count\"] as number, tagStr, timestamp);\n        } else if (metricType === \"summary\") {\n            additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp);\n        }\n\n        if (this.options.useUntyped) {\n            metricType = \"untyped\";\n        }\n\n        let comments = \"\";\n        if (this.options.emitComments === true) {\n            comments =  `# HELP ${metricName} ${description}\\n` +\n                        `# TYPE ${metricName} ${metricType}\\n`;\n        }\n\n        return comments + additionalFields + Object\n            .keys(values)\n            .map((field) => {\n                const fieldStr = PrometheusMetricReporter.isEmpty(field) ? \"\" : `_${field}`;\n                const valueStr = this.getValue(values[field]);\n\n                return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`;\n            })\n            .join(\"\");\n    }\n\n    /**\n     * Builds the description for a metric instance based on the description property.\n     * If no description was specified this function returns ' description'.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getDescription(metric: T, metricName: string): string {\n        let description = metric.getDescription();\n        if (PrometheusMetricReporter.isEmpty(description)) {\n            description = `${metricName} description`;\n        }\n        return description;\n    }\n\n    /**\n     * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n     *\n     * @private\n     * @param {*} value\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getValue(value: any): string {\n        let valueStr = `${value}`;\n\n        if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n            if (value === -Infinity) {\n                valueStr = \"-Inf\";\n            } else if (value === Infinity) {\n                valueStr = \"+Inf\";\n            }\n        }\n\n        return valueStr;\n    }\n\n    /**\n     * Gets the UTC timestamp.\n     *\n     * @private\n     * @param {Date} now\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimestamp(now: Date): string {\n        return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : \"\";\n    }\n\n    /**\n     * Builds the string for bucket data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {number} count\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getBuckets(\n        metric: T,\n        metricName: string,\n        count: number,\n        tagStr: string,\n        timestamp: string): string {\n\n        const buckets: Buckets = metric.getBuckets();\n        if (buckets) {\n            const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n            const bucketStrings: string[] = [];\n\n            metric\n                .getCounts()\n                .forEach((bucketCount: number, boundary: number) => {\n                    bucketStrings.push(\n                        `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`,\n                    );\n                });\n\n            return bucketStrings.join(\"\\n\") +\n                `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds the string for percentile data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getQuantiles(\n        metric: T,\n        metricName: string,\n        tagStr: string,\n        timestamp: string): string {\n\n        let quantiles: Percentiles = metric.getMetadata(Percentiles.METADATA_NAME);\n        if (!quantiles) {\n            quantiles = new Percentiles();\n        }\n        const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n        const snapshot = metric.getSnapshot();\n\n        return quantiles\n            .boundaries\n            .map((boundary) => {\n                const value = snapshot.getValue(boundary);\n                return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`;\n            })\n            .join(\"\\n\") + \"\\n\";\n    }\n\n    /**\n     * Builds the reporting string for monotone counter types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {MonotoneCounter} counter\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getCounterString(now: Date, counter: MonotoneCounter): string {\n        return this.getMetricString(\n            now,\n            counter,\n            this.counterType,\n            (metric) => true,\n            (metric) => ({\n                \"\": counter.getCount() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for counter types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Counter} counter\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getCounterGaugeString(now: Date, counter: Counter): string {\n        return this.getMetricString(\n            now,\n            counter,\n            this.gaugeType,\n            (metric) => true,\n            (metric) => ({\n                \"\": counter.getCount() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for gauge types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Gauge} gauge\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getGaugeString(now: Date, gauge: Gauge): string {\n        return this.getMetricString(\n            now,\n            gauge,\n            this.gaugeType,\n            (metric) => true,\n            (metric) => ({\n                \"\": gauge.getValue(),\n            }));\n    }\n\n    /**\n     * Builds the reporting string for histogram types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Histogram} histogram\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getHistogramString(now: Date, histogram: Histogram): string {\n        return this.getMetricString(\n            now,\n            histogram,\n            this.histogramType,\n            (metric) => !isNaN(histogram.getCount()),\n            (metric) => ({\n                count: histogram.getCount() || 0,\n                sum: histogram.getSum().toString() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for meter types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Meter} meter\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMeterString(now: Date, meter: Meter): string {\n        return this.getMetricString(\n            now,\n            meter,\n            this.gaugeType,\n            (metric) => !isNaN(meter.getCount()),\n            (metric) => ({\n                \"\": meter.getCount() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for timer types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Timer} timer\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimerString(now: Date, timer: Timer): string {\n        return this.getMetricString(\n            now,\n            timer,\n            this.summaryType,\n            (metric) => !isNaN(timer.getCount()),\n            (metric) => ({\n                count: timer.getCount() || 0,\n                sum: timer.getSum().toString() || 0,\n            }));\n    }\n\n    /**\n     * Determines if a metric instance has changed it's value since the last check.\n     * This is always true is the minimal-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {Date} date\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private hasChanged(metricId: number, lastValue: number, date: Date): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                changed = metricEntry.lastReport + this.minReportingTimeout  {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        taggable.getTags().forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        return tags;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Percentiles.html":{"url":"classes/Percentiles.html","title":"class - Percentiles","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Percentiles\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PrometheusMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                List of values between 0 and 1 representing the percent boundaries for reporting.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                boundaries\n                            \n                            \n                                    Static\n                                    Readonly\n                                METADATA_NAME\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(boundaries: number[])\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/PrometheusMetricReporter.ts:68\n                            \n                        \n\n                \n                    \n                            Creates an instance of Percentiles.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        boundaries\n                                                  \n                                                        \n                                                                    number[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            boundaries\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        boundaries:     number[]\n\n                    \n                \n                    \n                        \n                            Type :     number[]\n\n                        \n                    \n                    \n                        \n                            Default value : [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PrometheusMetricReporter.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                                Readonly\n                            METADATA_NAME\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        METADATA_NAME:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"quantiles\"\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PrometheusMetricReporter.ts:68\n                            \n                        \n\n                \n                    \n                        Name constant for assigning an instance of this class as metadata to a metric instance.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support\";\n\nimport {\n    BucketCounting,\n    Buckets,\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MILLISECOND,\n    MINUTE,\n    MonotoneCounter,\n    Sampling,\n    StdClock,\n    Taggable,\n    Timer,\n} from \"inspector-metrics\";\n\n/**\n * Utility interface to track report-timestamps and -values of metric instances.\n * This is directly linked to the minimum-reporting timeout, which ensures\n * that a certain value gets reported at least in a certain amount of time\n * e.g. every minute without the value being having changed. On the other hand\n * to not report values that haven't changed.\n *\n * @interface MetricEntry\n */\ninterface MetricEntry {\n    /**\n     * timestamp of the latest report.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n    /**\n     * value that got reported as latest.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype MetricType = \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\";\n\n/**\n * List of values between 0 and 1 representing the percent boundaries for reporting.\n *\n * @export\n * @class Percentiles\n */\nexport class Percentiles {\n\n    /**\n     * Name constant for assigning an instance of this class as metadata to a metric instance.\n     *\n     * @static\n     * @memberof Percentiles\n     */\n    public static readonly METADATA_NAME = \"quantiles\";\n\n    /**\n     * Creates an instance of Percentiles.\n     *\n     * @param {number[]} [boundaries=[0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]]\n     * @memberof Percentiles\n     */\n    constructor(\n        public boundaries: number[] = [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999],\n    ) {\n        boundaries.sort((a: number, b: number) => a - b);\n        boundaries.forEach((boundary) => {\n            if (boundary = 1.0) {\n                throw new Error(\"boundaries cannot be greater or eqaul to 1.0\");\n            }\n        });\n    }\n\n}\n\n/**\n * Configuration object for {@link PrometheusMetricReporter}.\n *\n * @export\n * @class PrometheusReporterOptions\n */\nexport class PrometheusReporterOptions {\n\n    /**\n     * Creates an instance of PrometheusReporterOptions.\n     *\n     * @param {boolean} [includeTimestamp=false]\n     *  indicates if UTC converted timestamps should be appended to each metric data\n     * @param {boolean} [emitComments=true] indicates if comments like HELP and TYPE should be emitted\n     * @param {boolean} [useUntyped=false] indicates if the untyped should always be used\n     * @memberof PrometheusReporterOptions\n     */\n    constructor(\n        public includeTimestamp: boolean = false,\n        public emitComments: boolean = true,\n        public useUntyped: boolean = false,\n    ) {}\n\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n\n    /**\n     * Used to replace unsupported characters from label name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_]\", \"g\");\n    /**\n     * used to replace the first character of a label name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_START_EXCLUSION = [\"_\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n    /**\n     * Used to replace unsupported characters from metric name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_:]\", \"g\");\n    /**\n     * used to replace the first character of a metric name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_START_EXCLUSION = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n\n    /**\n     * Checks if a given string is empty.\n     *\n     * @private\n     * @static\n     * @param {string} value\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isEmpty(value: string): boolean {\n        return !value || value.trim() === \"\";\n    }\n\n    /**\n     * Checks if a given value is a number.\n     *\n     * @private\n     * @static\n     * @param {*} value\n     * @returns {value is number}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isNumber(value: any): value is number {\n        return typeof(value) === \"number\";\n    }\n\n    /**\n     * Configuration for the rendering of the metric report.\n     *\n     * @private\n     * @type {PrometheusReporterOptions}\n     * @memberof PrometheusMetricReporter\n     */\n    private options: PrometheusReporterOptions;\n    /**\n     * Clack instance used to determine the time for reports and minimal-reporting feature.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof PrometheusMetricReporter\n     */\n    private clock: Clock;\n    /**\n     * Timeout in {@link MINUTE}s in which a certain metric needs to be included in the metric report.\n     *\n     * @private\n     * @type {number}\n     * @memberof PrometheusMetricReporter\n     */\n    private minReportingTimeout: number;\n    /**\n     * Common tags for this reporter.\n     *\n     * @private\n     * @type {Map}\n     * @memberof PrometheusMetricReporter\n     */\n    private tags: Map;\n    /**\n     * Keeps track of the reporting states for each metric.\n     *\n     * @private\n     * @type {Map}\n     * @memberof PrometheusMetricReporter\n     */\n    private metricStates: Map = new Map();\n    /**\n     * The prometheus counter type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private counterType: MetricType = \"counter\";\n    /**\n     * The prometheus gauge type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private gaugeType: MetricType = \"gauge\";\n    /**\n     * The prometheus histogram type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private histogramType: MetricType = \"histogram\";\n    /**\n     * The prometheus summary type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private summaryType: MetricType = \"summary\";\n\n    /**\n     * Creates an instance of PrometheusMetricReporter.\n     *\n     * @param {PrometheusReporterOptions} [options=new PrometheusReporterOptions()] configuration options\n     * @param {Map} [tags=new Map()]\n     * @param {Clock} [clock=new StdClock()]\n     * @param {number} [minReportingTimeout=1]\n     *     timeout in minutes a metric need to be included in the report without having changed\n     * @memberof PrometheusMetricReporter\n     */\n    public constructor(\n        options: PrometheusReporterOptions = new PrometheusReporterOptions(),\n        tags: Map = new Map(),\n        clock: Clock = new StdClock(),\n        minReportingTimeout = 1) {\n        super();\n\n        this.options = options;\n        this.tags = tags;\n        this.clock = clock;\n        this.minReportingTimeout = MINUTE.convertTo(minReportingTimeout, MILLISECOND);\n    }\n\n    /**\n     * Gets the tags of this reporter.\n     *\n     * @returns {Map}\n     * @memberof PrometheusMetricReporter\n     */\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    /**\n     * Sets the tags for this reporter.\n     *\n     * @param {Map} tags\n     * @memberof PrometheusMetricReporter\n     */\n    public setTags(tags: Map): void {\n        this.tags = tags;\n    }\n\n    /**\n     * Build the metric reporting string for all registered {@link MetricRegistry}s.\n     *\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public getMetricsString(): string {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            return this.metricRegistries\n                .map((registry) => this.reportMetricRegistry(registry))\n                .join(\"\") + \"\\n\";\n        }\n        return \"\\n\";\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public start(): void {\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public stop(): void {\n    }\n\n    /**\n     * Builds the reporting string for the specifed {@link MetricRegistry}.\n     *\n     * @private\n     * @param {MetricRegistry} r\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private reportMetricRegistry(r: MetricRegistry): string {\n        const now: Date = new Date(this.clock.time().milliseconds);\n\n        const monotoneCounters = this.reportMetrics(r.getMonotoneCounterList(), now,\n            (c: MonotoneCounter) => this.getCounterString(now, c),\n            (c: MonotoneCounter) => c.getCount());\n        const counters = this.reportMetrics(r.getCounterList(), now,\n            (c: Counter) => this.getCounterGaugeString(now, c),\n            (c: Counter) => c.getCount());\n        const gauges = this.reportMetrics(r.getGaugeList(), now,\n            (g: Gauge) => this.getGaugeString(now, g),\n            (g: Gauge) => g.getValue());\n        const histograms = this.reportMetrics(r.getHistogramList(), now,\n            (h: Histogram) => this.getHistogramString(now, h),\n            (h: Histogram) => h.getCount());\n        const meters = this.reportMetrics(r.getMeterList(), now,\n            (m: Meter) => this.getMeterString(now, m),\n            (m: Meter) => m.getCount());\n        const timers = this.reportMetrics(r.getTimerList(), now,\n            (t: Timer) => this.getTimerString(now, t),\n            (t: Timer) => t.getCount());\n\n        return []\n            .concat(monotoneCounters)\n            .concat(counters)\n            .concat(gauges)\n            .concat(histograms)\n            .concat(meters)\n            .concat(timers)\n            .join(\"\\n\");\n    }\n\n    /**\n     * Builds the reporting string for a group of metrics with the same type.\n     *\n     * @private\n     * @template T\n     * @param {T[]} metrics\n     * @param {Date} date the date used to determine the timestamp from.\n     * @param {(metric: T) => string} reportFn function called generate teh reporting string for a single metric\n     * @param {(metric: Metric) => number} lastFn function to determine the latest value of a metric\n     * @returns {string[]}\n     * @memberof PrometheusMetricReporter\n     */\n    private reportMetrics(\n        metrics: T[],\n        date: Date,\n        reportFn: (metric: T) => string,\n        lastFn: (metric: Metric) => number): string[] {\n\n        return metrics\n            .filter((metric) => !(metric as any).id || this.hasChanged((metric as any).id, lastFn(metric), date))\n            .map((metric) => reportFn(metric));\n    }\n\n    /**\n     * Builds the metric string based on the specified type of the metric instance.\n     * Returns an empty string if the metric can't be reported - determined with the\n     * specified function.\n     *\n     * @private\n     * @template T\n     * @param {Date} now\n     * @param {T} metric\n     * @param {MetricType} metricType\n     * @param {(metric: T) => boolean} canReport\n     * @param {((metric: T) => { [key: string]: number | string; })} getValues\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricString(\n        now: Date,\n        metric: T,\n        metricType: MetricType,\n        canReport: (metric: T) => boolean,\n        getValues: (metric: T) => { [key: string]: number | string; },\n        ): string {\n\n        if (!canReport(metric)) {\n            return \"\";\n        }\n\n        const metricName = this.getMetricName(metric);\n        const description = this.getDescription(metric, metricName);\n        const values = getValues(metric);\n        const timestamp = this.getTimestamp(now);\n        const tags = this.buildTags(metric, [\"le\", \"quantile\"]);\n        const tagStr = Object\n            .keys(tags)\n            .map((tag) => `${tag}=\"${tags[tag]}\"`)\n            .join(\",\");\n        let additionalFields = \"\";\n\n        if (metricType === \"histogram\") {\n            additionalFields = this.getBuckets(metric as any, metricName, values[\"count\"] as number, tagStr, timestamp);\n        } else if (metricType === \"summary\") {\n            additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp);\n        }\n\n        if (this.options.useUntyped) {\n            metricType = \"untyped\";\n        }\n\n        let comments = \"\";\n        if (this.options.emitComments === true) {\n            comments =  `# HELP ${metricName} ${description}\\n` +\n                        `# TYPE ${metricName} ${metricType}\\n`;\n        }\n\n        return comments + additionalFields + Object\n            .keys(values)\n            .map((field) => {\n                const fieldStr = PrometheusMetricReporter.isEmpty(field) ? \"\" : `_${field}`;\n                const valueStr = this.getValue(values[field]);\n\n                return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`;\n            })\n            .join(\"\");\n    }\n\n    /**\n     * Builds the description for a metric instance based on the description property.\n     * If no description was specified this function returns ' description'.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getDescription(metric: T, metricName: string): string {\n        let description = metric.getDescription();\n        if (PrometheusMetricReporter.isEmpty(description)) {\n            description = `${metricName} description`;\n        }\n        return description;\n    }\n\n    /**\n     * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n     *\n     * @private\n     * @param {*} value\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getValue(value: any): string {\n        let valueStr = `${value}`;\n\n        if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n            if (value === -Infinity) {\n                valueStr = \"-Inf\";\n            } else if (value === Infinity) {\n                valueStr = \"+Inf\";\n            }\n        }\n\n        return valueStr;\n    }\n\n    /**\n     * Gets the UTC timestamp.\n     *\n     * @private\n     * @param {Date} now\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimestamp(now: Date): string {\n        return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : \"\";\n    }\n\n    /**\n     * Builds the string for bucket data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {number} count\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getBuckets(\n        metric: T,\n        metricName: string,\n        count: number,\n        tagStr: string,\n        timestamp: string): string {\n\n        const buckets: Buckets = metric.getBuckets();\n        if (buckets) {\n            const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n            const bucketStrings: string[] = [];\n\n            metric\n                .getCounts()\n                .forEach((bucketCount: number, boundary: number) => {\n                    bucketStrings.push(\n                        `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`,\n                    );\n                });\n\n            return bucketStrings.join(\"\\n\") +\n                `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds the string for percentile data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getQuantiles(\n        metric: T,\n        metricName: string,\n        tagStr: string,\n        timestamp: string): string {\n\n        let quantiles: Percentiles = metric.getMetadata(Percentiles.METADATA_NAME);\n        if (!quantiles) {\n            quantiles = new Percentiles();\n        }\n        const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n        const snapshot = metric.getSnapshot();\n\n        return quantiles\n            .boundaries\n            .map((boundary) => {\n                const value = snapshot.getValue(boundary);\n                return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`;\n            })\n            .join(\"\\n\") + \"\\n\";\n    }\n\n    /**\n     * Builds the reporting string for monotone counter types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {MonotoneCounter} counter\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getCounterString(now: Date, counter: MonotoneCounter): string {\n        return this.getMetricString(\n            now,\n            counter,\n            this.counterType,\n            (metric) => true,\n            (metric) => ({\n                \"\": counter.getCount() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for counter types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Counter} counter\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getCounterGaugeString(now: Date, counter: Counter): string {\n        return this.getMetricString(\n            now,\n            counter,\n            this.gaugeType,\n            (metric) => true,\n            (metric) => ({\n                \"\": counter.getCount() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for gauge types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Gauge} gauge\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getGaugeString(now: Date, gauge: Gauge): string {\n        return this.getMetricString(\n            now,\n            gauge,\n            this.gaugeType,\n            (metric) => true,\n            (metric) => ({\n                \"\": gauge.getValue(),\n            }));\n    }\n\n    /**\n     * Builds the reporting string for histogram types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Histogram} histogram\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getHistogramString(now: Date, histogram: Histogram): string {\n        return this.getMetricString(\n            now,\n            histogram,\n            this.histogramType,\n            (metric) => !isNaN(histogram.getCount()),\n            (metric) => ({\n                count: histogram.getCount() || 0,\n                sum: histogram.getSum().toString() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for meter types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Meter} meter\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMeterString(now: Date, meter: Meter): string {\n        return this.getMetricString(\n            now,\n            meter,\n            this.gaugeType,\n            (metric) => !isNaN(meter.getCount()),\n            (metric) => ({\n                \"\": meter.getCount() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for timer types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Timer} timer\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimerString(now: Date, timer: Timer): string {\n        return this.getMetricString(\n            now,\n            timer,\n            this.summaryType,\n            (metric) => !isNaN(timer.getCount()),\n            (metric) => ({\n                count: timer.getCount() || 0,\n                sum: timer.getSum().toString() || 0,\n            }));\n    }\n\n    /**\n     * Determines if a metric instance has changed it's value since the last check.\n     * This is always true is the minimal-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {Date} date\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private hasChanged(metricId: number, lastValue: number, date: Date): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                changed = metricEntry.lastReport + this.minReportingTimeout  {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        taggable.getTags().forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        return tags;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PrometheusReporterOptions.html":{"url":"classes/PrometheusReporterOptions.html","title":"class - PrometheusReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PrometheusReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PrometheusMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object for PrometheusMetricReporter.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                emitComments\n                            \n                            \n                                    Public\n                                includeTimestamp\n                            \n                            \n                                    Public\n                                useUntyped\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(includeTimestamp: boolean, emitComments: boolean, useUntyped: boolean)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/PrometheusMetricReporter.ts:98\n                            \n                        \n\n                \n                    \n                            Creates an instance of PrometheusReporterOptions.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        includeTimestamp\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                indicates if UTC converted timestamps should be appended to each metric data\n\n                                                        \n                                                \n                                                \n                                                        emitComments\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                indicates if comments like HELP and TYPE should be emitted\n\n                                                        \n                                                \n                                                \n                                                        useUntyped\n                                                  \n                                                        \n                                                                    boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                indicates if the untyped should always be used\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            emitComments\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        emitComments:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : true\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PrometheusMetricReporter.ts:111\n                            \n                        \n\n                \n                    \n                        indicates if comments like HELP and TYPE should be emitted\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            includeTimestamp\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        includeTimestamp:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PrometheusMetricReporter.ts:110\n                            \n                        \n\n                \n                    \n                        indicates if UTC converted timestamps should be appended to each metric data\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            useUntyped\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        useUntyped:     boolean\n\n                    \n                \n                    \n                        \n                            Type :     boolean\n\n                        \n                    \n                    \n                        \n                            Default value : false\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PrometheusMetricReporter.ts:112\n                            \n                        \n\n                \n                    \n                        indicates if the untyped should always be used\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support\";\n\nimport {\n    BucketCounting,\n    Buckets,\n    Clock,\n    Counter,\n    Gauge,\n    Histogram,\n    Meter,\n    Metric,\n    MetricRegistry,\n    MetricReporter,\n    MILLISECOND,\n    MINUTE,\n    MonotoneCounter,\n    Sampling,\n    StdClock,\n    Taggable,\n    Timer,\n} from \"inspector-metrics\";\n\n/**\n * Utility interface to track report-timestamps and -values of metric instances.\n * This is directly linked to the minimum-reporting timeout, which ensures\n * that a certain value gets reported at least in a certain amount of time\n * e.g. every minute without the value being having changed. On the other hand\n * to not report values that haven't changed.\n *\n * @interface MetricEntry\n */\ninterface MetricEntry {\n    /**\n     * timestamp of the latest report.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastReport: number;\n    /**\n     * value that got reported as latest.\n     *\n     * @type {number}\n     * @memberof MetricEntry\n     */\n    lastValue: number;\n}\n\n/**\n * Enumeration used to determine valid metric types of prometheus.\n */\ntype MetricType = \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\";\n\n/**\n * List of values between 0 and 1 representing the percent boundaries for reporting.\n *\n * @export\n * @class Percentiles\n */\nexport class Percentiles {\n\n    /**\n     * Name constant for assigning an instance of this class as metadata to a metric instance.\n     *\n     * @static\n     * @memberof Percentiles\n     */\n    public static readonly METADATA_NAME = \"quantiles\";\n\n    /**\n     * Creates an instance of Percentiles.\n     *\n     * @param {number[]} [boundaries=[0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999]]\n     * @memberof Percentiles\n     */\n    constructor(\n        public boundaries: number[] = [0.01, 0.05, 0.5, 0.75, 0.9, 0.95, 0.98, 0.99, 0.999],\n    ) {\n        boundaries.sort((a: number, b: number) => a - b);\n        boundaries.forEach((boundary) => {\n            if (boundary = 1.0) {\n                throw new Error(\"boundaries cannot be greater or eqaul to 1.0\");\n            }\n        });\n    }\n\n}\n\n/**\n * Configuration object for {@link PrometheusMetricReporter}.\n *\n * @export\n * @class PrometheusReporterOptions\n */\nexport class PrometheusReporterOptions {\n\n    /**\n     * Creates an instance of PrometheusReporterOptions.\n     *\n     * @param {boolean} [includeTimestamp=false]\n     *  indicates if UTC converted timestamps should be appended to each metric data\n     * @param {boolean} [emitComments=true] indicates if comments like HELP and TYPE should be emitted\n     * @param {boolean} [useUntyped=false] indicates if the untyped should always be used\n     * @memberof PrometheusReporterOptions\n     */\n    constructor(\n        public includeTimestamp: boolean = false,\n        public emitComments: boolean = true,\n        public useUntyped: boolean = false,\n    ) {}\n\n}\n\n/**\n * Metric reporter for prometheus.\n * This reporter only support the text format of prometheus / open-metrics.\n *\n * To get the metric report call the {@link PrometheusMetricReporter#getMetricsString} method.\n *\n * @see https://prometheus.io/docs/concepts/\n * @see https://prometheus.io/docs/instrumenting/exposition_formats/#text-based-format\n * @export\n * @class PrometheusMetricReporter\n * @extends {MetricReporter}\n */\nexport class PrometheusMetricReporter extends MetricReporter {\n\n    /**\n     * Used to replace unsupported characters from label name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_]\", \"g\");\n    /**\n     * used to replace the first character of a label name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly LABEL_NAME_START_EXCLUSION = [\"_\", \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n    /**\n     * Used to replace unsupported characters from metric name.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_REPLACEMENT_REGEXP = new RegExp(\"[^a-zA-Z0-9_:]\", \"g\");\n    /**\n     * used to replace the first character of a metric name if needed.\n     *\n     * @private\n     * @static\n     * @memberof PrometheusMetricReporter\n     */\n    private static readonly METRIC_NAME_START_EXCLUSION = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].sort();\n\n    /**\n     * Checks if a given string is empty.\n     *\n     * @private\n     * @static\n     * @param {string} value\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isEmpty(value: string): boolean {\n        return !value || value.trim() === \"\";\n    }\n\n    /**\n     * Checks if a given value is a number.\n     *\n     * @private\n     * @static\n     * @param {*} value\n     * @returns {value is number}\n     * @memberof PrometheusMetricReporter\n     */\n    private static isNumber(value: any): value is number {\n        return typeof(value) === \"number\";\n    }\n\n    /**\n     * Configuration for the rendering of the metric report.\n     *\n     * @private\n     * @type {PrometheusReporterOptions}\n     * @memberof PrometheusMetricReporter\n     */\n    private options: PrometheusReporterOptions;\n    /**\n     * Clack instance used to determine the time for reports and minimal-reporting feature.\n     *\n     * @private\n     * @type {Clock}\n     * @memberof PrometheusMetricReporter\n     */\n    private clock: Clock;\n    /**\n     * Timeout in {@link MINUTE}s in which a certain metric needs to be included in the metric report.\n     *\n     * @private\n     * @type {number}\n     * @memberof PrometheusMetricReporter\n     */\n    private minReportingTimeout: number;\n    /**\n     * Common tags for this reporter.\n     *\n     * @private\n     * @type {Map}\n     * @memberof PrometheusMetricReporter\n     */\n    private tags: Map;\n    /**\n     * Keeps track of the reporting states for each metric.\n     *\n     * @private\n     * @type {Map}\n     * @memberof PrometheusMetricReporter\n     */\n    private metricStates: Map = new Map();\n    /**\n     * The prometheus counter type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private counterType: MetricType = \"counter\";\n    /**\n     * The prometheus gauge type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private gaugeType: MetricType = \"gauge\";\n    /**\n     * The prometheus histogram type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private histogramType: MetricType = \"histogram\";\n    /**\n     * The prometheus summary type string.\n     *\n     * @private\n     * @type {MetricType}\n     * @memberof PrometheusMetricReporter\n     */\n    private summaryType: MetricType = \"summary\";\n\n    /**\n     * Creates an instance of PrometheusMetricReporter.\n     *\n     * @param {PrometheusReporterOptions} [options=new PrometheusReporterOptions()] configuration options\n     * @param {Map} [tags=new Map()]\n     * @param {Clock} [clock=new StdClock()]\n     * @param {number} [minReportingTimeout=1]\n     *     timeout in minutes a metric need to be included in the report without having changed\n     * @memberof PrometheusMetricReporter\n     */\n    public constructor(\n        options: PrometheusReporterOptions = new PrometheusReporterOptions(),\n        tags: Map = new Map(),\n        clock: Clock = new StdClock(),\n        minReportingTimeout = 1) {\n        super();\n\n        this.options = options;\n        this.tags = tags;\n        this.clock = clock;\n        this.minReportingTimeout = MINUTE.convertTo(minReportingTimeout, MILLISECOND);\n    }\n\n    /**\n     * Gets the tags of this reporter.\n     *\n     * @returns {Map}\n     * @memberof PrometheusMetricReporter\n     */\n    public getTags(): Map {\n        return this.tags;\n    }\n\n    /**\n     * Sets the tags for this reporter.\n     *\n     * @param {Map} tags\n     * @memberof PrometheusMetricReporter\n     */\n    public setTags(tags: Map): void {\n        this.tags = tags;\n    }\n\n    /**\n     * Build the metric reporting string for all registered {@link MetricRegistry}s.\n     *\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    public getMetricsString(): string {\n        if (this.metricRegistries && this.metricRegistries.length > 0) {\n            return this.metricRegistries\n                .map((registry) => this.reportMetricRegistry(registry))\n                .join(\"\") + \"\\n\";\n        }\n        return \"\\n\";\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public start(): void {\n    }\n\n    /**\n     * Does nothing.\n     *\n     * @memberof PrometheusMetricReporter\n     */\n    public stop(): void {\n    }\n\n    /**\n     * Builds the reporting string for the specifed {@link MetricRegistry}.\n     *\n     * @private\n     * @param {MetricRegistry} r\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private reportMetricRegistry(r: MetricRegistry): string {\n        const now: Date = new Date(this.clock.time().milliseconds);\n\n        const monotoneCounters = this.reportMetrics(r.getMonotoneCounterList(), now,\n            (c: MonotoneCounter) => this.getCounterString(now, c),\n            (c: MonotoneCounter) => c.getCount());\n        const counters = this.reportMetrics(r.getCounterList(), now,\n            (c: Counter) => this.getCounterGaugeString(now, c),\n            (c: Counter) => c.getCount());\n        const gauges = this.reportMetrics(r.getGaugeList(), now,\n            (g: Gauge) => this.getGaugeString(now, g),\n            (g: Gauge) => g.getValue());\n        const histograms = this.reportMetrics(r.getHistogramList(), now,\n            (h: Histogram) => this.getHistogramString(now, h),\n            (h: Histogram) => h.getCount());\n        const meters = this.reportMetrics(r.getMeterList(), now,\n            (m: Meter) => this.getMeterString(now, m),\n            (m: Meter) => m.getCount());\n        const timers = this.reportMetrics(r.getTimerList(), now,\n            (t: Timer) => this.getTimerString(now, t),\n            (t: Timer) => t.getCount());\n\n        return []\n            .concat(monotoneCounters)\n            .concat(counters)\n            .concat(gauges)\n            .concat(histograms)\n            .concat(meters)\n            .concat(timers)\n            .join(\"\\n\");\n    }\n\n    /**\n     * Builds the reporting string for a group of metrics with the same type.\n     *\n     * @private\n     * @template T\n     * @param {T[]} metrics\n     * @param {Date} date the date used to determine the timestamp from.\n     * @param {(metric: T) => string} reportFn function called generate teh reporting string for a single metric\n     * @param {(metric: Metric) => number} lastFn function to determine the latest value of a metric\n     * @returns {string[]}\n     * @memberof PrometheusMetricReporter\n     */\n    private reportMetrics(\n        metrics: T[],\n        date: Date,\n        reportFn: (metric: T) => string,\n        lastFn: (metric: Metric) => number): string[] {\n\n        return metrics\n            .filter((metric) => !(metric as any).id || this.hasChanged((metric as any).id, lastFn(metric), date))\n            .map((metric) => reportFn(metric));\n    }\n\n    /**\n     * Builds the metric string based on the specified type of the metric instance.\n     * Returns an empty string if the metric can't be reported - determined with the\n     * specified function.\n     *\n     * @private\n     * @template T\n     * @param {Date} now\n     * @param {T} metric\n     * @param {MetricType} metricType\n     * @param {(metric: T) => boolean} canReport\n     * @param {((metric: T) => { [key: string]: number | string; })} getValues\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMetricString(\n        now: Date,\n        metric: T,\n        metricType: MetricType,\n        canReport: (metric: T) => boolean,\n        getValues: (metric: T) => { [key: string]: number | string; },\n        ): string {\n\n        if (!canReport(metric)) {\n            return \"\";\n        }\n\n        const metricName = this.getMetricName(metric);\n        const description = this.getDescription(metric, metricName);\n        const values = getValues(metric);\n        const timestamp = this.getTimestamp(now);\n        const tags = this.buildTags(metric, [\"le\", \"quantile\"]);\n        const tagStr = Object\n            .keys(tags)\n            .map((tag) => `${tag}=\"${tags[tag]}\"`)\n            .join(\",\");\n        let additionalFields = \"\";\n\n        if (metricType === \"histogram\") {\n            additionalFields = this.getBuckets(metric as any, metricName, values[\"count\"] as number, tagStr, timestamp);\n        } else if (metricType === \"summary\") {\n            additionalFields = this.getQuantiles(metric as any, metricName, tagStr, timestamp);\n        }\n\n        if (this.options.useUntyped) {\n            metricType = \"untyped\";\n        }\n\n        let comments = \"\";\n        if (this.options.emitComments === true) {\n            comments =  `# HELP ${metricName} ${description}\\n` +\n                        `# TYPE ${metricName} ${metricType}\\n`;\n        }\n\n        return comments + additionalFields + Object\n            .keys(values)\n            .map((field) => {\n                const fieldStr = PrometheusMetricReporter.isEmpty(field) ? \"\" : `_${field}`;\n                const valueStr = this.getValue(values[field]);\n\n                return `${metricName}${fieldStr}{${tagStr}} ${valueStr}${timestamp}\\n`;\n            })\n            .join(\"\");\n    }\n\n    /**\n     * Builds the description for a metric instance based on the description property.\n     * If no description was specified this function returns ' description'.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getDescription(metric: T, metricName: string): string {\n        let description = metric.getDescription();\n        if (PrometheusMetricReporter.isEmpty(description)) {\n            description = `${metricName} description`;\n        }\n        return description;\n    }\n\n    /**\n     * Gets a numeric value in the correct format (mainly used to format +Inf and -Inf)\n     *\n     * @private\n     * @param {*} value\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getValue(value: any): string {\n        let valueStr = `${value}`;\n\n        if (PrometheusMetricReporter.isNumber(value) && !Number.isFinite(value)) {\n            if (value === -Infinity) {\n                valueStr = \"-Inf\";\n            } else if (value === Infinity) {\n                valueStr = \"+Inf\";\n            }\n        }\n\n        return valueStr;\n    }\n\n    /**\n     * Gets the UTC timestamp.\n     *\n     * @private\n     * @param {Date} now\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimestamp(now: Date): string {\n        return this.options.includeTimestamp ? ` ${now.getUTCMilliseconds()}` : \"\";\n    }\n\n    /**\n     * Builds the string for bucket data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {number} count\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getBuckets(\n        metric: T,\n        metricName: string,\n        count: number,\n        tagStr: string,\n        timestamp: string): string {\n\n        const buckets: Buckets = metric.getBuckets();\n        if (buckets) {\n            const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n            const bucketStrings: string[] = [];\n\n            metric\n                .getCounts()\n                .forEach((bucketCount: number, boundary: number) => {\n                    bucketStrings.push(\n                        `${metricName}_bucket{${tagStr}${tagPrefix}le=\"${boundary}\"} ${bucketCount}${timestamp}`,\n                    );\n                });\n\n            return bucketStrings.join(\"\\n\") +\n                `\\n${metricName}_bucket{${tagStr}${tagPrefix}le=\"+Inf\"} ${count}${timestamp}\\n`;\n        }\n\n        return \"\";\n    }\n\n    /**\n     * Builds the string for percentile data lines.\n     *\n     * @private\n     * @template T\n     * @param {T} metric\n     * @param {string} metricName\n     * @param {string} tagStr\n     * @param {string} timestamp\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getQuantiles(\n        metric: T,\n        metricName: string,\n        tagStr: string,\n        timestamp: string): string {\n\n        let quantiles: Percentiles = metric.getMetadata(Percentiles.METADATA_NAME);\n        if (!quantiles) {\n            quantiles = new Percentiles();\n        }\n        const tagPrefix = !PrometheusMetricReporter.isEmpty(tagStr) ? \",\" : \"\";\n        const snapshot = metric.getSnapshot();\n\n        return quantiles\n            .boundaries\n            .map((boundary) => {\n                const value = snapshot.getValue(boundary);\n                return `${metricName}{${tagStr}${tagPrefix}quantile=\"${boundary}\"} ${value}${timestamp}`;\n            })\n            .join(\"\\n\") + \"\\n\";\n    }\n\n    /**\n     * Builds the reporting string for monotone counter types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {MonotoneCounter} counter\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getCounterString(now: Date, counter: MonotoneCounter): string {\n        return this.getMetricString(\n            now,\n            counter,\n            this.counterType,\n            (metric) => true,\n            (metric) => ({\n                \"\": counter.getCount() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for counter types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Counter} counter\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getCounterGaugeString(now: Date, counter: Counter): string {\n        return this.getMetricString(\n            now,\n            counter,\n            this.gaugeType,\n            (metric) => true,\n            (metric) => ({\n                \"\": counter.getCount() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for gauge types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Gauge} gauge\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getGaugeString(now: Date, gauge: Gauge): string {\n        return this.getMetricString(\n            now,\n            gauge,\n            this.gaugeType,\n            (metric) => true,\n            (metric) => ({\n                \"\": gauge.getValue(),\n            }));\n    }\n\n    /**\n     * Builds the reporting string for histogram types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Histogram} histogram\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getHistogramString(now: Date, histogram: Histogram): string {\n        return this.getMetricString(\n            now,\n            histogram,\n            this.histogramType,\n            (metric) => !isNaN(histogram.getCount()),\n            (metric) => ({\n                count: histogram.getCount() || 0,\n                sum: histogram.getSum().toString() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for meter types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Meter} meter\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getMeterString(now: Date, meter: Meter): string {\n        return this.getMetricString(\n            now,\n            meter,\n            this.gaugeType,\n            (metric) => !isNaN(meter.getCount()),\n            (metric) => ({\n                \"\": meter.getCount() || 0,\n            }));\n    }\n\n    /**\n     * Builds the reporting string for timer types using {@link PrometheusMetricReporter#getMetricString}.\n     *\n     * @private\n     * @param {Date} now\n     * @param {Timer} timer\n     * @returns {string}\n     * @memberof PrometheusMetricReporter\n     */\n    private getTimerString(now: Date, timer: Timer): string {\n        return this.getMetricString(\n            now,\n            timer,\n            this.summaryType,\n            (metric) => !isNaN(timer.getCount()),\n            (metric) => ({\n                count: timer.getCount() || 0,\n                sum: timer.getSum().toString() || 0,\n            }));\n    }\n\n    /**\n     * Determines if a metric instance has changed it's value since the last check.\n     * This is always true is the minimal-reporting timeout was reached.\n     *\n     * @private\n     * @param {number} metricId\n     * @param {number} lastValue\n     * @param {Date} date\n     * @returns {boolean}\n     * @memberof PrometheusMetricReporter\n     */\n    private hasChanged(metricId: number, lastValue: number, date: Date): boolean {\n        let changed = true;\n        let metricEntry = {\n            lastReport: 0,\n            lastValue,\n        };\n        if (this.metricStates.has(metricId)) {\n            metricEntry = this.metricStates.get(metricId);\n            changed = metricEntry.lastValue !== lastValue;\n            if (!changed) {\n                changed = metricEntry.lastReport + this.minReportingTimeout  {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        taggable.getTags().forEach((value, key) => {\n            const normalizedKey = key.replace(PrometheusMetricReporter.LABEL_NAME_REPLACEMENT_REGEXP, \"_\");\n            if (exclude.indexOf(normalizedKey) === -1 &&\n                PrometheusMetricReporter.LABEL_NAME_START_EXCLUSION.indexOf(normalizedKey.charAt(0)) === -1) {\n                tags[normalizedKey] = value;\n            }\n        });\n        return tags;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PushgatewayMetricReporter.html":{"url":"classes/PushgatewayMetricReporter.html","title":"class - PushgatewayMetricReporter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PushgatewayMetricReporter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PushgatewayMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Metric reporter for prometheus's pushgateway.\nSimply sends the output of the provided PrometheusMetricReporter\nto the configurated pushgateway using the text format.\n\n            \n\n            \n                Extends\n            \n            \n                    MetricReporter\n            \n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                interval\n                            \n                            \n                                    Private\n                                logger\n                            \n                            \n                                    Private\n                                options\n                            \n                            \n                                    Private\n                                reporter\n                            \n                            \n                                    Private\n                                scheduler\n                            \n                            \n                                    Private\n                                timer\n                            \n                            \n                                    Private\n                                unit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                report\n                            \n                            \n                                    Public\n                                start\n                            \n                            \n                                    Public\n                                stop\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \n                                Public\n                        constructor(reporter: PrometheusMetricReporter, options: PushgatewayReporterOptions, interval: number, unit: TimeUnit, logger: Logger, scheduler: Scheduler)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/PushgatewayMetricReporter.ts:110\n                            \n                        \n\n                \n                    \n                            Creates an instance of PushgatewayMetricReporter.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reporter\n                                                  \n                                                        \n                                                                    PrometheusMetricReporter\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                    PushgatewayReporterOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        interval\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        unit\n                                                  \n                                                        \n                                                                    TimeUnit\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    Logger\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        scheduler\n                                                  \n                                                        \n                                                                    Scheduler\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            interval\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        interval:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:77\n                            \n                        \n\n                \n                    \n                        The interval in PushgatewayMetricReporter in which this reporter send data\nto the pushgateway.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logger:     Logger\n\n                    \n                \n                    \n                        \n                            Type :     Logger\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:102\n                            \n                        \n\n                \n                    \n                        A simplified logger interface to log response code and message of the pushgateway.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            options\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        options:     PushgatewayReporterOptions\n\n                    \n                \n                    \n                        \n                            Type :     PushgatewayReporterOptions\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:68\n                            \n                        \n\n                \n                    \n                        The configuration object.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            reporter\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        reporter:     PrometheusMetricReporter\n\n                    \n                \n                    \n                        \n                            Type :     PrometheusMetricReporter\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:60\n                            \n                        \n\n                \n                    \n                        The reporter use ot generate the metrics string.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            scheduler\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        scheduler:     Scheduler\n\n                    \n                \n                    \n                        \n                            Type :     Scheduler\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:110\n                            \n                        \n\n                \n                    \n                        The scheduler function used to schedule the reporting wit the given interval.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            timer\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        timer:     NodeJS.Timer\n\n                    \n                \n                    \n                        \n                            Type :     NodeJS.Timer\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:94\n                            \n                        \n\n                \n                    \n                        A reference to the NodeJS Timer object created by the scheduler\nfunction - most likely the {@code setInterval()} function.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            unit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        unit:     TimeUnit\n\n                    \n                \n                    \n                        \n                            Type :     TimeUnit\n\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:85\n                            \n                        \n\n                \n                    \n                        The time unit the reporting interval is interpreted with.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            report\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        report()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:170\n                            \n                        \n\n\n                \n                    \n                            Calls the reporter t generate the metrics in a valid prometheus text format.\nSends the metrics via 'PUT' to the configured pushgateway.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            start\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        start()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:146\n                            \n                        \n\n\n                \n                    \n                            Uses the scheduler function to call the PushgatewayMetricReporter function\nin the interval specified. The interval is converted into MILLISECONDs.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            stop\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        stop()\n                    \n                \n\n\n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:156\n                            \n                        \n\n\n                \n                    \n                            Stops the scheduled reporting.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support\";\n\nimport * as http from \"http\";\nimport {\n    Logger,\n    MetricReporter,\n    MILLISECOND,\n    Scheduler,\n    SECOND,\n    TimeUnit,\n} from \"inspector-metrics\";\nimport { PrometheusMetricReporter } from \"./PrometheusMetricReporter\";\n\n/**\n * Configuration object for {@link PushgatewayMetricReporter}.\n *\n * @export\n * @class PushgatewayReporterOptions\n */\nexport class PushgatewayReporterOptions {\n\n    /**\n     * Creates an instance of PushgatewayReporterOptions.\n     *\n     * @param {string} [host=\"\"] the hostname or ip address of the pushgateway\n     * @param {number} [port=9091] the port of the pushgateway\n     * @param {string} [job=\"\"] the id of the job\n     * @param {string} [instance=\"\"] the id of this instance\n     * @memberof PushgatewayReporterOptions\n     */\n    constructor(\n        public readonly host: string = \"\",\n        public readonly port: number = 9091,\n        public readonly job: string = \"\",\n        public readonly instance: string = \"\",\n    ) {\n    }\n\n}\n\n/**\n * Metric reporter for prometheus's pushgateway.\n * Simply sends the output of the provided {@link PrometheusMetricReporter}\n * to the configurated pushgateway using the text format.\n *\n * @see https://github.com/prometheus/pushgateway\n * @export\n * @class PushgatewayMetricReporter\n * @extends {MetricReporter}\n */\nexport class PushgatewayMetricReporter extends MetricReporter {\n\n    /**\n     * The reporter use ot generate the metrics string.\n     *\n     * @private\n     * @type {PrometheusMetricReporter}\n     * @memberof PushgatewayMetricReporter\n     */\n    private reporter: PrometheusMetricReporter;\n    /**\n     * The configuration object.\n     *\n     * @private\n     * @type {PushgatewayReporterOptions}\n     * @memberof PushgatewayMetricReporter\n     */\n    private options: PushgatewayReporterOptions;\n    /**\n     * The interval in {@link PushgatewayMetricReporter#unit} in which this reporter send data\n     * to the pushgateway.\n     *\n     * @private\n     * @type {number}\n     * @memberof PushgatewayMetricReporter\n     */\n    private interval: number;\n    /**\n     * The time unit the reporting interval is interpreted with.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof PushgatewayMetricReporter\n     */\n    private unit: TimeUnit;\n    /**\n     * A reference to the NodeJS Timer object created by the scheduler\n     * function - most likely the {@code setInterval()} function.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof PushgatewayMetricReporter\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * A simplified logger interface to log response code and message of the pushgateway.\n     *\n     * @private\n     * @type {Logger}\n     * @memberof PushgatewayMetricReporter\n     */\n    private logger: Logger;\n    /**\n     * The scheduler function used to schedule the reporting wit the given interval.\n     *\n     * @private\n     * @type {Scheduler}\n     * @memberof PushgatewayMetricReporter\n     */\n    private scheduler: Scheduler;\n\n    /**\n     * Creates an instance of PushgatewayMetricReporter.\n     *\n     * @param {PrometheusMetricReporter} reporter\n     * @param {PushgatewayReporterOptions} options\n     * @param {number} [interval=15]\n     * @param {TimeUnit} [unit=SECOND]\n     * @param {Logger} [logger=null]\n     * @param {Scheduler} [scheduler=setInterval]\n     * @memberof PushgatewayMetricReporter\n     */\n    public constructor(\n        reporter: PrometheusMetricReporter,\n        options: PushgatewayReporterOptions,\n        interval: number = 15,\n        unit: TimeUnit = SECOND,\n        logger: Logger = null,\n        scheduler: Scheduler = setInterval) {\n        super();\n\n        this.interval = interval;\n        this.unit = unit;\n        this.reporter = reporter;\n        this.options = options;\n        this.logger = logger;\n        this.scheduler = scheduler;\n    }\n\n    /**\n     * Uses the scheduler function to call the {@link PushgatewayMetricReporter#report} function\n     * in the interval specified. The interval is converted into {@link MILLISECOND}s.\n     *\n     * @memberof PushgatewayMetricReporter\n     */\n    public start(): void {\n        const interval: number = this.unit.convertTo(this.interval, MILLISECOND);\n        this.timer = this.scheduler(() => this.report(), interval);\n    }\n\n    /**\n     * Stops the scheduled reporting.\n     *\n     * @memberof PushgatewayMetricReporter\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Calls the reporter t generate the metrics in a valid prometheus text format.\n     * Sends the metrics via 'PUT' to the configured pushgateway.\n     *\n     * @private\n     * @returns {string}\n     * @memberof PushgatewayMetricReporter\n     */\n    private report(): string {\n        const payload = this.reporter.getMetricsString();\n        const options = {\n            headers: {\n                \"Content-Length\": payload.length,\n                \"Content-Type\": \"text/plain\",\n            },\n            host: this.options.host,\n            method: \"PUT\",\n            path: `/metrics/job/${this.options.job}/instance/${this.options.instance}`,\n            port: `${this.options.port}`,\n        };\n\n        const req = http.request(options, (res) => {\n            if (this.logger) {\n                this.logger.debug(`${res.statusCode} ${res.statusMessage}`);\n            }\n        });\n        req.write(payload);\n        req.end();\n\n        return payload;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PushgatewayReporterOptions.html":{"url":"classes/PushgatewayReporterOptions.html","title":"class - PushgatewayReporterOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PushgatewayReporterOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            lib/metrics/PushgatewayMetricReporter.ts\n        \n\n            \n                Description\n            \n            \n                Configuration object for PushgatewayMetricReporter.\n\n            \n\n\n\n            \n                Example\n            \n            \n            \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Readonly\n                                host\n                            \n                            \n                                    Public\n                                    Readonly\n                                instance\n                            \n                            \n                                    Public\n                                    Readonly\n                                job\n                            \n                            \n                                    Public\n                                    Readonly\n                                port\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(host: string, port: number, job: string, instance: string)\n                    \n                \n                        \n                            \n                                Defined in lib/metrics/PushgatewayMetricReporter.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of PushgatewayReporterOptions.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        host\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the hostname or ip address of the pushgateway\n\n                                                        \n                                                \n                                                \n                                                        port\n                                                  \n                                                        \n                                                                    number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the port of the pushgateway\n\n                                                        \n                                                \n                                                \n                                                        job\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the id of the job\n\n                                                        \n                                                \n                                                \n                                                        instance\n                                                  \n                                                        \n                                                                    string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                the id of this instance\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            host\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        host:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:32\n                            \n                        \n\n                \n                    \n                        the hostname or ip address of the pushgateway\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            instance\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        instance:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:35\n                            \n                        \n\n                \n                    \n                        the id of this instance\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            job\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        job:     string\n\n                    \n                \n                    \n                        \n                            Type :     string\n\n                        \n                    \n                    \n                        \n                            Default value : \"\"\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:34\n                            \n                        \n\n                \n                    \n                        the id of the job\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                                Readonly\n                            port\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        port:     number\n\n                    \n                \n                    \n                        \n                            Type :     number\n\n                        \n                    \n                    \n                        \n                            Default value : 9091\n                        \n                    \n                        \n                            \n                                    Defined in lib/metrics/PushgatewayMetricReporter.ts:33\n                            \n                        \n\n                \n                    \n                        the port of the pushgateway\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import \"source-map-support\";\n\nimport * as http from \"http\";\nimport {\n    Logger,\n    MetricReporter,\n    MILLISECOND,\n    Scheduler,\n    SECOND,\n    TimeUnit,\n} from \"inspector-metrics\";\nimport { PrometheusMetricReporter } from \"./PrometheusMetricReporter\";\n\n/**\n * Configuration object for {@link PushgatewayMetricReporter}.\n *\n * @export\n * @class PushgatewayReporterOptions\n */\nexport class PushgatewayReporterOptions {\n\n    /**\n     * Creates an instance of PushgatewayReporterOptions.\n     *\n     * @param {string} [host=\"\"] the hostname or ip address of the pushgateway\n     * @param {number} [port=9091] the port of the pushgateway\n     * @param {string} [job=\"\"] the id of the job\n     * @param {string} [instance=\"\"] the id of this instance\n     * @memberof PushgatewayReporterOptions\n     */\n    constructor(\n        public readonly host: string = \"\",\n        public readonly port: number = 9091,\n        public readonly job: string = \"\",\n        public readonly instance: string = \"\",\n    ) {\n    }\n\n}\n\n/**\n * Metric reporter for prometheus's pushgateway.\n * Simply sends the output of the provided {@link PrometheusMetricReporter}\n * to the configurated pushgateway using the text format.\n *\n * @see https://github.com/prometheus/pushgateway\n * @export\n * @class PushgatewayMetricReporter\n * @extends {MetricReporter}\n */\nexport class PushgatewayMetricReporter extends MetricReporter {\n\n    /**\n     * The reporter use ot generate the metrics string.\n     *\n     * @private\n     * @type {PrometheusMetricReporter}\n     * @memberof PushgatewayMetricReporter\n     */\n    private reporter: PrometheusMetricReporter;\n    /**\n     * The configuration object.\n     *\n     * @private\n     * @type {PushgatewayReporterOptions}\n     * @memberof PushgatewayMetricReporter\n     */\n    private options: PushgatewayReporterOptions;\n    /**\n     * The interval in {@link PushgatewayMetricReporter#unit} in which this reporter send data\n     * to the pushgateway.\n     *\n     * @private\n     * @type {number}\n     * @memberof PushgatewayMetricReporter\n     */\n    private interval: number;\n    /**\n     * The time unit the reporting interval is interpreted with.\n     *\n     * @private\n     * @type {TimeUnit}\n     * @memberof PushgatewayMetricReporter\n     */\n    private unit: TimeUnit;\n    /**\n     * A reference to the NodeJS Timer object created by the scheduler\n     * function - most likely the {@code setInterval()} function.\n     *\n     * @private\n     * @type {NodeJS.Timer}\n     * @memberof PushgatewayMetricReporter\n     */\n    private timer: NodeJS.Timer;\n    /**\n     * A simplified logger interface to log response code and message of the pushgateway.\n     *\n     * @private\n     * @type {Logger}\n     * @memberof PushgatewayMetricReporter\n     */\n    private logger: Logger;\n    /**\n     * The scheduler function used to schedule the reporting wit the given interval.\n     *\n     * @private\n     * @type {Scheduler}\n     * @memberof PushgatewayMetricReporter\n     */\n    private scheduler: Scheduler;\n\n    /**\n     * Creates an instance of PushgatewayMetricReporter.\n     *\n     * @param {PrometheusMetricReporter} reporter\n     * @param {PushgatewayReporterOptions} options\n     * @param {number} [interval=15]\n     * @param {TimeUnit} [unit=SECOND]\n     * @param {Logger} [logger=null]\n     * @param {Scheduler} [scheduler=setInterval]\n     * @memberof PushgatewayMetricReporter\n     */\n    public constructor(\n        reporter: PrometheusMetricReporter,\n        options: PushgatewayReporterOptions,\n        interval: number = 15,\n        unit: TimeUnit = SECOND,\n        logger: Logger = null,\n        scheduler: Scheduler = setInterval) {\n        super();\n\n        this.interval = interval;\n        this.unit = unit;\n        this.reporter = reporter;\n        this.options = options;\n        this.logger = logger;\n        this.scheduler = scheduler;\n    }\n\n    /**\n     * Uses the scheduler function to call the {@link PushgatewayMetricReporter#report} function\n     * in the interval specified. The interval is converted into {@link MILLISECOND}s.\n     *\n     * @memberof PushgatewayMetricReporter\n     */\n    public start(): void {\n        const interval: number = this.unit.convertTo(this.interval, MILLISECOND);\n        this.timer = this.scheduler(() => this.report(), interval);\n    }\n\n    /**\n     * Stops the scheduled reporting.\n     *\n     * @memberof PushgatewayMetricReporter\n     */\n    public stop(): void {\n        if (this.timer) {\n            this.timer.unref();\n        }\n    }\n\n    /**\n     * Calls the reporter t generate the metrics in a valid prometheus text format.\n     * Sends the metrics via 'PUT' to the configured pushgateway.\n     *\n     * @private\n     * @returns {string}\n     * @memberof PushgatewayMetricReporter\n     */\n    private report(): string {\n        const payload = this.reporter.getMetricsString();\n        const options = {\n            headers: {\n                \"Content-Length\": payload.length,\n                \"Content-Type\": \"text/plain\",\n            },\n            host: this.options.host,\n            method: \"PUT\",\n            path: `/metrics/job/${this.options.job}/instance/${this.options.instance}`,\n            port: `${this.options.port}`,\n        };\n\n        const req = http.request(options, (res) => {\n            if (this.logger) {\n                this.logger.debug(`${res.statusCode} ${res.statusMessage}`);\n            }\n        });\n        req.write(payload);\n        req.end();\n\n        return payload;\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                class\n            \n            \n                Percentiles\n            \n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                class\n            \n            \n                PrometheusMetricReporter\n            \n            \n                100 %\n                (39/39)\n            \n        \n        \n            \n                \n                lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                class\n            \n            \n                PrometheusReporterOptions\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                interface\n            \n            \n                MetricEntry\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                lib/metrics/PushgatewayMetricReporter.ts\n            \n            \n                class\n            \n            \n                PushgatewayMetricReporter\n            \n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                lib/metrics/PushgatewayMetricReporter.ts\n            \n            \n                class\n            \n            \n                PushgatewayReporterOptions\n            \n            \n                100 %\n                (6/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            inspector-metrics : ^1.11.0\n        \n            source-map-support : ^0.5.9\n    \n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ninspector-prometheus\nTypescript metric reporter for prometheus.\n\n    \n        \n    \n    \n        \n    \n    \n        \n    \n    \n        \n    \n\n\nThis library is made for inspector-metrics\nnode module and is meant to be used with nodejs.  \nAll metrics from the inspector-metrics library\ncan be pushed to a pushgateway or be exposed with\na custom /metrics endpoint in your application.\ninstall\nnpm install --save inspector-prometheus\nbasic usage\nexample.ts\nimport {\n    MetricRegistry,\n} from \"inspector-metrics\";\n\nimport {\n    PrometheusMetricReporter,\n} from \"inspector-prometheus\";\n\n// contains all metrics\nconst registry = new MetricRegistry();\n// exposes the metrics\nconst reporter = new PrometheusMetricReporter();\n\n// register the registry within the reporter\nreporter.addMetricRegistry(registry);\n\n// common tags for all metrics\nconst tags = new Map();\ntags.set(\"app_version\", \"1.0.0\");\nreporter.setTags(tags);\n\n// a simple request timer used to report response latencies\nconst requests: Timer = registry.newTimer(\"requests\");\n// custom metric tag\nrequests.setTag(\"host\", \"127.0.0.3\");\n\n// some server implementation - could be anything KOA, Express, HAPI ...\nconst server = new Hapi.Server({ host: \"0.0.0.0\", port: 8080 });\n\n// '/metrics' is the standard route used by prometheus ...\nserver.route({\n    method: \"GET\",\n    path: \"/metrics\",\n    handler(request, h) {\n        console.log(\"reporting metrics\");\n        return h.response(reporter.getMetricsString())\n            .code(200)\n            .type(\"text/plain\");\n    },\n});\n\n// starts the server\nserver.start();/etc/prometheus/config.yml\nglobal:\n  scrape_interval:     15s\n  evaluation_interval: 30s\n\nscrape_configs:\n- job_name: test-app\n  metrics_path: /metrics\n  static_configs:\n    - targets:\n      - localhost:8080example metrics report\n# HELP requests request durations for some endpoint\n# TYPE requests summary\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.01\"} 0\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.05\"} 0\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.5\"} 999936\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.75\"} 999936\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.9\"} 1000192\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.95\"} 1000192\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.98\"} 1999872\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.99\"} 2000128\nrequests{app_version=\"1.0.0\",host=\"127.0.0.3\",quantile=\"0.999\"} 4000000\nrequests_count{app_version=\"1.0.0\",host=\"127.0.0.3\"} 362\nrequests_sum{app_version=\"1.0.0\",host=\"127.0.0.3\"} 283998208reporting options for PrometheusMetricReporter\nimport {\n    PrometheusMetricReporter,\n    PrometheusReporterOptions,\n} from \"inspector-prometheus\";\n\nconst reporter = new PrometheusMetricReporter(new PrometheusReporterOptions(\n    true, // includeTimestamp - default is false\n    true, // emitComments - default is true\n    false, // useUntyped - default is false\n));report metrics with pushgateway\nimport ...; // like in the example above\n\nimport {\n    PrometheusMetricReporter,\n    PushgatewayMetricReporter,\n    PushgatewayReporterOptions,\n} from \"inspector-prometheus\";\n\n// contains all metrics\nconst registry = new MetricRegistry();\n// exposes the metrics\nconst reporter = new PrometheusMetricReporter();\n\n// register the registry within the reporter\nreporter.addMetricRegistry(registry);\n\nconst pushReporter = new PushgatewayMetricReporter(\n    reporter,\n    new PushgatewayReporterOptions(\n        \"localhost\", // assuming the pushgateway is running on localhost\n        9091, // standard port for pushgateway\n        \"pushgateway\", // id of the job\n        \"127.0.0.4\", // id of the instance\n    ));\n\n// start reporting\npushReporter.start();License\nMIT\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2018 \nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MetricType   (lib/.../PrometheusMetricReporter.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    lib/metrics/PrometheusMetricReporter.ts\n    \n        \n            \n                \n                    \n                        \n                        MetricType\n                    \n                \n                    \n                        \n                            Enumeration used to determine valid metric types of prometheus.\n\n                        \n                    \n                \n                    \n                        MetricType:     \"counter\" | \"gauge\" | \"histogram\" | \"summary\" | \"untyped\"\n\n                    \n                \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"unit-test.html":{"url":"unit-test.html","title":"unit-test - unit-test","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Unit test coverage\n\n\n\n    \n    \n    \n    \n\n\n\n    \n        \n            File\n            Statements\n            Branches\n            Functions\n            Lines\n        \n    \n    \n        \n            \n                \n                        /mnt/c/git/inspector-prometheus/lib/metrics/PrometheusMetricReporter.ts\n            \n            \n                93 %\n                (148/160)\n            \n            \n                85 %\n                (71/84)\n            \n            \n                92 %\n                (57/62)\n            \n            \n                92 %\n                (147/159)\n            \n        \n        \n            \n                \n                        /mnt/c/git/inspector-prometheus/lib/metrics/PushgatewayMetricReporter.ts\n            \n            \n                93 %\n                (27/29)\n            \n            \n                8 %\n                (1/12)\n            \n            \n                86 %\n                (6/7)\n            \n            \n                93 %\n                (26/28)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
